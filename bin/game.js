(function () { "use strict";
var $estr = function() { return js.Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function inherit() {}; inherit.prototype = from; var proto = new inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Globals = function() { }
Globals.__name__ = ["Globals"];
var HxOverrides = function() { }
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) return undefined;
	return x;
}
HxOverrides.substr = function(s,pos,len) {
	if(pos != null && pos != 0 && len != null && len < 0) return "";
	if(len == null) len = s.length;
	if(pos < 0) {
		pos = s.length + pos;
		if(pos < 0) pos = 0;
	} else if(len < 0) len = s.length + len - pos;
	return s.substr(pos,len);
}
HxOverrides.remove = function(a,obj) {
	var i = 0;
	var l = a.length;
	while(i < l) {
		if(a[i] == obj) {
			a.splice(i,1);
			return true;
		}
		i++;
	}
	return false;
}
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
}
var Lambda = function() { }
Lambda.__name__ = ["Lambda"];
Lambda.indexOf = function(it,v) {
	var i = 0;
	var $it0 = $iterator(it)();
	while( $it0.hasNext() ) {
		var v2 = $it0.next();
		if(v == v2) return i;
		i++;
	}
	return -1;
}
var List = function() {
	this.length = 0;
};
List.__name__ = ["List"];
List.prototype = {
	iterator: function() {
		return { h : this.h, hasNext : function() {
			return this.h != null;
		}, next : function() {
			if(this.h == null) return null;
			var x = this.h[0];
			this.h = this.h[1];
			return x;
		}};
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l[0] == v) {
				if(prev == null) this.h = l[1]; else prev[1] = l[1];
				if(this.q == l) this.q = prev;
				this.length--;
				return true;
			}
			prev = l;
			l = l[1];
		}
		return false;
	}
	,add: function(item) {
		var x = [item];
		if(this.h == null) this.h = x; else this.q[1] = x;
		this.q = x;
		this.length++;
	}
	,__class__: List
}
var IMap = function() { }
IMap.__name__ = ["IMap"];
var milkshake = {}
milkshake.core = {}
milkshake.core.Node = function(id) {
	if(id == null) id = "undefined-node";
	this.id = id;
	this.nodes = [];
	this.onNodeAdded = new hsl.haxe.DirectSignaler(this);
};
milkshake.core.Node.__name__ = ["milkshake","core","Node"];
milkshake.core.Node.prototype = {
	dispatchOnNodeAdded: function(node) {
		if(this.parent != null) this.parent.dispatchOnNodeAdded(node);
		this.onNodeAdded.dispatch(node,null,{ fileName : "Node.hx", lineNumber : 71, className : "milkshake.core.Node", methodName : "dispatchOnNodeAdded"});
	}
	,getNodeById: function(id) {
		var t;
		var n = this.nodes.filter(function(node) {
			return node.id == id;
		})[0];
		if(n == null) {
			console.log("Child node not found with id '" + id + "' in node '" + this.id + "'!");
			return null;
		}
		if(js.Boot.__instanceof(n,t)) {
			t = n;
			return t;
		}
		console.log("Found node with id '" + id + "'but could not cast to type '" + Std.string(t) + "'!");
		return null;
	}
	,removeNode: function(node) {
		HxOverrides.remove(this.nodes,node);
	}
	,addNode: function(node) {
		node.setParent(this);
		this.nodes.push(node);
	}
	,setParent: function(parent) {
		this.parent = parent;
	}
	,__class__: milkshake.core.Node
}
milkshake.core.Entity = function(id) {
	if(id == null) id = "undefined-entity";
	milkshake.core.Node.call(this,id);
	this.position = milkshake.core.utils.Vector2.zero();
};
milkshake.core.Entity.__name__ = ["milkshake","core","Entity"];
milkshake.core.Entity.__super__ = milkshake.core.Node;
milkshake.core.Entity.prototype = $extend(milkshake.core.Node.prototype,{
	set_y: function(value) {
		return this.position.y = value;
	}
	,get_y: function() {
		return this.position.y;
	}
	,set_x: function(value) {
		return this.position.x = value;
	}
	,get_x: function() {
		return this.position.x;
	}
	,update: function(deltaTime) {
		var _g = 0, _g1 = this.nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			if(js.Boot.__instanceof(node,milkshake.core.Entity) && this.scene != null) {
				var entity = node;
				entity.update(deltaTime);
			}
		}
	}
	,setNodeIfEntity: function(node) {
		if(js.Boot.__instanceof(node,milkshake.core.Entity) && this.scene != null) {
			var entity = node;
			entity.setScene(this.scene);
			this.scene.onNodeAdded.dispatch(node,null,{ fileName : "Entity.hx", lineNumber : 44, className : "milkshake.core.Entity", methodName : "setNodeIfEntity"});
		}
	}
	,addNode: function(node) {
		this.setNodeIfEntity(node);
		milkshake.core.Node.prototype.addNode.call(this,node);
	}
	,setScene: function(scene) {
		this.scene = scene;
		var _g = 0, _g1 = this.nodes;
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			this.setNodeIfEntity(node);
		}
	}
	,__class__: milkshake.core.Entity
});
milkshake.core.GameObject = function(id) {
	if(id == null) id = "undefined-gameobject";
	milkshake.core.Entity.call(this,id);
	this.displayObject = new PIXI.DisplayObjectContainer();
};
milkshake.core.GameObject.__name__ = ["milkshake","core","GameObject"];
milkshake.core.GameObject.__super__ = milkshake.core.Entity;
milkshake.core.GameObject.prototype = $extend(milkshake.core.Entity.prototype,{
	set_visible: function(value) {
		return this.displayObject.visible = value;
	}
	,get_visible: function() {
		return this.displayObject.visible;
	}
	,set_pivotY: function(value) {
		return this.displayObject.pivot.y = value;
	}
	,get_pivotY: function() {
		return this.displayObject.pivot.y;
	}
	,set_pivotX: function(value) {
		return this.displayObject.pivot.x = value;
	}
	,get_pivotX: function() {
		return this.displayObject.pivot.x;
	}
	,set_rotation: function(value) {
		return this.displayObject.rotation = value;
	}
	,get_rotation: function() {
		return this.displayObject.rotation;
	}
	,set_scaleY: function(value) {
		return this.displayObject.scale.y = value;
	}
	,get_scaleY: function() {
		return this.displayObject.scale.y;
	}
	,set_scaleX: function(value) {
		return this.displayObject.scale.x = value;
	}
	,get_scaleX: function() {
		return this.displayObject.scale.x;
	}
	,set_y: function(value) {
		this.displayObject.position.y = value;
		return milkshake.core.Entity.prototype.set_y.call(this,value);
	}
	,set_x: function(value) {
		this.displayObject.position.x = value;
		return milkshake.core.Entity.prototype.set_x.call(this,value);
	}
	,removeNode: function(node) {
		if(js.Boot.__instanceof(node,milkshake.core.GameObject)) {
			var gameObject = node;
			this.displayObject.removeChild(gameObject.displayObject);
		}
		milkshake.core.Entity.prototype.removeNode.call(this,node);
	}
	,addNode: function(node) {
		if(js.Boot.__instanceof(node,milkshake.core.GameObject)) {
			var gameObject = node;
			this.displayObject.addChild(gameObject.displayObject);
		}
		milkshake.core.Entity.prototype.addNode.call(this,node);
	}
	,__class__: milkshake.core.GameObject
});
var PixiDebug = function() {
	milkshake.core.GameObject.call(this);
	this.pixiDebug = new PixiDebugRenderer();
	this.displayObject.addChild(this.pixiDebug.graphics);
};
PixiDebug.__name__ = ["PixiDebug"];
PixiDebug.__super__ = milkshake.core.GameObject;
PixiDebug.prototype = $extend(milkshake.core.GameObject.prototype,{
	drawSpace: function(space) {
		this.pixiDebug.draw(space);
	}
	,__class__: PixiDebug
});
var nape = {}
nape.util = {}
nape.util.Debug = function() { }
nape.util.Debug.__name__ = ["nape","util","Debug"];
nape.util.Debug.version = function() {
	return "Nape 2.0.16";
}
nape.util.Debug.clearObjectPools = function() {
	while(nape.constraint.ConstraintIterator.zpp_pool != null) {
		var nxt = nape.constraint.ConstraintIterator.zpp_pool.zpp_next;
		nape.constraint.ConstraintIterator.zpp_pool.zpp_next = null;
		nape.constraint.ConstraintIterator.zpp_pool = nxt;
	}
	while(nape.phys.InteractorIterator.zpp_pool != null) {
		var nxt = nape.phys.InteractorIterator.zpp_pool.zpp_next;
		nape.phys.InteractorIterator.zpp_pool.zpp_next = null;
		nape.phys.InteractorIterator.zpp_pool = nxt;
	}
	while(nape.phys.BodyIterator.zpp_pool != null) {
		var nxt = nape.phys.BodyIterator.zpp_pool.zpp_next;
		nape.phys.BodyIterator.zpp_pool.zpp_next = null;
		nape.phys.BodyIterator.zpp_pool = nxt;
	}
	while(nape.phys.CompoundIterator.zpp_pool != null) {
		var nxt = nape.phys.CompoundIterator.zpp_pool.zpp_next;
		nape.phys.CompoundIterator.zpp_pool.zpp_next = null;
		nape.phys.CompoundIterator.zpp_pool = nxt;
	}
	while(nape.callbacks.ListenerIterator.zpp_pool != null) {
		var nxt = nape.callbacks.ListenerIterator.zpp_pool.zpp_next;
		nape.callbacks.ListenerIterator.zpp_pool.zpp_next = null;
		nape.callbacks.ListenerIterator.zpp_pool = nxt;
	}
	while(nape.callbacks.CbTypeIterator.zpp_pool != null) {
		var nxt = nape.callbacks.CbTypeIterator.zpp_pool.zpp_next;
		nape.callbacks.CbTypeIterator.zpp_pool.zpp_next = null;
		nape.callbacks.CbTypeIterator.zpp_pool = nxt;
	}
	while(nape.geom.ConvexResultIterator.zpp_pool != null) {
		var nxt = nape.geom.ConvexResultIterator.zpp_pool.zpp_next;
		nape.geom.ConvexResultIterator.zpp_pool.zpp_next = null;
		nape.geom.ConvexResultIterator.zpp_pool = nxt;
	}
	while(nape.geom.GeomPolyIterator.zpp_pool != null) {
		var nxt = nape.geom.GeomPolyIterator.zpp_pool.zpp_next;
		nape.geom.GeomPolyIterator.zpp_pool.zpp_next = null;
		nape.geom.GeomPolyIterator.zpp_pool = nxt;
	}
	while(nape.geom.Vec2Iterator.zpp_pool != null) {
		var nxt = nape.geom.Vec2Iterator.zpp_pool.zpp_next;
		nape.geom.Vec2Iterator.zpp_pool.zpp_next = null;
		nape.geom.Vec2Iterator.zpp_pool = nxt;
	}
	while(nape.geom.RayResultIterator.zpp_pool != null) {
		var nxt = nape.geom.RayResultIterator.zpp_pool.zpp_next;
		nape.geom.RayResultIterator.zpp_pool.zpp_next = null;
		nape.geom.RayResultIterator.zpp_pool = nxt;
	}
	while(nape.shape.ShapeIterator.zpp_pool != null) {
		var nxt = nape.shape.ShapeIterator.zpp_pool.zpp_next;
		nape.shape.ShapeIterator.zpp_pool.zpp_next = null;
		nape.shape.ShapeIterator.zpp_pool = nxt;
	}
	while(nape.shape.EdgeIterator.zpp_pool != null) {
		var nxt = nape.shape.EdgeIterator.zpp_pool.zpp_next;
		nape.shape.EdgeIterator.zpp_pool.zpp_next = null;
		nape.shape.EdgeIterator.zpp_pool = nxt;
	}
	while(nape.dynamics.ContactIterator.zpp_pool != null) {
		var nxt = nape.dynamics.ContactIterator.zpp_pool.zpp_next;
		nape.dynamics.ContactIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ContactIterator.zpp_pool = nxt;
	}
	while(nape.dynamics.ArbiterIterator.zpp_pool != null) {
		var nxt = nape.dynamics.ArbiterIterator.zpp_pool.zpp_next;
		nape.dynamics.ArbiterIterator.zpp_pool.zpp_next = null;
		nape.dynamics.ArbiterIterator.zpp_pool = nxt;
	}
	while(nape.dynamics.InteractionGroupIterator.zpp_pool != null) {
		var nxt = nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next;
		nape.dynamics.InteractionGroupIterator.zpp_pool.zpp_next = null;
		nape.dynamics.InteractionGroupIterator.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = nxt;
	}
	while(zpp_nape.phys.ZPP_Material.zpp_pool != null) {
		var nxt = zpp_nape.phys.ZPP_Material.zpp_pool.next;
		zpp_nape.phys.ZPP_Material.zpp_pool.next = null;
		zpp_nape.phys.ZPP_Material.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = nxt;
	}
	while(zpp_nape.phys.ZPP_FluidProperties.zpp_pool != null) {
		var nxt = zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool.next = null;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = nxt;
	}
	while(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool != null) {
		var nxt = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = nxt;
	}
	while(zpp_nape.callbacks.ZPP_Callback.zpp_pool != null) {
		var nxt = zpp_nape.callbacks.ZPP_Callback.zpp_pool.next;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_Callback.zpp_pool = nxt;
	}
	while(zpp_nape.callbacks.ZPP_CbSet.zpp_pool != null) {
		var nxt = zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_GeomVert.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_GeomVert.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool.next = null;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_Mat23.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_Mat23.zpp_pool.next;
		zpp_nape.geom.ZPP_Mat23.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_CutVert.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_CutVert.zpp_pool.next;
		zpp_nape.geom.ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_CutInt.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_CutInt.zpp_pool.next;
		zpp_nape.geom.ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_Vec2.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_Vec2.zpp_pool.next;
		zpp_nape.geom.ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_PartitionPair.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimplifyV.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimplifyP.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_AABB.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_AABB.zpp_pool.next;
		zpp_nape.geom.ZPP_AABB.zpp_pool.next = null;
		zpp_nape.geom.ZPP_AABB.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_ToiEvent.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimpleVert.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = nxt;
	}
	while(zpp_nape.util.Hashable2_Boolfalse.zpp_pool != null) {
		var nxt = zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool.next = null;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_MarchSpan.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = nxt;
	}
	while(zpp_nape.geom.ZPP_MarchPair.zpp_pool != null) {
		var nxt = zpp_nape.geom.ZPP_MarchPair.zpp_pool.next;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool.next = null;
		zpp_nape.geom.ZPP_MarchPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = nxt;
	}
	while(zpp_nape.shape.ZPP_Edge.zpp_pool != null) {
		var nxt = zpp_nape.shape.ZPP_Edge.zpp_pool.next;
		zpp_nape.shape.ZPP_Edge.zpp_pool.next = null;
		zpp_nape.shape.ZPP_Edge.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_SweepData.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_SweepData.zpp_pool.next;
		zpp_nape.space.ZPP_SweepData.zpp_pool.next = null;
		zpp_nape.space.ZPP_SweepData.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_AABBNode.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_AABBNode.zpp_pool.next;
		zpp_nape.space.ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_AABBPair.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_AABBPair.zpp_pool.next;
		zpp_nape.space.ZPP_AABBPair.zpp_pool.next = null;
		zpp_nape.space.ZPP_AABBPair.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_Contact.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_Contact.zpp_pool.next;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_Contact.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_Island.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_Island.zpp_pool.next;
		zpp_nape.space.ZPP_Island.zpp_pool.next = null;
		zpp_nape.space.ZPP_Island.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_Component.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_Component.zpp_pool.next;
		zpp_nape.space.ZPP_Component.zpp_pool.next = null;
		zpp_nape.space.ZPP_Component.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = nxt;
	}
	while(zpp_nape.space.ZPP_CallbackSet.zpp_pool != null) {
		var nxt = zpp_nape.space.ZPP_CallbackSet.zpp_pool.next;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool.next = null;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool != null) {
		var nxt = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool.next = null;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = nxt;
	}
	while(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool != null) {
		var nxt = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool.next = null;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZNPNode_RayResult.zpp_pool != null) {
		var nxt = zpp_nape.util.ZNPNode_RayResult.zpp_pool.next;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool.next = null;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = nxt;
	}
	while(zpp_nape.util.ZPP_PubPool.poolGeomPoly != null) {
		var nxt = zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = nxt;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec2 != null) {
		var nxt = zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec2.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec2 = nxt;
	}
	while(zpp_nape.util.ZPP_PubPool.poolVec3 != null) {
		var nxt = zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool;
		zpp_nape.util.ZPP_PubPool.poolVec3.zpp_pool = null;
		zpp_nape.util.ZPP_PubPool.poolVec3 = nxt;
	}
}
var PixiDebugRenderer = function() {
	this.graphics = new PIXI.Graphics();
};
PixiDebugRenderer.__name__ = ["PixiDebugRenderer"];
PixiDebugRenderer.__super__ = nape.util.Debug;
PixiDebugRenderer.prototype = $extend(nape.util.Debug.prototype,{
	draw: function(space) {
	}
	,drawBody: function(body) {
		var $it0 = body.zpp_inner.wrap_shapes.iterator();
		while( $it0.hasNext() ) {
			var shape = $it0.next();
			if(js.Boot.__instanceof(shape,nape.shape.Polygon)) {
				this.graphics.beginFill(10092339,1);
				var polygon = shape;
				var _g1 = 0, _g = ((function($this) {
					var $r;
					if(polygon.zpp_inner_zn.wrap_gverts == null) polygon.zpp_inner_zn.getgverts();
					$r = polygon.zpp_inner_zn.wrap_gverts;
					return $r;
				}(this))).zpp_gl();
				while(_g1 < _g) {
					var index = _g1++;
					var position = ((function($this) {
						var $r;
						if(polygon.zpp_inner_zn.wrap_gverts == null) polygon.zpp_inner_zn.getgverts();
						$r = polygon.zpp_inner_zn.wrap_gverts;
						return $r;
					}(this))).at(index);
					if(index == 0) this.graphics.moveTo((function($this) {
						var $r;
						if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						position.zpp_inner.validate();
						$r = position.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						position.zpp_inner.validate();
						$r = position.zpp_inner.y;
						return $r;
					}(this))); else this.graphics.lineTo((function($this) {
						var $r;
						if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						position.zpp_inner.validate();
						$r = position.zpp_inner.x;
						return $r;
					}(this)),(function($this) {
						var $r;
						if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						position.zpp_inner.validate();
						$r = position.zpp_inner.y;
						return $r;
					}(this)));
				}
			}
			if(js.Boot.__instanceof(shape,nape.shape.Circle)) {
				var circle = shape;
				this.graphics.beginFill(65280,0.5);
				this.graphics.lineStyle(1,65280);
				this.graphics.drawCircle(((function($this) {
					var $r;
					if(circle.zpp_inner.wrap_worldCOM == null) {
						circle.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(circle.zpp_inner.worldCOMx,circle.zpp_inner.worldCOMy,null);
						circle.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=circle.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = circle.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).get_x(),((function($this) {
					var $r;
					if(circle.zpp_inner.wrap_worldCOM == null) {
						circle.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(circle.zpp_inner.worldCOMx,circle.zpp_inner.worldCOMy,null);
						circle.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=circle.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = circle.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).get_y(),circle.zpp_inner_zn.radius);
				this.graphics.moveTo(((function($this) {
					var $r;
					if(circle.zpp_inner.wrap_worldCOM == null) {
						circle.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(circle.zpp_inner.worldCOMx,circle.zpp_inner.worldCOMy,null);
						circle.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=circle.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = circle.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).get_x(),((function($this) {
					var $r;
					if(circle.zpp_inner.wrap_worldCOM == null) {
						circle.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(circle.zpp_inner.worldCOMx,circle.zpp_inner.worldCOMy,null);
						circle.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						circle.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=circle.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = circle.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).get_y());
				this.graphics.lineTo(((function($this) {
					var $r;
					if(body.zpp_inner.wrap_pos == null) body.zpp_inner.setupPosition();
					$r = body.zpp_inner.wrap_pos;
					return $r;
				}(this))).get_x() + circle.zpp_inner_zn.radius * Math.cos(body.zpp_inner.rot),((function($this) {
					var $r;
					if(body.zpp_inner.wrap_pos == null) body.zpp_inner.setupPosition();
					$r = body.zpp_inner.wrap_pos;
					return $r;
				}(this))).get_y() + circle.zpp_inner_zn.radius * Math.sin(body.zpp_inner.rot));
			}
		}
	}
	,clear: function() {
		this.graphics.clear();
	}
	,__class__: PixiDebugRenderer
});
var Reflect = function() { }
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	var v = null;
	try {
		v = o[field];
	} catch( e ) {
	}
	return v;
}
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) a.push(f);
		}
	}
	return a;
}
Reflect.isFunction = function(f) {
	return typeof(f) == "function" && !(f.__name__ || f.__ename__);
}
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) return true;
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) return false;
	return f1.scope == f2.scope && f1.method == f2.method && f1.method != null;
}
Reflect.copy = function(o) {
	var o2 = { };
	var _g = 0, _g1 = Reflect.fields(o);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		o2[f] = Reflect.field(o,f);
	}
	return o2;
}
milkshake.IGame = function() { }
milkshake.IGame.__name__ = ["milkshake","IGame"];
milkshake.IGame.prototype = {
	__class__: milkshake.IGame
}
milkshake.Milkshake = function() {
};
milkshake.Milkshake.__name__ = ["milkshake","Milkshake"];
milkshake.Milkshake.__interfaces__ = [milkshake.IGame];
milkshake.Milkshake.prototype = {
	update: function(delta) {
	}
	,setStage: function(stage) {
		this.stage = stage;
	}
	,boot: function(width,height) {
		this.core = new milkshake.pixi.PixiGame();
		this.core.create(this,width,height,3394815);
	}
	,__class__: milkshake.Milkshake
}
milkshake.game = {}
milkshake.game.MilkshakeGame = function() {
	milkshake.Milkshake.call(this);
	milkshake.game.MilkshakeGame.instance = this;
	this.sceneManager = new milkshake.game.scene.SceneManager();
	this.viewManager = new milkshake.game.ui.view.ViewManager();
};
milkshake.game.MilkshakeGame.__name__ = ["milkshake","game","MilkshakeGame"];
milkshake.game.MilkshakeGame.__super__ = milkshake.Milkshake;
milkshake.game.MilkshakeGame.prototype = $extend(milkshake.Milkshake.prototype,{
	update: function(delta) {
		milkshake.Milkshake.prototype.update.call(this,delta);
		this.sceneManager.update(delta);
	}
	,setStage: function(stage) {
		milkshake.Milkshake.prototype.setStage.call(this,stage);
		stage.addChild(this.sceneManager.displayObject);
	}
	,__class__: milkshake.game.MilkshakeGame
});
var SpaceGame = function() {
	milkshake.game.MilkshakeGame.call(this);
	window.world = this.game = this;
	this.boot(Globals.SCREEN_HEIGHT,Globals.SCREEN_WIDTH);
};
SpaceGame.__name__ = ["SpaceGame"];
SpaceGame.main = function() {
	new SpaceGame();
}
SpaceGame.__super__ = milkshake.game.MilkshakeGame;
SpaceGame.prototype = $extend(milkshake.game.MilkshakeGame.prototype,{
	update: function(delta) {
		milkshake.game.MilkshakeGame.prototype.update.call(this,delta);
	}
	,boot: function(width,height) {
		milkshake.game.MilkshakeGame.prototype.boot.call(this,width,height);
		this.networkManager = new network.MilkshakeNetworkManager(this.sceneManager);
		this.sceneManager.addScene("startMenu",new scenes.startmenu.StartMenuScene(this.core,this.sceneManager));
		this.sceneManager.addScene("roomListScene",new scenes.roomlist.RoomListScene(this.core,this.networkManager));
		this.sceneManager.addScene("lobbyScene",new scenes.lobby.LobbyScene(this.core,this.networkManager));
		this.sceneManager.addScene("game",new scenes.game.GameScene(this.core,this.sceneManager,this.networkManager));
		this.sceneManager.changeScene("startMenu");
	}
	,__class__: SpaceGame
});
var Std = function() { }
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js.Boot.__string_rec(s,"");
}
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	__class__: StringBuf
}
var StringTools = function() { }
StringTools.__name__ = ["StringTools"];
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	do {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
	} while(n > 0);
	if(digits != null) while(s.length < digits) s = "0" + s;
	return s;
}
var Type = function() { }
Type.__name__ = ["Type"];
Type.getClass = function(o) {
	if(o == null) return null;
	return o.__class__;
}
Type.getSuperClass = function(c) {
	return c.__super__;
}
Type.getClassName = function(c) {
	var a = c.__name__;
	return a.join(".");
}
var entities = {}
entities.Terrain = function(space) {
	milkshake.core.GameObject.call(this,"terrain");
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)),new nape.geom.Vec2(1000,160));
	var list = new nape.geom.Vec2List();
	var array = [];
	var _g = 0;
	while(_g < 100) {
		var i = _g++;
		var maxHeight = 750;
		var random = Math.random() * maxHeight;
		array.push(new nape.geom.Vec2(i * 750,random));
	}
	var smoothArray = helpers.CatmullRom.CatmullRom(array,10);
	var newArray = [];
	newArray.push(new nape.geom.Vec2(-10000,0));
	newArray.push(new nape.geom.Vec2(0,0));
	var _g = 0;
	while(_g < smoothArray.length) {
		var a = smoothArray[_g];
		++_g;
		newArray.push(a);
	}
	newArray.push(new nape.geom.Vec2(75000,6000));
	var _g = 1;
	while(_g < 99) {
		var i = _g++;
		newArray.push(new nape.geom.Vec2(75000 - i * 2000,6000));
	}
	newArray.push(new nape.geom.Vec2(0,6000));
	var geomList = this.decompose(new nape.geom.GeomPoly(newArray));
	var $it0 = (function($this) {
		var $r;
		geomList.zpp_inner.valmod();
		$r = nape.geom.GeomPolyIterator.get(geomList);
		return $r;
	}(this));
	while( $it0.hasNext() ) {
		var geom = $it0.next();
		this.body.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(geom));
		console.log("add");
	}
	this.body.set_space(space);
};
entities.Terrain.__name__ = ["entities","Terrain"];
entities.Terrain.__super__ = milkshake.core.GameObject;
entities.Terrain.prototype = $extend(milkshake.core.GameObject.prototype,{
	decompose: function(poly) {
		var polys = new nape.geom.GeomPolyList();
		if((function($this) {
			var $r;
			if(poly != null && poly.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = poly.zpp_inner.vertices == null || poly.zpp_inner.vertices.next == null || poly.zpp_inner.vertices.prev == poly.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Simple.isSimple(poly.zpp_inner.vertices);
			return $r;
		}(this))) {
			if(polys.zpp_inner.reverse_flag) polys.push(poly); else polys.unshift(poly);
		} else poly.simplify(2).convexDecomposition(null,polys);
		var convexPolys = new nape.geom.GeomPolyList();
		polys.foreach(function(p) {
			p.convexDecomposition(true,convexPolys);
		});
		return convexPolys;
	}
	,__class__: entities.Terrain
});
milkshake.core.Sprite = function(url,id) {
	if(id == null) id = "undefined-sprite";
	milkshake.core.GameObject.call(this,id);
	if(url != "") {
		this.displayObject.addChild(this.sprite = new PIXI.Sprite(PIXI.Texture.fromImage(url)));
		this.sprite.anchor.x = 0.5;
		this.sprite.anchor.y = 0.5;
	}
};
milkshake.core.Sprite.__name__ = ["milkshake","core","Sprite"];
milkshake.core.Sprite.__super__ = milkshake.core.GameObject;
milkshake.core.Sprite.prototype = $extend(milkshake.core.GameObject.prototype,{
	set_height: function(value) {
		return this.sprite.height = value;
	}
	,get_height: function() {
		return this.sprite.height;
	}
	,set_width: function(value) {
		return this.sprite.width = value;
	}
	,get_width: function() {
		return this.sprite.width;
	}
	,__class__: milkshake.core.Sprite
});
entities.Sheep = function(space,$int) {
	milkshake.core.Sprite.call(this,"sheeps/sheep0001.png");
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Circle(16));
	this.body.get_position().set_x(50);
	this.body.set_mass(4);
	this.body.set_space(space);
	this.body.set_group($int);
	this.set_scaleX(this.set_scaleY(0.25));
};
entities.Sheep.__name__ = ["entities","Sheep"];
entities.Sheep.__super__ = milkshake.core.Sprite;
entities.Sheep.prototype = $extend(milkshake.core.Sprite.prototype,{
	update: function(deltaTime) {
		milkshake.core.Sprite.prototype.update.call(this,deltaTime);
		this.set_x(this.body.get_position().get_x());
		this.set_y(this.body.get_position().get_y());
		this.set_rotation(this.body.zpp_inner.rot);
	}
	,__class__: entities.Sheep
});
entities.Tractor = function(space,tractorIgnoreGroup,isRemote) {
	if(isRemote == null) isRemote = false;
	milkshake.core.Sprite.call(this,"pimpmobile/tractor_back.png");
	this.isRemote = isRemote;
	this.space = space;
	var ignoreGroup = new nape.dynamics.InteractionGroup(true);
	if(tractorIgnoreGroup == ignoreGroup) throw "Error: Cannot assign InteractionGroup to itself";
	ignoreGroup.zpp_inner.setGroup(tractorIgnoreGroup == null?null:tractorIgnoreGroup.zpp_inner);
	if(ignoreGroup.zpp_inner.group == null) null; else ignoreGroup.zpp_inner.group.outer;
	this.body = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)),new nape.geom.Vec2(600,200));
	this.body.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(-60,0,120,70)));
	this.body.set_group(ignoreGroup);
	this.backWheel = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.backWheel.zpp_inner.wrap_shapes.add(new nape.shape.Circle(60));
	this.backWheel.set_group(ignoreGroup);
	this.frontWheel = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.frontWheel.zpp_inner.wrap_shapes.add(new nape.shape.Circle(32));
	this.frontWheel.set_group(ignoreGroup);
	this.body.set_space(space);
	this.backWheel.set_space(space);
	this.frontWheel.set_space(space);
	var l = new nape.constraint.LineJoint(this.body,this.backWheel,new nape.geom.Vec2(-60,45),new nape.geom.Vec2(),new nape.geom.Vec2(0,5),1,5);
	if(l.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
	if((l.zpp_inner.space == null?null:l.zpp_inner.space.outer) != space) {
		if(l.zpp_inner.component != null) l.zpp_inner.component.woken = false;
		l.zpp_inner.clearcache();
		if(l.zpp_inner.space != null) l.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(l);
		if(space != null) space.zpp_inner.wrap_constraints.add(l); else l.zpp_inner.space = null;
	}
	if(l.zpp_inner.space == null) null; else l.zpp_inner.space.outer;
	if(l.zpp_inner.ignore != true) {
		l.zpp_inner.ignore = true;
		l.zpp_inner.wake();
	}
	l.zpp_inner.ignore;
	var l1 = new nape.constraint.LineJoint(this.body,this.frontWheel,new nape.geom.Vec2(45.,60),new nape.geom.Vec2(),new nape.geom.Vec2(0,5),1,5);
	if(l1.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
	if((l1.zpp_inner.space == null?null:l1.zpp_inner.space.outer) != space) {
		if(l1.zpp_inner.component != null) l1.zpp_inner.component.woken = false;
		l1.zpp_inner.clearcache();
		if(l1.zpp_inner.space != null) l1.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(l1);
		if(space != null) space.zpp_inner.wrap_constraints.add(l1); else l1.zpp_inner.space = null;
	}
	if(l1.zpp_inner.space == null) null; else l1.zpp_inner.space.outer;
	if(l1.zpp_inner.ignore != true) {
		l1.zpp_inner.ignore = true;
		l1.zpp_inner.wake();
	}
	l1.zpp_inner.ignore;
	this.trailor = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.trailor.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(-130,0,10,55)));
	this.trailor.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(60,0,10,55)));
	this.trailor.zpp_inner.wrap_shapes.add(new nape.shape.Polygon(nape.shape.Polygon.rect(-130,55,270,10)));
	this.trailor.set_group(ignoreGroup);
	this.trailorFrontWheel = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.trailorFrontWheel.zpp_inner.wrap_shapes.add(new nape.shape.Circle(30));
	this.trailorFrontWheel.set_group(ignoreGroup);
	this.trailorFrontWheel.set_space(space);
	this.trailorBackWheel = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)));
	this.trailorBackWheel.zpp_inner.wrap_shapes.add(new nape.shape.Circle(30));
	this.trailorBackWheel.set_group(ignoreGroup);
	this.trailorBackWheel.set_space(space);
	var p = new nape.constraint.PivotJoint(this.trailor,this.trailorBackWheel,new nape.geom.Vec2(-80,70),new nape.geom.Vec2());
	if(p.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
	if((p.zpp_inner.space == null?null:p.zpp_inner.space.outer) != space) {
		if(p.zpp_inner.component != null) p.zpp_inner.component.woken = false;
		p.zpp_inner.clearcache();
		if(p.zpp_inner.space != null) p.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(p);
		if(space != null) space.zpp_inner.wrap_constraints.add(p); else p.zpp_inner.space = null;
	}
	if(p.zpp_inner.space == null) null; else p.zpp_inner.space.outer;
	if(p.zpp_inner.ignore != true) {
		p.zpp_inner.ignore = true;
		p.zpp_inner.wake();
	}
	p.zpp_inner.ignore;
	var p1 = new nape.constraint.PivotJoint(this.trailor,this.trailorFrontWheel,new nape.geom.Vec2(60,70),new nape.geom.Vec2());
	if(p1.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
	if((p1.zpp_inner.space == null?null:p1.zpp_inner.space.outer) != space) {
		if(p1.zpp_inner.component != null) p1.zpp_inner.component.woken = false;
		p1.zpp_inner.clearcache();
		if(p1.zpp_inner.space != null) p1.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(p1);
		if(space != null) space.zpp_inner.wrap_constraints.add(p1); else p1.zpp_inner.space = null;
	}
	if(p1.zpp_inner.space == null) null; else p1.zpp_inner.space.outer;
	if(p1.zpp_inner.ignore != true) {
		p1.zpp_inner.ignore = true;
		p1.zpp_inner.wake();
	}
	p1.zpp_inner.ignore;
	var line = new nape.constraint.LineJoint(this.body,this.trailor,new nape.geom.Vec2(-150,100),new nape.geom.Vec2(125,120),new nape.geom.Vec2(-10,0),1,20);
	if(line.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
	if((line.zpp_inner.space == null?null:line.zpp_inner.space.outer) != space) {
		if(line.zpp_inner.component != null) line.zpp_inner.component.woken = false;
		line.zpp_inner.clearcache();
		if(line.zpp_inner.space != null) line.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(line);
		if(space != null) space.zpp_inner.wrap_constraints.add(line); else line.zpp_inner.space = null;
	}
	if(line.zpp_inner.space == null) null; else line.zpp_inner.space.outer;
	if(line.zpp_inner.ignore != true) {
		line.zpp_inner.ignore = true;
		line.zpp_inner.wake();
	}
	line.zpp_inner.ignore;
	this.trailor.set_space(space);
	this.trailor.set_mass(2);
};
entities.Tractor.__name__ = ["entities","Tractor"];
entities.Tractor.__super__ = milkshake.core.Sprite;
entities.Tractor.prototype = $extend(milkshake.core.Sprite.prototype,{
	update: function(deltaTime) {
		if(!this.isRemote) {
			this.set_x(this.body.get_position().get_x() - 20);
			this.set_y(this.body.get_position().get_y());
		}
		this.set_rotation(this.body.zpp_inner.rot);
		this.tractorTop.set_x(this.get_x());
		this.tractorTop.set_y(this.get_y());
		this.tractorTop.set_rotation(this.get_rotation());
		this.frontWheelSprite.set_x(this.frontWheel.get_position().get_x());
		this.frontWheelSprite.set_y(this.frontWheel.get_position().get_y());
		this.frontWheelSprite.set_rotation(this.frontWheel.zpp_inner.rot);
		this.backWheelSprite.set_x(this.backWheel.get_position().get_x());
		this.backWheelSprite.set_y(this.backWheel.get_position().get_y());
		this.backWheelSprite.set_rotation(this.backWheel.zpp_inner.rot);
		this.trailorSprite.set_x(this.trailor.get_position().get_x());
		this.trailorSprite.set_y(this.trailor.get_position().get_y());
		this.trailorSprite.set_rotation(this.trailor.zpp_inner.rot);
		this.backTrailorWheelSprite.set_x(this.trailorBackWheel.get_position().get_x());
		this.backTrailorWheelSprite.set_y(this.trailorBackWheel.get_position().get_y());
		this.backTrailorWheelSprite.set_rotation(this.trailorBackWheel.zpp_inner.rot);
		this.frontTrailorWheelSprite.set_x(this.trailorFrontWheel.get_position().get_x());
		this.frontTrailorWheelSprite.set_y(this.trailorFrontWheel.get_position().get_y());
		this.frontTrailorWheelSprite.set_rotation(this.trailorFrontWheel.zpp_inner.rot);
		milkshake.core.Sprite.prototype.update.call(this,deltaTime);
	}
	,setScene: function(scene) {
		milkshake.core.Sprite.prototype.setScene.call(this,scene);
		scene.addNode(this.frontWheelSprite = new milkshake.core.Sprite("pimpmobile/tractor_wheel.png"));
		this.frontWheelSprite.set_scaleX(this.frontWheelSprite.set_scaleY(64 / 117));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(new entities.Sheep(this.space,this.ignoreGroup));
		scene.addNode(this.trailorSprite = new milkshake.core.Sprite("pimpmobile/trailer_back.png"));
		scene.addNode(this.tractorTop = new milkshake.core.Sprite("pimpmobile/tractor_top.png"));
		scene.addNode(this.backTrailorWheelSprite = new milkshake.core.Sprite("pimpmobile/trailer_wheels.png"));
		scene.addNode(this.frontTrailorWheelSprite = new milkshake.core.Sprite("pimpmobile/trailer_wheels.png"));
		scene.addNode(this.backWheelSprite = new milkshake.core.Sprite("pimpmobile/tractor_wheel.png"));
		this.backWheelSprite.set_scaleX(this.backWheelSprite.set_scaleY(120 / 117));
		this.backTrailorWheelSprite.set_scaleX(this.backTrailorWheelSprite.set_scaleY(60 / 47));
		this.frontTrailorWheelSprite.set_scaleX(this.frontTrailorWheelSprite.set_scaleY(60 / 47));
	}
	,__class__: entities.Tractor
});
var haxe = {}
haxe.StackItem = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","Lambda"] }
haxe.StackItem.CFunction = ["CFunction",0];
haxe.StackItem.CFunction.toString = $estr;
haxe.StackItem.CFunction.__enum__ = haxe.StackItem;
haxe.StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.StackItem.Lambda = function(v) { var $x = ["Lambda",4,v]; $x.__enum__ = haxe.StackItem; $x.toString = $estr; return $x; }
haxe.CallStack = function() { }
haxe.CallStack.__name__ = ["haxe","CallStack"];
haxe.CallStack.callStack = function() {
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe.StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe.StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe.CallStack.makeStack(new Error().stack);
	a.shift();
	Error.prepareStackTrace = oldValue;
	return a;
}
haxe.CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe.CallStack.itemToString(b,s);
	}
	return b.b;
}
haxe.CallStack.itemToString = function(b,s) {
	var $e = (s);
	switch( $e[1] ) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = $e[2];
		b.b += "module ";
		b.b += Std.string(m);
		break;
	case 2:
		var line = $e[4], file = $e[3], s1 = $e[2];
		if(s1 != null) {
			haxe.CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += Std.string(file);
		b.b += " line ";
		b.b += Std.string(line);
		if(s1 != null) b.b += ")";
		break;
	case 3:
		var meth = $e[3], cname = $e[2];
		b.b += Std.string(cname);
		b.b += ".";
		b.b += Std.string(meth);
		break;
	case 4:
		var n = $e[2];
		b.b += "local function #";
		b.b += Std.string(n);
		break;
	}
}
haxe.CallStack.makeStack = function(s) {
	if(typeof(s) == "string") {
		var stack = s.split("\n");
		var m = [];
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			m.push(haxe.StackItem.Module(line));
		}
		return m;
	} else return s;
}
haxe.TypeTools = function() { }
haxe.TypeTools.__name__ = ["haxe","TypeTools"];
haxe.TypeTools.getClassNames = function(value) {
	var result = new List();
	var valueClass = js.Boot.__instanceof(value,Class)?value:Type.getClass(value);
	while(null != valueClass) {
		result.add(Type.getClassName(valueClass));
		valueClass = Type.getSuperClass(valueClass);
	}
	return result;
}
haxe.ds = {}
haxe.ds.IntMap = function() {
	this.h = { };
};
haxe.ds.IntMap.__name__ = ["haxe","ds","IntMap"];
haxe.ds.IntMap.__interfaces__ = [IMap];
haxe.ds.IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,__class__: haxe.ds.IntMap
}
haxe.ds.StringMap = function() {
	this.h = { };
};
haxe.ds.StringMap.__name__ = ["haxe","ds","StringMap"];
haxe.ds.StringMap.__interfaces__ = [IMap];
haxe.ds.StringMap.prototype = {
	remove: function(key) {
		key = "$" + key;
		if(!this.h.hasOwnProperty(key)) return false;
		delete(this.h[key]);
		return true;
	}
	,get: function(key) {
		return this.h["$" + key];
	}
	,set: function(key,value) {
		this.h["$" + key] = value;
	}
	,__class__: haxe.ds.StringMap
}
haxe.exception = {}
haxe.exception.Exception = function(message,innerException,numberOfStackTraceShifts) {
	this.message = null == message?"Unknown exception":message;
	this.innerException = innerException;
	this.generateStackTrace(numberOfStackTraceShifts);
	this.stackTrace = this.stackTraceArray;
};
haxe.exception.Exception.__name__ = ["haxe","exception","Exception"];
haxe.exception.Exception.prototype = {
	toString: function() {
		return this.message + haxe.CallStack.toString(this.stackTraceArray);
	}
	,get_baseException: function() {
		var result = this;
		while(null != result.innerException) result = result.innerException;
		return result;
	}
	,generateStackTrace: function(numberOfStackTraceShifts) {
		this.stackTraceArray = haxe.CallStack.callStack().slice(numberOfStackTraceShifts + 1);
		var exceptionClass = Type.getClass(this);
		while(haxe.exception.Exception != exceptionClass) {
			this.stackTraceArray.shift();
			exceptionClass = Type.getSuperClass(exceptionClass);
		}
	}
	,__class__: haxe.exception.Exception
}
haxe.exception.ArgumentNullException = function(argumentName,numberOfStackTraceShifts) {
	haxe.exception.Exception.call(this,"Argument " + argumentName + " must be non-null",null,numberOfStackTraceShifts);
};
haxe.exception.ArgumentNullException.__name__ = ["haxe","exception","ArgumentNullException"];
haxe.exception.ArgumentNullException.__super__ = haxe.exception.Exception;
haxe.exception.ArgumentNullException.prototype = $extend(haxe.exception.Exception.prototype,{
	__class__: haxe.exception.ArgumentNullException
});
var helpers = {}
helpers.CatmullRom = function() { }
helpers.CatmullRom.__name__ = ["helpers","CatmullRom"];
helpers.CatmullRom.CatmullRom = function(inCoordinates,samples) {
	var results = new Array();
	var _g1 = 1, _g = inCoordinates.length - 2;
	while(_g1 < _g) {
		var n = _g1++;
		var _g2 = 1;
		while(_g2 < samples) {
			var i = _g2++;
			results.push(helpers.CatmullRom.PointOnCurve(inCoordinates[n - 1],inCoordinates[n],inCoordinates[n + 1],inCoordinates[n + 2],1 / samples * i));
		}
	}
	results.push(inCoordinates[inCoordinates.length - 2]);
	return results;
}
helpers.CatmullRom.PointOnCurve = function(p0,p1,p2,p3,t) {
	var result = new nape.geom.Vec2();
	var t0 = ((-t + 2) * t - 1) * t * 0.5;
	var t1 = ((3 * t - 5) * t * t + 2) * 0.5;
	var t2 = ((-3 * t + 4) * t + 1) * t * 0.5;
	var t3 = (t - 1) * t * t * 0.5;
	result.set_x((function($this) {
		var $r;
		if(p0 != null && p0.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p0.zpp_inner.validate();
		$r = p0.zpp_inner.x;
		return $r;
	}(this)) * t0 + (function($this) {
		var $r;
		if(p1 != null && p1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p1.zpp_inner.validate();
		$r = p1.zpp_inner.x;
		return $r;
	}(this)) * t1 + (function($this) {
		var $r;
		if(p2 != null && p2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p2.zpp_inner.validate();
		$r = p2.zpp_inner.x;
		return $r;
	}(this)) * t2 + (function($this) {
		var $r;
		if(p3 != null && p3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p3.zpp_inner.validate();
		$r = p3.zpp_inner.x;
		return $r;
	}(this)) * t3);
	result.set_y((function($this) {
		var $r;
		if(p0 != null && p0.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p0.zpp_inner.validate();
		$r = p0.zpp_inner.y;
		return $r;
	}(this)) * t0 + (function($this) {
		var $r;
		if(p1 != null && p1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p1.zpp_inner.validate();
		$r = p1.zpp_inner.y;
		return $r;
	}(this)) * t1 + (function($this) {
		var $r;
		if(p2 != null && p2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p2.zpp_inner.validate();
		$r = p2.zpp_inner.y;
		return $r;
	}(this)) * t2 + (function($this) {
		var $r;
		if(p3 != null && p3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		p3.zpp_inner.validate();
		$r = p3.zpp_inner.y;
		return $r;
	}(this)) * t3);
	return result;
}
helpers.MathHelper = function() { }
helpers.MathHelper.__name__ = ["helpers","MathHelper"];
helpers.MathHelper.clamp = function(value,min,max) {
	return value > max?max:value < min?min:value;
}
var hsl = {}
hsl.haxe = {}
hsl.haxe.Bond = function() {
	this.halted = false;
};
hsl.haxe.Bond.__name__ = ["hsl","haxe","Bond"];
hsl.haxe.Bond.prototype = {
	resume: function() {
		this.halted = false;
	}
	,halt: function() {
		this.halted = true;
	}
	,destroyOnUse: function() {
		this.willDestroyOnUse = true;
		return this;
	}
	,destroy: function() {
	}
	,__class__: hsl.haxe.Bond
}
hsl.haxe.Signaler = function() { }
hsl.haxe.Signaler.__name__ = ["hsl","haxe","Signaler"];
hsl.haxe.Signaler.prototype = {
	__class__: hsl.haxe.Signaler
}
hsl.haxe.DirectSignaler = function(subject,rejectNullData) {
	if(null == subject) throw new haxe.exception.ArgumentNullException("subject",1);
	this.subject = subject;
	this.rejectNullData = rejectNullData;
	this.sentinel = new hsl.haxe._DirectSignaler.SentinelBond();
};
hsl.haxe.DirectSignaler.__name__ = ["hsl","haxe","DirectSignaler"];
hsl.haxe.DirectSignaler.__interfaces__ = [hsl.haxe.Signaler];
hsl.haxe.DirectSignaler.prototype = {
	unbindVoid: function(listener) {
		this.sentinel.remove(new hsl.haxe._DirectSignaler.NiladicBond(listener));
	}
	,unbindAdvanced: function(listener) {
		this.sentinel.remove(new hsl.haxe._DirectSignaler.AdvancedBond(listener));
	}
	,unbind: function(listener) {
		this.sentinel.remove(new hsl.haxe._DirectSignaler.RegularBond(listener));
	}
	,removeNotificationTarget: function(value) {
		if(null != this.notificationTargets) this.notificationTargets.remove(value);
	}
	,removeBubblingTarget: function(value) {
		if(null != this.bubblingTargets) this.bubblingTargets.remove(value);
	}
	,verifyCaller: function(positionInformation) {
		if(null == this.subjectClassNames) this.subjectClassNames = haxe.TypeTools.getClassNames(this.subject);
		var $it0 = this.subjectClassNames.iterator();
		while( $it0.hasNext() ) {
			var subjectClassName = $it0.next();
			if(subjectClassName == positionInformation.className) return;
		}
		throw new haxe.exception.Exception("This method may only be called by the subject of the signaler.",null,2);
	}
	,getOrigin: function(origin) {
		return null == origin?this.subject:origin;
	}
	,get_isListenedTo: function() {
		return this.sentinel.get_isConnected();
	}
	,dispatch: function(data,origin,positionInformation) {
		if("dispatchNative" != positionInformation.methodName && "bubble" != positionInformation.methodName) this.verifyCaller(positionInformation);
		if(this.rejectNullData && null == data) throw new haxe.exception.Exception("Some data that was passed is null, but this signaler has been set to reject null data.",null,1);
		origin = null == origin?this.subject:origin;
		if(this.mostRecentPropagationUndisturbed = 3 == this.sentinel.callListener(data,this.subject,origin,3)) {
			if(null != this.bubblingTargets) {
				var $it0 = this.bubblingTargets.iterator();
				while( $it0.hasNext() ) {
					var bubblingTarget = $it0.next();
					bubblingTarget.dispatch(data,origin,{ fileName : "DirectSignaler.hx", lineNumber : 116, className : "hsl.haxe.DirectSignaler", methodName : "bubble"});
				}
			}
			if(null != this.notificationTargets) {
				var $it1 = this.notificationTargets.iterator();
				while( $it1.hasNext() ) {
					var notificationTarget = $it1.next();
					notificationTarget.dispatch(null,origin,{ fileName : "DirectSignaler.hx", lineNumber : 121, className : "hsl.haxe.DirectSignaler", methodName : "bubble"});
				}
			}
		}
	}
	,bubble: function(data,origin) {
		if(null != this.bubblingTargets) {
			var $it0 = this.bubblingTargets.iterator();
			while( $it0.hasNext() ) {
				var bubblingTarget = $it0.next();
				bubblingTarget.dispatch(data,origin,{ fileName : "DirectSignaler.hx", lineNumber : 116, className : "hsl.haxe.DirectSignaler", methodName : "bubble"});
			}
		}
		if(null != this.notificationTargets) {
			var $it1 = this.notificationTargets.iterator();
			while( $it1.hasNext() ) {
				var notificationTarget = $it1.next();
				notificationTarget.dispatch(null,origin,{ fileName : "DirectSignaler.hx", lineNumber : 121, className : "hsl.haxe.DirectSignaler", methodName : "bubble"});
			}
		}
	}
	,bindVoid: function(listener) {
		if(null == listener) throw new haxe.exception.ArgumentNullException("listener",1);
		return this.sentinel.add(new hsl.haxe._DirectSignaler.NiladicBond(listener));
	}
	,bindAdvanced: function(listener) {
		if(null == listener) throw new haxe.exception.ArgumentNullException("listener",1);
		return this.sentinel.add(new hsl.haxe._DirectSignaler.AdvancedBond(listener));
	}
	,bind: function(listener) {
		if(null == listener) throw new haxe.exception.ArgumentNullException("listener",1);
		return this.sentinel.add(new hsl.haxe._DirectSignaler.RegularBond(listener));
	}
	,addNotificationTarget: function(value) {
		if(null == this.notificationTargets) this.notificationTargets = new List();
		this.notificationTargets.add(value);
	}
	,addBubblingTarget: function(value) {
		if(null == this.bubblingTargets) this.bubblingTargets = new List();
		this.bubblingTargets.add(value);
	}
	,__class__: hsl.haxe.DirectSignaler
}
hsl.haxe._DirectSignaler = {}
hsl.haxe._DirectSignaler.LinkedBond = function() {
	hsl.haxe.Bond.call(this);
	this.destroyed = false;
};
hsl.haxe._DirectSignaler.LinkedBond.__name__ = ["hsl","haxe","_DirectSignaler","LinkedBond"];
hsl.haxe._DirectSignaler.LinkedBond.__super__ = hsl.haxe.Bond;
hsl.haxe._DirectSignaler.LinkedBond.prototype = $extend(hsl.haxe.Bond.prototype,{
	unlink: function() {
		if(false == this.destroyed) {
			this.previous.next = this.next;
			this.next.previous = this.previous;
			this.destroyed = true;
		}
	}
	,destroy: function() {
		if(false == this.destroyed) {
			this.previous.next = this.next;
			this.next.previous = this.previous;
			this.destroyed = true;
		}
	}
	,determineEquals: function(value) {
		return false;
	}
	,callListener: function(data,currentTarget,origin,propagationStatus) {
		return 0;
	}
	,__class__: hsl.haxe._DirectSignaler.LinkedBond
});
hsl.haxe._DirectSignaler.SentinelBond = function() {
	hsl.haxe._DirectSignaler.LinkedBond.call(this);
	this.next = this.previous = this;
};
hsl.haxe._DirectSignaler.SentinelBond.__name__ = ["hsl","haxe","_DirectSignaler","SentinelBond"];
hsl.haxe._DirectSignaler.SentinelBond.__super__ = hsl.haxe._DirectSignaler.LinkedBond;
hsl.haxe._DirectSignaler.SentinelBond.prototype = $extend(hsl.haxe._DirectSignaler.LinkedBond.prototype,{
	remove: function(value) {
		var node = this.next;
		while(node != this) {
			if(node.determineEquals(value)) {
				if(false == node.destroyed) {
					node.previous.next = node.next;
					node.next.previous = node.previous;
					node.destroyed = true;
				}
				break;
			}
			node = node.next;
		}
	}
	,get_isConnected: function() {
		return this.next != this;
	}
	,callListener: function(data,currentTarget,origin,propagationStatus) {
		var node = this.next;
		while(node != this && 1 != propagationStatus) {
			propagationStatus = node.callListener(data,currentTarget,origin,propagationStatus);
			node = node.next;
		}
		return propagationStatus;
	}
	,add: function(value) {
		value.next = this;
		value.previous = this.previous;
		return this.previous = this.previous.next = value;
	}
	,__class__: hsl.haxe._DirectSignaler.SentinelBond
});
hsl.haxe._DirectSignaler.RegularBond = function(listener) {
	hsl.haxe._DirectSignaler.LinkedBond.call(this);
	this.listener = listener;
};
hsl.haxe._DirectSignaler.RegularBond.__name__ = ["hsl","haxe","_DirectSignaler","RegularBond"];
hsl.haxe._DirectSignaler.RegularBond.__super__ = hsl.haxe._DirectSignaler.LinkedBond;
hsl.haxe._DirectSignaler.RegularBond.prototype = $extend(hsl.haxe._DirectSignaler.LinkedBond.prototype,{
	determineEquals: function(value) {
		return js.Boot.__instanceof(value,hsl.haxe._DirectSignaler.RegularBond) && Reflect.compareMethods(value.listener,this.listener);
	}
	,callListener: function(data,currentTarget,origin,propagationStatus) {
		if(false == this.halted) {
			this.listener(data);
			if(this.willDestroyOnUse) {
				if(false == this.destroyed) {
					this.previous.next = this.next;
					this.next.previous = this.previous;
					this.destroyed = true;
				}
			}
		}
		return propagationStatus;
	}
	,__class__: hsl.haxe._DirectSignaler.RegularBond
});
hsl.haxe._DirectSignaler.NiladicBond = function(listener) {
	hsl.haxe._DirectSignaler.LinkedBond.call(this);
	this.listener = listener;
};
hsl.haxe._DirectSignaler.NiladicBond.__name__ = ["hsl","haxe","_DirectSignaler","NiladicBond"];
hsl.haxe._DirectSignaler.NiladicBond.__super__ = hsl.haxe._DirectSignaler.LinkedBond;
hsl.haxe._DirectSignaler.NiladicBond.prototype = $extend(hsl.haxe._DirectSignaler.LinkedBond.prototype,{
	determineEquals: function(value) {
		return js.Boot.__instanceof(value,hsl.haxe._DirectSignaler.NiladicBond) && Reflect.compareMethods(value.listener,this.listener);
	}
	,callListener: function(data,currentTarget,origin,propagationStatus) {
		if(false == this.halted) {
			this.listener();
			if(this.willDestroyOnUse) {
				if(false == this.destroyed) {
					this.previous.next = this.next;
					this.next.previous = this.previous;
					this.destroyed = true;
				}
			}
		}
		return propagationStatus;
	}
	,__class__: hsl.haxe._DirectSignaler.NiladicBond
});
hsl.haxe._DirectSignaler.AdvancedBond = function(listener) {
	hsl.haxe._DirectSignaler.LinkedBond.call(this);
	this.listener = listener;
};
hsl.haxe._DirectSignaler.AdvancedBond.__name__ = ["hsl","haxe","_DirectSignaler","AdvancedBond"];
hsl.haxe._DirectSignaler.AdvancedBond.__super__ = hsl.haxe._DirectSignaler.LinkedBond;
hsl.haxe._DirectSignaler.AdvancedBond.prototype = $extend(hsl.haxe._DirectSignaler.LinkedBond.prototype,{
	determineEquals: function(value) {
		return js.Boot.__instanceof(value,hsl.haxe._DirectSignaler.AdvancedBond) && Reflect.compareMethods(value.listener,this.listener);
	}
	,callListener: function(data,currentTarget,origin,propagationStatus) {
		if(this.halted == false) {
			var signal = new hsl.haxe.Signal(data,this,currentTarget,origin);
			this.listener(signal);
			if(this.willDestroyOnUse) {
				if(false == this.destroyed) {
					this.previous.next = this.next;
					this.next.previous = this.previous;
					this.destroyed = true;
				}
			}
			if(signal.immediatePropagationStopped) return 1; else if(signal.propagationStopped) return 2;
		}
		return propagationStatus;
	}
	,__class__: hsl.haxe._DirectSignaler.AdvancedBond
});
hsl.haxe.PropagationStatus = function() { }
hsl.haxe.PropagationStatus.__name__ = ["hsl","haxe","PropagationStatus"];
hsl.haxe.Signal = function(data,currentBond,currentTarget,origin) {
	this.data = data;
	this.currentBond = currentBond;
	this.currentTarget = currentTarget;
	this.origin = origin;
	this.immediatePropagationStopped = false;
	this.propagationStopped = false;
};
hsl.haxe.Signal.__name__ = ["hsl","haxe","Signal"];
hsl.haxe.Signal.prototype = {
	stopPropagation: function() {
		this.propagationStopped = true;
	}
	,stopImmediatePropagation: function() {
		this.immediatePropagationStopped = true;
	}
	,get_data1: function() {
		return this.data;
	}
	,__class__: hsl.haxe.Signal
}
var js = {}
js.Boot = function() { }
js.Boot.__name__ = ["js","Boot"];
js.Boot.__string_rec = function(o,s) {
	if(o == null) return "null";
	if(s.length >= 5) return "<...>";
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) t = "object";
	switch(t) {
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) return o[0];
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2, _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) str += "," + js.Boot.__string_rec(o[i],s); else str += js.Boot.__string_rec(o[i],s);
				}
				return str + ")";
			}
			var l = o.length;
			var i;
			var str = "[";
			s += "\t";
			var _g = 0;
			while(_g < l) {
				var i1 = _g++;
				str += (i1 > 0?",":"") + js.Boot.__string_rec(o[i1],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString) {
			var s2 = o.toString();
			if(s2 != "[object Object]") return s2;
		}
		var k = null;
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) { ;
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) str += ", \n";
		str += s + k + " : " + js.Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "function":
		return "<function>";
	case "string":
		return o;
	default:
		return String(o);
	}
}
js.Boot.__interfLoop = function(cc,cl) {
	if(cc == null) return false;
	if(cc == cl) return true;
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0, _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js.Boot.__interfLoop(i1,cl)) return true;
		}
	}
	return js.Boot.__interfLoop(cc.__super__,cl);
}
js.Boot.__instanceof = function(o,cl) {
	if(cl == null) return false;
	switch(cl) {
	case Int:
		return (o|0) === o;
	case Float:
		return typeof(o) == "number";
	case Bool:
		return typeof(o) == "boolean";
	case String:
		return typeof(o) == "string";
	case Dynamic:
		return true;
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					if(cl == Array) return o.__enum__ == null;
					return true;
				}
				if(js.Boot.__interfLoop(o.__class__,cl)) return true;
			}
		} else return false;
		if(cl == Class && o.__name__ != null) return true;
		if(cl == Enum && o.__ename__ != null) return true;
		return o.__enum__ == cl;
	}
}
js.Browser = function() { }
js.Browser.__name__ = ["js","Browser"];
milkshake.IGameCore = function() { }
milkshake.IGameCore.__name__ = ["milkshake","IGameCore"];
milkshake.IGameCore.prototype = {
	__class__: milkshake.IGameCore
}
milkshake.core.Text = function(text,id) {
	if(id == null) id = "undefined-text";
	milkshake.core.Sprite.call(this,"",id);
	this.displayObject.addChild(this.sprite = new PIXI.Text(text));
};
milkshake.core.Text.__name__ = ["milkshake","core","Text"];
milkshake.core.Text.__super__ = milkshake.core.Sprite;
milkshake.core.Text.prototype = $extend(milkshake.core.Sprite.prototype,{
	setText: function(text) {
		var textObject = this.sprite;
		textObject.setText(text);
	}
	,__class__: milkshake.core.Text
});
milkshake.core.utils = {}
milkshake.core.utils.Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
milkshake.core.utils.Vector2.__name__ = ["milkshake","core","utils","Vector2"];
milkshake.core.utils.Vector2.distanceSquared = function(a,b) {
	var dx = b.x - a.x;
	var dy = b.y - a.y;
	return dx * dx + dy * dy;
}
milkshake.core.utils.Vector2.distance = function(a,b) {
	return Math.sqrt(milkshake.core.utils.Vector2.distanceSquared(a,b));
}
milkshake.core.utils.Vector2.add = function(a,b) {
	return new milkshake.core.utils.Vector2(a.x + b.x,a.y + b.y);
}
milkshake.core.utils.Vector2.sub = function(a,b) {
	return new milkshake.core.utils.Vector2(a.x - b.x,a.y - b.y);
}
milkshake.core.utils.Vector2.mul = function(a,f) {
	return new milkshake.core.utils.Vector2(a.x * f,a.y * f);
}
milkshake.core.utils.Vector2.div = function(a,f) {
	return new milkshake.core.utils.Vector2(a.x / f,a.y / f);
}
milkshake.core.utils.Vector2.dot = function(a,b) {
	return a.x * b.x + a.y * b.y;
}
milkshake.core.utils.Vector2.cross = function(a,b) {
	return a.x * b.y - a.y * b.x;
}
milkshake.core.utils.Vector2.lerp = function(n,m,p) {
	return milkshake.core.utils.Vector2.add(milkshake.core.utils.Vector2.mul(n,1 - p),milkshake.core.utils.Vector2.mul(m,p));
}
milkshake.core.utils.Vector2.midpoint = function(n,m) {
	return new milkshake.core.utils.Vector2((n.x + m.x) / 2,(n.y + m.y) / 2);
}
milkshake.core.utils.Vector2.zero = function() {
	return new milkshake.core.utils.Vector2(0,0);
}
milkshake.core.utils.Vector2.prototype = {
	angle: function() {
		return Math.atan2(this.y,this.x);
	}
	,normal: function() {
		return milkshake.core.utils.Vector2.div(this,this.norm());
	}
	,norm: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,perp: function() {
		return new milkshake.core.utils.Vector2(this.y,-this.x);
	}
	,negative: function() {
		return new milkshake.core.utils.Vector2(-this.x,-this.y);
	}
	,__class__: milkshake.core.utils.Vector2
}
milkshake.game.network = {}
milkshake.game.network.AbstractHandler = function(socket) {
	this.socket = socket;
};
milkshake.game.network.AbstractHandler.__name__ = ["milkshake","game","network","AbstractHandler"];
milkshake.game.network.AbstractHandler.prototype = {
	__class__: milkshake.game.network.AbstractHandler
}
milkshake.game.network.NetworkManager = function(url) {
	this.socket = io.connect(url);
};
milkshake.game.network.NetworkManager.__name__ = ["milkshake","game","network","NetworkManager"];
milkshake.game.network.NetworkManager.prototype = {
	__class__: milkshake.game.network.NetworkManager
}
milkshake.game.scene = {}
milkshake.game.scene.Scene = function(game,id) {
	if(id == null) id = "undefined-scene";
	milkshake.core.GameObject.call(this,id);
	this.game = game;
	this.setScene(this);
	this.addNode(this.componentManager = new milkshake.game.scene.component.SceneComponentManager());
};
milkshake.game.scene.Scene.__name__ = ["milkshake","game","scene","Scene"];
milkshake.game.scene.Scene.__super__ = milkshake.core.GameObject;
milkshake.game.scene.Scene.prototype = $extend(milkshake.core.GameObject.prototype,{
	__class__: milkshake.game.scene.Scene
});
milkshake.game.scene.SceneManager = function() {
	milkshake.core.GameObject.call(this,"sceneManager");
	this.scenes = new haxe.ds.StringMap();
	this.currentSceneKey = null;
};
milkshake.game.scene.SceneManager.__name__ = ["milkshake","game","scene","SceneManager"];
milkshake.game.scene.SceneManager.__super__ = milkshake.core.GameObject;
milkshake.game.scene.SceneManager.prototype = $extend(milkshake.core.GameObject.prototype,{
	update: function(deltaTime) {
		if(this.get_currentScene() != null) this.get_currentScene().update(deltaTime);
		milkshake.core.GameObject.prototype.update.call(this,deltaTime);
	}
	,get_currentScene: function() {
		return this.scenes.get(this.currentSceneKey);
	}
	,changeScene: function(key) {
		this.removeNode(this.get_currentScene());
		this.currentSceneKey = key;
		this.addNode(this.get_currentScene());
	}
	,removeScene: function(key) {
		this.scenes.remove(key);
	}
	,addScene: function(key,scene) {
		this.scenes.set(key,scene);
		if(this.currentSceneKey == null) this.changeScene(key);
	}
	,__class__: milkshake.game.scene.SceneManager
});
milkshake.game.scene.component = {}
milkshake.game.scene.component.SceneComponent = function(id) {
	if(id == null) id = "undefined-entity";
	milkshake.core.Entity.call(this,id);
};
milkshake.game.scene.component.SceneComponent.__name__ = ["milkshake","game","scene","component","SceneComponent"];
milkshake.game.scene.component.SceneComponent.__super__ = milkshake.core.Entity;
milkshake.game.scene.component.SceneComponent.prototype = $extend(milkshake.core.Entity.prototype,{
	setup: function(scene) {
		this.scene = scene;
	}
	,nodeAdded: function(node) {
	}
	,setScene: function(scene) {
		milkshake.core.Entity.prototype.setScene.call(this,scene);
		scene.onNodeAdded.bind($bind(this,this.nodeAdded));
	}
	,__class__: milkshake.game.scene.component.SceneComponent
});
milkshake.game.scene.component.SceneComponentManager = function() {
	milkshake.core.Entity.call(this,"SceneComponentManager");
};
milkshake.game.scene.component.SceneComponentManager.__name__ = ["milkshake","game","scene","component","SceneComponentManager"];
milkshake.game.scene.component.SceneComponentManager.__super__ = milkshake.core.Entity;
milkshake.game.scene.component.SceneComponentManager.prototype = $extend(milkshake.core.Entity.prototype,{
	addNode: function(node) {
		if(js.Boot.__instanceof(node,milkshake.game.scene.component.SceneComponent)) {
			var component = node;
			console.log("Adding nodscene");
			milkshake.core.Entity.prototype.addNode.call(this,node);
		} else throw "Only scene components";
	}
	,__class__: milkshake.game.scene.component.SceneComponentManager
});
milkshake.game.ui = {}
milkshake.game.ui.component = {}
milkshake.game.ui.component.Button = function(width,height,text,color,colorOver) {
	this.over = false;
	var _g = this;
	milkshake.core.GameObject.call(this,"button");
	this.colorOver = colorOver != null?colorOver:color;
	this.color = color;
	this.height = height;
	this.width = width;
	this.graphics = new PIXI.Graphics();
	this.graphics.hitArea = new PIXI.Rectangle(0,0,width,height);
	this.displayObject.addChild(this.graphics);
	var textSprite = new milkshake.core.Text(text,"text");
	textSprite.set_x(50);
	textSprite.set_y(7);
	this.addNode(textSprite);
	this.displayObject.setInteractive(true);
	this.displayObject.mouseover = function(data) {
		_g.over = true;
	};
	this.displayObject.mouseout = function(data) {
		_g.over = false;
	};
};
milkshake.game.ui.component.Button.__name__ = ["milkshake","game","ui","component","Button"];
milkshake.game.ui.component.Button.__super__ = milkshake.core.GameObject;
milkshake.game.ui.component.Button.prototype = $extend(milkshake.core.GameObject.prototype,{
	update: function(deltaTime) {
		this.drawBackground();
		milkshake.core.GameObject.prototype.update.call(this,deltaTime);
	}
	,drawBackground: function() {
		var color = this.over?this.colorOver:this.color;
		this.graphics.clear();
		this.graphics.beginFill(color);
		this.graphics.drawRect(0,0,this.width,this.height);
		this.graphics.endFill();
	}
	,__class__: milkshake.game.ui.component.Button
});
milkshake.game.ui.view = {}
milkshake.game.ui.view.AbstractViewController = function(id) {
	this.isOpen = false;
	this.id = id;
	this.game = milkshake.game.MilkshakeGame.instance;
	this.onOpened = new hsl.haxe.DirectSignaler(this);
	this.onClosed = new hsl.haxe.DirectSignaler(this);
	this.game.viewManager.addView(id,this);
	console.log(id + " view created!");
	milkshake.core.Node.call(this,id);
};
milkshake.game.ui.view.AbstractViewController.__name__ = ["milkshake","game","ui","view","AbstractViewController"];
milkshake.game.ui.view.AbstractViewController.__super__ = milkshake.core.Node;
milkshake.game.ui.view.AbstractViewController.prototype = $extend(milkshake.core.Node.prototype,{
	set_isOpen: function(value) {
		this.isOpen = value;
		if(this.isOpen) this.onOpened.dispatch(null,null,{ fileName : "AbstractViewController.hx", lineNumber : 49, className : "milkshake.game.ui.view.AbstractViewController", methodName : "set_isOpen"}); else this.onClosed.dispatch(null,null,{ fileName : "AbstractViewController.hx", lineNumber : 49, className : "milkshake.game.ui.view.AbstractViewController", methodName : "set_isOpen"});
		return this.isOpen;
	}
	,close: function() {
		this.set_isOpen(false);
	}
	,open: function(data) {
		this.set_isOpen(true);
	}
	,__class__: milkshake.game.ui.view.AbstractViewController
});
milkshake.game.ui.view.ViewManager = function() {
	this.views = new haxe.ds.StringMap();
};
milkshake.game.ui.view.ViewManager.__name__ = ["milkshake","game","ui","view","ViewManager"];
milkshake.game.ui.view.ViewManager.prototype = {
	getView: function(id) {
		var t;
		var view = this.views.get(id);
		return t = view;
	}
	,addView: function(id,view) {
		this.views.set(id,view);
	}
	,__class__: milkshake.game.ui.view.ViewManager
}
milkshake.input = {}
milkshake.input.IKeyboardInput = function() { }
milkshake.input.IKeyboardInput.__name__ = ["milkshake","input","IKeyboardInput"];
milkshake.input.IKeyboardInput.prototype = {
	__class__: milkshake.input.IKeyboardInput
}
milkshake.input.KeyboardCode = function() { }
milkshake.input.KeyboardCode.__name__ = ["milkshake","input","KeyboardCode"];
milkshake.input.PixiInput = function() {
	this.keyHandlersPress = new haxe.ds.IntMap();
	this.keyHandlersDown = new haxe.ds.IntMap();
	this.keyHandlersUp = new haxe.ds.IntMap();
	this.keyDownMap = [];
	js.Browser.document.onkeydown = $bind(this,this.onKeyPress);
	js.Browser.document.onkeyup = $bind(this,this.onKeyUp);
};
milkshake.input.PixiInput.__name__ = ["milkshake","input","PixiInput"];
milkshake.input.PixiInput.__interfaces__ = [milkshake.input.IKeyboardInput];
milkshake.input.PixiInput.prototype = {
	update: function() {
		var _g = 0, _g1 = this.keyDownMap;
		while(_g < _g1.length) {
			var key = _g1[_g];
			++_g;
			if(this.keyHandlersDown.exists(key)) (this.keyHandlersDown.get(key))();
		}
	}
	,removeKeyUpHandler: function(keyCode) {
		this.keyHandlersUp.remove(keyCode);
	}
	,addKeyUpHandler: function(keyCode,callback) {
		this.keyHandlersUp.set(keyCode,callback);
	}
	,removeKeyDownHandler: function(keyCode) {
		this.keyHandlersDown.remove(keyCode);
	}
	,addKeyDownHandler: function(keyCode,callback) {
		this.keyHandlersDown.set(keyCode,callback);
	}
	,removeKeyPressHandler: function(keyCode) {
		this.keyHandlersPress.remove(keyCode);
	}
	,addKeyPressHandler: function(keyCode,callback) {
		this.keyHandlersPress.set(keyCode,callback);
	}
	,onKeyUp: function(e) {
		HxOverrides.remove(this.keyDownMap,e.keyCode);
		if(this.keyHandlersUp.exists(e.keyCode)) (this.keyHandlersUp.get(e.keyCode))();
	}
	,onKeyPress: function(e) {
		if(Lambda.indexOf(this.keyDownMap,e.keyCode) == -1) {
			this.keyDownMap.push(e.keyCode);
			if(this.keyHandlersPress.exists(e.keyCode)) (this.keyHandlersPress.get(e.keyCode))();
		}
	}
	,__class__: milkshake.input.PixiInput
}
milkshake.pixi = {}
milkshake.pixi.PixiGame = function() {
	this.canvas = js.Browser.document.getElementById("gameCanvas");
	this.input = new milkshake.input.PixiInput();
};
milkshake.pixi.PixiGame.__name__ = ["milkshake","pixi","PixiGame"];
milkshake.pixi.PixiGame.__interfaces__ = [milkshake.IGameCore];
milkshake.pixi.PixiGame.prototype = {
	render: function(deltaTime) {
		js.Browser.window.requestAnimationFrame($bind(this,this.render));
		this.game.update(deltaTime);
		this.input.update();
		this.renderer.render(this.stage);
		return true;
	}
	,create: function(game,width,height,color) {
		this.game = game;
		this.canvas.width = width;
		this.canvas.height = height;
		this.stage = new PIXI.Stage(color);
		game.setStage(this.stage);
		this.renderer = PIXI.autoDetectRenderer(width,height,this.canvas);
		js.Browser.window.gl = this.renderer.renderSession.gl;
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
		js.Browser.window.requestAnimationFrame($bind(this,this.render));
	}
	,__class__: milkshake.pixi.PixiGame
}
nape.Config = function() {
};
nape.Config.__name__ = ["nape","Config"];
nape.Config.prototype = {
	__class__: nape.Config
}
nape.callbacks = {}
nape.callbacks.Callback = function() {
	this.zpp_inner = null;
	if(!zpp_nape.callbacks.ZPP_Callback.internal) throw "Error: Callback cannot be instantiated derp!";
};
nape.callbacks.Callback.__name__ = ["nape","callbacks","Callback"];
nape.callbacks.Callback.prototype = {
	toString: function() {
		return "";
	}
	,get_listener: function() {
		return this.zpp_inner.listener.outer;
	}
	,get_event: function() {
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,__class__: nape.callbacks.Callback
}
nape.callbacks.BodyCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.BodyCallback.__name__ = ["nape","callbacks","BodyCallback"];
nape.callbacks.BodyCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.BodyCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.body.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,get_body: function() {
		return this.zpp_inner.body.outer;
	}
	,__class__: nape.callbacks.BodyCallback
});
nape.callbacks.Listener = function() {
	this.zpp_inner = null;
	if(!zpp_nape.callbacks.ZPP_Listener.internal) throw "Error: Cannot instantiate Listener derp!";
};
nape.callbacks.Listener.__name__ = ["nape","callbacks","Listener"];
nape.callbacks.Listener.prototype = {
	toString: function() {
		var event = ["BEGIN","END","WAKE","SLEEP","BREAK","PRE","ONGOING"][this.zpp_inner.event];
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
			var body = this.zpp_inner.body;
			return "BodyListener{" + event + "::" + Std.string(body.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
			var con = this.zpp_inner.constraint;
			return "ConstraintListener{" + event + "::" + Std.string(con.outer_zn.zpp_inner_zn.options.outer) + "}";
		} else {
			var con = this.zpp_inner.interaction;
			var itype = (function($this) {
				var $r;
				switch(con.itype) {
				case zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION:
					$r = "COLLISION";
					break;
				case zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR:
					$r = "SENSOR";
					break;
				case zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID:
					$r = "FLUID";
					break;
				default:
					$r = "ALL";
				}
				return $r;
			}(this));
			return (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION?"InteractionListener{" + event + "#" + itype + "::" + Std.string(con.outer_zni.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_zni.zpp_inner_zn.options2.outer) + "}":"PreListener{" + itype + "::" + Std.string(con.outer_znp.zpp_inner_zn.options1.outer) + ":" + Std.string(con.outer_znp.zpp_inner_zn.options2.outer) + "}") + " precedence=" + this.zpp_inner.precedence;
		}
	}
	,set_space: function(space) {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(this);
			if(space != null) space.zpp_inner.wrap_listeners.add(this); else this.zpp_inner.space = null;
		}
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,get_space: function() {
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,set_precedence: function(precedence) {
		if(this.zpp_inner.precedence != precedence) {
			this.zpp_inner.precedence = precedence;
			this.zpp_inner.invalidate_precedence();
		}
		return this.zpp_inner.precedence;
	}
	,get_precedence: function() {
		return this.zpp_inner.precedence;
	}
	,set_event: function(event) {
		if(event == null) throw "Error: Cannot set listener event type to null";
		if(zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event] != event) {
			var xevent = event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN:event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING:event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_CbEvent_END:event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP:event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE:event == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_CbEvent_PRE:zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
			this.zpp_inner.swapEvent(xevent);
		}
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,get_event: function() {
		return zpp_nape.callbacks.ZPP_Listener.events[this.zpp_inner.event];
	}
	,get_type: function() {
		return zpp_nape.callbacks.ZPP_Listener.types[this.zpp_inner.type];
	}
	,__class__: nape.callbacks.Listener
}
nape.callbacks.BodyListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: BodyListener::handler cannot be null";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else throw "Error: cbEvent '" + event.toString() + "' is not a valid event type for a BodyListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_BodyListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape.callbacks.BodyListener.__name__ = ["nape","callbacks","BodyListener"];
nape.callbacks.BodyListener.__super__ = nape.callbacks.Listener;
nape.callbacks.BodyListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	set_handler: function(handler) {
		if(handler == null) throw "Error: BodyListener::handler cannot be null";
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,__class__: nape.callbacks.BodyListener
});
nape.callbacks.CbEvent = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "CbEvent" + " derp!";
};
nape.callbacks.CbEvent.__name__ = ["nape","callbacks","CbEvent"];
nape.callbacks.CbEvent.get_BEGIN = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
}
nape.callbacks.CbEvent.get_ONGOING = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
}
nape.callbacks.CbEvent.get_END = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_END;
}
nape.callbacks.CbEvent.get_WAKE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
}
nape.callbacks.CbEvent.get_SLEEP = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
}
nape.callbacks.CbEvent.get_BREAK = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
}
nape.callbacks.CbEvent.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.CbEvent_PRE;
}
nape.callbacks.CbEvent.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
			return $r;
		}(this))) return "PRE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
			return $r;
		}(this))) return "BEGIN"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
			return $r;
		}(this))) return "ONGOING"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
			return $r;
		}(this))) return "END"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
			return $r;
		}(this))) return "WAKE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
			return $r;
		}(this))) return "SLEEP"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
			return $r;
		}(this))) return "BREAK"; else return "";
	}
	,__class__: nape.callbacks.CbEvent
}
nape.callbacks.CbType = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_CbType();
	this.zpp_inner.outer = this;
};
nape.callbacks.CbType.__name__ = ["nape","callbacks","CbType"];
nape.callbacks.CbType.get_ANY_BODY = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_BODY;
}
nape.callbacks.CbType.get_ANY_CONSTRAINT = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT;
}
nape.callbacks.CbType.get_ANY_SHAPE = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE;
}
nape.callbacks.CbType.get_ANY_COMPOUND = function() {
	return zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND;
}
nape.callbacks.CbType.prototype = {
	toString: function() {
		return this == zpp_nape.callbacks.ZPP_CbType.ANY_BODY?"ANY_BODY":this == zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE?"ANY_SHAPE":this == zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND?"ANY_COMPOUND":this == zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT?"ANY_CONSTRAINT":"CbType#" + this.zpp_inner.id;
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,excluding: function(excludes) {
		return new nape.callbacks.OptionType(this).excluding(excludes);
	}
	,including: function(includes) {
		return new nape.callbacks.OptionType(this).including(includes);
	}
	,get_id: function() {
		return this.zpp_inner.id;
	}
	,__class__: nape.callbacks.CbType
}
nape.callbacks.CbTypeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_CbTypeList.internal) throw "Error: Cannot instantiate " + "CbType" + "Iterator derp!";
};
nape.callbacks.CbTypeIterator.__name__ = ["nape","callbacks","CbTypeIterator"];
nape.callbacks.CbTypeIterator.get = function(list) {
	var ret = nape.callbacks.CbTypeIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_CbTypeList.internal = true;
		var ret1 = new nape.callbacks.CbTypeIterator();
		zpp_nape.util.ZPP_CbTypeList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.callbacks.CbTypeIterator.zpp_pool;
		nape.callbacks.CbTypeIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.callbacks.CbTypeIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
			nape.callbacks.CbTypeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.callbacks.CbTypeIterator
}
nape.callbacks.CbTypeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CbTypeList();
	this.zpp_inner.outer = this;
};
nape.callbacks.CbTypeList.__name__ = ["nape","callbacks","CbTypeList"];
nape.callbacks.CbTypeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.callbacks.CbTypeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.callbacks.CbTypeList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.callbacks.CbTypeIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.callbacks.CbTypeIterator.zpp_pool;
			nape.callbacks.CbTypeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.callbacks.CbTypeIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.callbacks.CbTypeIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.callbacks.CbTypeList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.callbacks.CbTypeIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "CbType" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.callbacks.CbTypeIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "CbType" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.callbacks.CbTypeList
}
nape.callbacks.ConstraintCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.ConstraintCallback.__name__ = ["nape","callbacks","ConstraintCallback"];
nape.callbacks.ConstraintCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.ConstraintCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["WAKE","SLEEP","BREAK"][this.zpp_inner.event - zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE];
		ret += ":" + this.zpp_inner.constraint.outer.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,get_constraint: function() {
		return this.zpp_inner.constraint.outer;
	}
	,__class__: nape.callbacks.ConstraintCallback
});
nape.callbacks.ConstraintListener = function(event,options,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: ConstraintListener::handler cannot be null";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK; else throw "Error: cbEvent '" + event.toString() + "' is not a valid event type for a ConstraintListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_ConstraintListener(zpp_nape.callbacks.ZPP_OptionType.argument(options),xevent,handler);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner.precedence = precedence;
};
nape.callbacks.ConstraintListener.__name__ = ["nape","callbacks","ConstraintListener"];
nape.callbacks.ConstraintListener.__super__ = nape.callbacks.Listener;
nape.callbacks.ConstraintListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	set_handler: function(handler) {
		if(handler == null) throw "Error: ConstraintListener::handler cannot be null";
		this.zpp_inner_zn.handler = handler;
		return this.zpp_inner_zn.handler;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handler;
	}
	,set_options: function(options) {
		this.zpp_inner_zn.options.set(options.zpp_inner);
		return this.zpp_inner_zn.options.outer;
	}
	,get_options: function() {
		return this.zpp_inner_zn.options.outer;
	}
	,__class__: nape.callbacks.ConstraintListener
});
nape.callbacks.InteractionCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.InteractionCallback.__name__ = ["nape","callbacks","InteractionCallback"];
nape.callbacks.InteractionCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.InteractionCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	toString: function() {
		var ret = "Cb:";
		ret += ["BEGIN","END","","","","","ONGOING"][this.zpp_inner.event];
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.wrap_arbiters.toString();
		ret += " : listener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,get_arbiters: function() {
		return this.zpp_inner.wrap_arbiters;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,__class__: nape.callbacks.InteractionCallback
});
nape.callbacks.InteractionListener = function(event,interactionType,options1,options2,handler,precedence) {
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: InteractionListener::handler cannot be null";
	if(event == null) throw "Error: CbEvent cannot be null for InteractionListener";
	var xevent = -1;
	if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_END; else if(event == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
		return $r;
	}(this))) xevent = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING; else throw "Error: CbEvent '" + event.toString() + "' is not a valid event type for InteractionListener";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),xevent,zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zni = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.handleri = handler;
	this.set_interactionType(interactionType);
};
nape.callbacks.InteractionListener.__name__ = ["nape","callbacks","InteractionListener"];
nape.callbacks.InteractionListener.__super__ = nape.callbacks.Listener;
nape.callbacks.InteractionListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	set_allowSleepingCallbacks: function(allowSleepingCallbacks) {
		this.zpp_inner_zn.allowSleepingCallbacks = allowSleepingCallbacks;
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,get_allowSleepingCallbacks: function() {
		return this.zpp_inner_zn.allowSleepingCallbacks;
	}
	,set_handler: function(handler) {
		if(handler == null) throw "Error: InteractionListener::handler cannot be null";
		this.zpp_inner_zn.handleri = handler;
		return this.zpp_inner_zn.handleri;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handleri;
	}
	,set_interactionType: function(interactionType) {
		if(interactionType == null) throw "Error: Cannot set listener interaction type to null";
		if(this.get_interactionType() != interactionType) {
			var xtype = interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION:interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR:interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID:zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		return ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this)):ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this)):ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this)):ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
			return $r;
		}(this)):null;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,__class__: nape.callbacks.InteractionListener
});
nape.callbacks.InteractionType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InteractionType" + " derp!";
};
nape.callbacks.InteractionType.__name__ = ["nape","callbacks","InteractionType"];
nape.callbacks.InteractionType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
}
nape.callbacks.InteractionType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
}
nape.callbacks.InteractionType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
}
nape.callbacks.InteractionType.get_ANY = function() {
	if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InteractionType_ANY;
}
nape.callbacks.InteractionType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this))) return "FLUID"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
			return $r;
		}(this))) return "ANY"; else return "";
	}
	,__class__: nape.callbacks.InteractionType
}
nape.callbacks.ListenerIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ListenerList.internal) throw "Error: Cannot instantiate " + "Listener" + "Iterator derp!";
};
nape.callbacks.ListenerIterator.__name__ = ["nape","callbacks","ListenerIterator"];
nape.callbacks.ListenerIterator.get = function(list) {
	var ret = nape.callbacks.ListenerIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ListenerList.internal = true;
		var ret1 = new nape.callbacks.ListenerIterator();
		zpp_nape.util.ZPP_ListenerList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.callbacks.ListenerIterator.zpp_pool;
		nape.callbacks.ListenerIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.callbacks.ListenerIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
			nape.callbacks.ListenerIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.callbacks.ListenerIterator
}
nape.callbacks.ListenerList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ListenerList();
	this.zpp_inner.outer = this;
};
nape.callbacks.ListenerList.__name__ = ["nape","callbacks","ListenerList"];
nape.callbacks.ListenerList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.callbacks.ListenerList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.callbacks.ListenerList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.callbacks.ListenerIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.callbacks.ListenerIterator.zpp_pool;
			nape.callbacks.ListenerIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.callbacks.ListenerIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.callbacks.ListenerIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.callbacks.ListenerList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.callbacks.ListenerIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Listener" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.callbacks.ListenerIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Listener" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.callbacks.ListenerList
}
nape.callbacks.ListenerType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ListenerType" + " derp!";
};
nape.callbacks.ListenerType.__name__ = ["nape","callbacks","ListenerType"];
nape.callbacks.ListenerType.get_BODY = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_BODY;
}
nape.callbacks.ListenerType.get_CONSTRAINT = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
}
nape.callbacks.ListenerType.get_INTERACTION = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
}
nape.callbacks.ListenerType.get_PRE = function() {
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ListenerType_PRE;
}
nape.callbacks.ListenerType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
			return $r;
		}(this))) return "BODY"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
			return $r;
		}(this))) return "CONSTRAINT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
			return $r;
		}(this))) return "INTERACTION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
			return $r;
		}(this))) return "PRE"; else return "";
	}
	,__class__: nape.callbacks.ListenerType
}
nape.callbacks.OptionType = function(includes,excludes) {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.callbacks.ZPP_OptionType();
	this.zpp_inner.outer = this;
	if(includes != null) this.including(includes);
	if(excludes != null) this.excluding(excludes);
};
nape.callbacks.OptionType.__name__ = ["nape","callbacks","OptionType"];
nape.callbacks.OptionType.prototype = {
	toString: function() {
		var inc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_includes == null) $this.zpp_inner.setup_includes();
			$r = $this.zpp_inner.wrap_includes;
			return $r;
		}(this))).toString();
		var exc = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_excludes == null) $this.zpp_inner.setup_excludes();
			$r = $this.zpp_inner.wrap_excludes;
			return $r;
		}(this))).toString();
		return "@{" + inc + " excluding " + exc + "}";
	}
	,excluding: function(excludes) {
		this.zpp_inner.append(this.zpp_inner.excludes,excludes);
		return this;
	}
	,including: function(includes) {
		this.zpp_inner.append(this.zpp_inner.includes,includes);
		return this;
	}
	,get_excludes: function() {
		if(this.zpp_inner.wrap_excludes == null) this.zpp_inner.setup_excludes();
		return this.zpp_inner.wrap_excludes;
	}
	,get_includes: function() {
		if(this.zpp_inner.wrap_includes == null) this.zpp_inner.setup_includes();
		return this.zpp_inner.wrap_includes;
	}
	,__class__: nape.callbacks.OptionType
}
nape.callbacks.PreCallback = function() {
	nape.callbacks.Callback.call(this);
};
nape.callbacks.PreCallback.__name__ = ["nape","callbacks","PreCallback"];
nape.callbacks.PreCallback.__super__ = nape.callbacks.Callback;
nape.callbacks.PreCallback.prototype = $extend(nape.callbacks.Callback.prototype,{
	toString: function() {
		var ret = "Cb:PRE:";
		ret += ":" + this.zpp_inner.int1.outer_i.toString() + "/" + this.zpp_inner.int2.outer_i.toString();
		ret += " : " + this.zpp_inner.pre_arbiter.wrapper().toString();
		ret += " : listnener: " + Std.string(this.zpp_inner.listener.outer);
		return ret;
	}
	,get_swapped: function() {
		return this.zpp_inner.pre_swapped;
	}
	,get_int2: function() {
		return this.zpp_inner.int2.outer_i;
	}
	,get_int1: function() {
		return this.zpp_inner.int1.outer_i;
	}
	,get_arbiter: function() {
		return this.zpp_inner.pre_arbiter.wrapper();
	}
	,__class__: nape.callbacks.PreCallback
});
nape.callbacks.PreFlag = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "PreFlag" + " derp!";
};
nape.callbacks.PreFlag.__name__ = ["nape","callbacks","PreFlag"];
nape.callbacks.PreFlag.get_ACCEPT = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
}
nape.callbacks.PreFlag.get_IGNORE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
}
nape.callbacks.PreFlag.get_ACCEPT_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
}
nape.callbacks.PreFlag.get_IGNORE_ONCE = function() {
	if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
}
nape.callbacks.PreFlag.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
			return $r;
		}(this))) return "ACCEPT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
			return $r;
		}(this))) return "IGNORE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
			return $r;
		}(this))) return "ACCEPT_ONCE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
			return $r;
		}(this))) return "IGNORE_ONCE"; else return "";
	}
	,__class__: nape.callbacks.PreFlag
}
nape.callbacks.PreListener = function(interactionType,options1,options2,handler,precedence,pure) {
	if(pure == null) pure = false;
	if(precedence == null) precedence = 0;
	this.zpp_inner_zn = null;
	zpp_nape.callbacks.ZPP_Listener.internal = true;
	nape.callbacks.Listener.call(this);
	zpp_nape.callbacks.ZPP_Listener.internal = false;
	if(handler == null) throw "Error: PreListener must take a handler!";
	this.zpp_inner_zn = new zpp_nape.callbacks.ZPP_InteractionListener(zpp_nape.callbacks.ZPP_OptionType.argument(options1),zpp_nape.callbacks.ZPP_OptionType.argument(options2),zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,zpp_nape.util.ZPP_Flags.id_ListenerType_PRE);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_znp = this;
	this.zpp_inner.precedence = precedence;
	this.zpp_inner_zn.pure = pure;
	this.zpp_inner_zn.handlerp = handler;
	this.set_interactionType(interactionType);
};
nape.callbacks.PreListener.__name__ = ["nape","callbacks","PreListener"];
nape.callbacks.PreListener.__super__ = nape.callbacks.Listener;
nape.callbacks.PreListener.prototype = $extend(nape.callbacks.Listener.prototype,{
	set_interactionType: function(interactionType) {
		if(interactionType == null) throw "Error: Cannot set listener interaction type to null";
		if(this.get_interactionType() != interactionType) {
			var xtype = interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION:interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR:interactionType == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID:zpp_nape.util.ZPP_Flags.id_InteractionType_ANY;
			this.zpp_inner_zn.itype = xtype;
		}
		return this.get_interactionType();
	}
	,get_interactionType: function() {
		var ret = this.zpp_inner_zn.itype;
		return ret == zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this)):ret == zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this)):ret == zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
			return $r;
		}(this)):ret == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_ANY == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_ANY = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_ANY;
			return $r;
		}(this)):null;
	}
	,set_pure: function(pure) {
		if(!pure) this.zpp_inner_zn.wake();
		this.zpp_inner_zn.pure = pure;
		return this.zpp_inner_zn.pure;
	}
	,get_pure: function() {
		return this.zpp_inner_zn.pure;
	}
	,set_handler: function(handler) {
		if(handler == null) throw "Error: PreListener must take a non-null handler!";
		this.zpp_inner_zn.handlerp = handler;
		this.zpp_inner_zn.wake();
		return this.zpp_inner_zn.handlerp;
	}
	,get_handler: function() {
		return this.zpp_inner_zn.handlerp;
	}
	,set_options2: function(options2) {
		this.zpp_inner_zn.options2.set(options2.zpp_inner);
		return this.zpp_inner_zn.options2.outer;
	}
	,get_options2: function() {
		return this.zpp_inner_zn.options2.outer;
	}
	,set_options1: function(options1) {
		this.zpp_inner_zn.options1.set(options1.zpp_inner);
		return this.zpp_inner_zn.options1.outer;
	}
	,get_options1: function() {
		return this.zpp_inner_zn.options1.outer;
	}
	,__class__: nape.callbacks.PreListener
});
nape.constraint = {}
nape.constraint.Constraint = function() {
	this.debugDraw = true;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT.zpp_inner);
	throw "Error: Constraint cannot be instantiated derp!";
};
nape.constraint.Constraint.__name__ = ["nape","constraint","Constraint"];
nape.constraint.Constraint.prototype = {
	copy: function() {
		return this.zpp_inner.copy();
	}
	,toString: function() {
		return "{Constraint}";
	}
	,get_cbTypes: function() {
		if(this.zpp_inner.wrap_cbTypes == null) this.zpp_inner.setupcbTypes();
		return this.zpp_inner.wrap_cbTypes;
	}
	,visitBodies: function(lambda) {
	}
	,bodyImpulse: function(body) {
		return null;
	}
	,impulse: function() {
		return null;
	}
	,set_removeOnBreak: function(removeOnBreak) {
		this.zpp_inner.removeOnBreak = removeOnBreak;
		return this.zpp_inner.removeOnBreak;
	}
	,get_removeOnBreak: function() {
		return this.zpp_inner.removeOnBreak;
	}
	,set_breakUnderError: function(breakUnderError) {
		if(this.zpp_inner.breakUnderError != breakUnderError) {
			this.zpp_inner.breakUnderError = breakUnderError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderError;
	}
	,get_breakUnderError: function() {
		return this.zpp_inner.breakUnderError;
	}
	,set_breakUnderForce: function(breakUnderForce) {
		if(this.zpp_inner.breakUnderForce != breakUnderForce) {
			this.zpp_inner.breakUnderForce = breakUnderForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.breakUnderForce;
	}
	,get_breakUnderForce: function() {
		return this.zpp_inner.breakUnderForce;
	}
	,set_maxError: function(maxError) {
		if(maxError != maxError) throw "Error: Constraint::maxError cannot be NaN";
		if(maxError < 0) throw "Error: Constraint::maxError must be >=0";
		if(this.zpp_inner.maxError != maxError) {
			this.zpp_inner.maxError = maxError;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxError;
	}
	,get_maxError: function() {
		return this.zpp_inner.maxError;
	}
	,set_maxForce: function(maxForce) {
		if(maxForce != maxForce) throw "Error: Constraint::maxForce cannot be NaN";
		if(maxForce < 0) throw "Error: Constraint::maxForce must be >=0";
		if(this.zpp_inner.maxForce != maxForce) {
			this.zpp_inner.maxForce = maxForce;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.maxForce;
	}
	,get_maxForce: function() {
		return this.zpp_inner.maxForce;
	}
	,set_damping: function(damping) {
		if(damping != damping) throw "Error: Constraint::Damping cannot be Nan";
		if(damping < 0) throw "Error: Constraint::Damping must be >=0";
		if(this.zpp_inner.damping != damping) {
			this.zpp_inner.damping = damping;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.damping;
	}
	,get_damping: function() {
		return this.zpp_inner.damping;
	}
	,set_frequency: function(frequency) {
		if(frequency != frequency) throw "Error: Constraint::Frequency cannot be NaN";
		if(frequency <= 0) throw "Error: Constraint::Frequency must be >0";
		if(this.zpp_inner.frequency != frequency) {
			this.zpp_inner.frequency = frequency;
			if(!this.zpp_inner.stiff) this.zpp_inner.wake();
		}
		return this.zpp_inner.frequency;
	}
	,get_frequency: function() {
		return this.zpp_inner.frequency;
	}
	,set_stiff: function(stiff) {
		if(this.zpp_inner.stiff != stiff) {
			this.zpp_inner.stiff = stiff;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.stiff;
	}
	,get_stiff: function() {
		return this.zpp_inner.stiff;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.ignore = ignore;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.ignore;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_active: function(active) {
		if(this.zpp_inner.active != active) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(active) {
				this.zpp_inner.active = active;
				this.zpp_inner.activate();
				if(this.zpp_inner.space != null) {
					if(this.zpp_inner.component != null) this.zpp_inner.component.sleeping = true;
					this.zpp_inner.space.wake_constraint(this.zpp_inner,true);
				}
			} else {
				if(this.zpp_inner.space != null) {
					this.zpp_inner.wake();
					this.zpp_inner.space.live_constraints.remove(this.zpp_inner);
				}
				this.zpp_inner.active = active;
				this.zpp_inner.deactivate();
			}
		}
		return this.zpp_inner.active;
	}
	,get_active: function() {
		return this.zpp_inner.active;
	}
	,get_isSleeping: function() {
		if(this.zpp_inner.space == null || !this.zpp_inner.active) throw "Error: isSleeping only makes sense if constraint is" + " active and inside a space";
		return this.zpp_inner.component.sleeping;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to" + " a Compound, only the root Compound space can be set";
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if(this.zpp_inner.component != null) this.zpp_inner.component.woken = false;
			this.zpp_inner.clearcache();
			if(this.zpp_inner.space != null) this.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(this);
			if(space != null) space.zpp_inner.wrap_constraints.add(this); else this.zpp_inner.space = null;
		}
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,get_space: function() {
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(this);
			if(compound != null) compound.zpp_inner.wrap_constraints.add(this);
		}
		return this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer;
	}
	,get_compound: function() {
		return this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,__class__: nape.constraint.Constraint
}
nape.constraint.AngleJoint = function(body1,body2,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_AngleJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
	this.zpp_inner.immutable_midstep("AngleJoint::ratio");
	if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
nape.constraint.AngleJoint.__name__ = ["nape","constraint","AngleJoint"];
nape.constraint.AngleJoint.__super__ = nape.constraint.Constraint;
nape.constraint.AngleJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if(lambda == null) throw "Error: Cannot apply null lambda to bodies";
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(0,0,0); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw "Error: Cannot compute slack for AngleJoint if either body is null.";
		return this.zpp_inner_zn.is_slack();
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("AngleJoint::ratio");
		if(ratio != ratio) throw "Error: AngleJoint::ratio cannot be NaN";
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMax");
		if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("AngleJoint::jointMin");
		if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.AngleJoint
});
nape.constraint.ConstraintIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ConstraintList.internal) throw "Error: Cannot instantiate " + "Constraint" + "Iterator derp!";
};
nape.constraint.ConstraintIterator.__name__ = ["nape","constraint","ConstraintIterator"];
nape.constraint.ConstraintIterator.get = function(list) {
	var ret = nape.constraint.ConstraintIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ConstraintList.internal = true;
		var ret1 = new nape.constraint.ConstraintIterator();
		zpp_nape.util.ZPP_ConstraintList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.constraint.ConstraintIterator.zpp_pool;
		nape.constraint.ConstraintIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.constraint.ConstraintIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
			nape.constraint.ConstraintIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.constraint.ConstraintIterator
}
nape.constraint.ConstraintList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConstraintList();
	this.zpp_inner.outer = this;
};
nape.constraint.ConstraintList.__name__ = ["nape","constraint","ConstraintList"];
nape.constraint.ConstraintList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.constraint.ConstraintList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.constraint.ConstraintList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.constraint.ConstraintIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.constraint.ConstraintIterator.zpp_pool;
			nape.constraint.ConstraintIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.constraint.ConstraintIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.constraint.ConstraintIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.constraint.ConstraintList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.constraint.ConstraintIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Constraint" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.constraint.ConstraintIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Constraint" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.constraint.ConstraintList
}
nape.constraint.DistanceJoint = function(body1,body2,anchor1,anchor2,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_DistanceJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
	if(jointMin != jointMin) throw "Error: DistanceJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
	if(jointMax != jointMax) throw "Error: DistanceJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.DistanceJoint.__name__ = ["nape","constraint","DistanceJoint"];
nape.constraint.DistanceJoint.__super__ = nape.constraint.Constraint;
nape.constraint.DistanceJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null) throw "Error: Cannot compute slack for DistanceJoint if either body is null.";
		return this.zpp_inner_zn.slack;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMax");
		if(jointMax != jointMax) throw "Error: DistanceJoint::jointMax cannot be NaN";
		if(jointMax < 0) throw "Error: DistanceJoint::jointMax must be >= 0";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("DistanceJoint::jointMin");
		if(jointMin != jointMin) throw "Error: DistanceJoint::jointMin cannot be NaN";
		if(jointMin < 0) throw "Error: DistanceJoint::jointMin must be >= 0";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this));
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this));
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.DistanceJoint
});
nape.constraint.LineJoint = function(body1,body2,anchor1,anchor2,direction,jointMin,jointMax) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_LineJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
		$r = $this.zpp_inner_zn.wrap_n;
		return $r;
	}(this))).set(direction);
	if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
	this.zpp_inner_zn.wrap_n;
	this.zpp_inner.immutable_midstep("LineJoint::jointMin");
	if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("LineJoint::jointMax");
	if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.LineJoint.__name__ = ["nape","constraint","LineJoint"];
nape.constraint.LineJoint.__super__ = nape.constraint.Constraint;
nape.constraint.LineJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(2,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMax");
		if(jointMax != jointMax) throw "Error: AngleJoint::jointMax cannot be NaN";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("LineJoint::jointMin");
		if(jointMin != jointMin) throw "Error: AngleJoint::jointMin cannot be NaN";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_direction: function(direction) {
		if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(direction == null) throw "Error: Constraint::" + "direction" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
			$r = $this.zpp_inner_zn.wrap_n;
			return $r;
		}(this))).set(direction);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_n == null) $this.zpp_inner_zn.setup_n();
			$r = $this.zpp_inner_zn.wrap_n;
			return $r;
		}(this));
	}
	,get_direction: function() {
		if(this.zpp_inner_zn.wrap_n == null) this.zpp_inner_zn.setup_n();
		return this.zpp_inner_zn.wrap_n;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this));
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this));
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.LineJoint
});
nape.constraint.MotorJoint = function(body1,body2,rate,ratio) {
	if(ratio == null) ratio = 1.0;
	if(rate == null) rate = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_MotorJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.zpp_inner.immutable_midstep("MotorJoint::rate");
	if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
	if(this.zpp_inner_zn.rate != rate) {
		this.zpp_inner_zn.rate = rate;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.rate;
	this.zpp_inner.immutable_midstep("MotorJoint::ratio");
	if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
};
nape.constraint.MotorJoint.__name__ = ["nape","constraint","MotorJoint"];
nape.constraint.MotorJoint.__super__ = nape.constraint.Constraint;
nape.constraint.MotorJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,set_rate: function(rate) {
		this.zpp_inner.immutable_midstep("MotorJoint::rate");
		if(rate != rate) throw "Error: MotorJoint::rate cannot be NaN";
		if(this.zpp_inner_zn.rate != rate) {
			this.zpp_inner_zn.rate = rate;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.rate;
	}
	,get_rate: function() {
		return this.zpp_inner_zn.rate;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("MotorJoint::ratio");
		if(ratio != ratio) throw "Error: MotorJoint::ratio cannot be NaN";
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.MotorJoint
});
nape.constraint.PivotJoint = function(body1,body2,anchor1,anchor2) {
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PivotJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
};
nape.constraint.PivotJoint.__name__ = ["nape","constraint","PivotJoint"];
nape.constraint.PivotJoint.__super__ = nape.constraint.Constraint;
nape.constraint.PivotJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(2,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		return ret;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this));
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this));
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.PivotJoint
});
nape.constraint.PulleyJoint = function(body1,body2,body3,body4,anchor1,anchor2,anchor3,anchor4,jointMin,jointMax,ratio) {
	if(ratio == null) ratio = 1.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_PulleyJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	this.set_body3(body3);
	this.set_body4(body4);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	if(anchor3 != null && anchor3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor3 == null) throw "Error: Constraint::" + "anchor3" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
		$r = $this.zpp_inner_zn.wrap_a3;
		return $r;
	}(this))).set(anchor3);
	if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
	this.zpp_inner_zn.wrap_a3;
	if(anchor4 != null && anchor4.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor4 == null) throw "Error: Constraint::" + "anchor4" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
		$r = $this.zpp_inner_zn.wrap_a4;
		return $r;
	}(this))).set(anchor4);
	if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
	this.zpp_inner_zn.wrap_a4;
	this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
	if(ratio != ratio) throw "Error: PulleyJoint::ratio cannot be NaN";
	if(this.zpp_inner_zn.ratio != ratio) {
		this.zpp_inner_zn.ratio = ratio;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.ratio;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
	if(jointMin != jointMin) throw "Error: PulleyJoint::jointMin cannot be NaN";
	if(jointMin < 0) throw "Error: PulleyJoint::jointMin must be >= 0";
	if(this.zpp_inner_zn.jointMin != jointMin) {
		this.zpp_inner_zn.jointMin = jointMin;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMin;
	this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
	if(jointMax != jointMax) throw "Error: PulleyJoint::jointMax cannot be NaN";
	if(jointMax < 0) throw "Error: PulleyJoint::jointMax must be >= 0";
	if(this.zpp_inner_zn.jointMax != jointMax) {
		this.zpp_inner_zn.jointMax = jointMax;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.jointMax;
};
nape.constraint.PulleyJoint.__name__ = ["nape","constraint","PulleyJoint"];
nape.constraint.PulleyJoint.__super__ = nape.constraint.Constraint;
nape.constraint.PulleyJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
		if((this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != null && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) lambda(this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer);
		if((this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != null && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer)) lambda(this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) && body != (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) && body != (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(1,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc;
		return ret;
	}
	,isSlack: function() {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) == null || (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) == null || (this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer) == null || (this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer) == null) throw "Error: Cannot compute slack for PulleyJoint if either body is null.";
		return this.zpp_inner_zn.slack;
	}
	,set_ratio: function(ratio) {
		this.zpp_inner.immutable_midstep("PulleyJoint::ratio");
		if(ratio != ratio) throw "Error: PulleyJoint::ratio cannot be NaN";
		if(this.zpp_inner_zn.ratio != ratio) {
			this.zpp_inner_zn.ratio = ratio;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.ratio;
	}
	,get_ratio: function() {
		return this.zpp_inner_zn.ratio;
	}
	,set_jointMax: function(jointMax) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMax");
		if(jointMax != jointMax) throw "Error: PulleyJoint::jointMax cannot be NaN";
		if(jointMax < 0) throw "Error: PulleyJoint::jointMax must be >= 0";
		if(this.zpp_inner_zn.jointMax != jointMax) {
			this.zpp_inner_zn.jointMax = jointMax;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMax;
	}
	,get_jointMax: function() {
		return this.zpp_inner_zn.jointMax;
	}
	,set_jointMin: function(jointMin) {
		this.zpp_inner.immutable_midstep("PulleyJoint::jointMin");
		if(jointMin != jointMin) throw "Error: PulleyJoint::jointMin cannot be NaN";
		if(jointMin < 0) throw "Error: PulleyJoint::jointMin must be >= 0";
		if(this.zpp_inner_zn.jointMin != jointMin) {
			this.zpp_inner_zn.jointMin = jointMin;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.jointMin;
	}
	,get_jointMin: function() {
		return this.zpp_inner_zn.jointMin;
	}
	,set_anchor4: function(anchor4) {
		if(anchor4 != null && anchor4.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor4 == null) throw "Error: Constraint::" + "anchor4" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
			$r = $this.zpp_inner_zn.wrap_a4;
			return $r;
		}(this))).set(anchor4);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a4 == null) $this.zpp_inner_zn.setup_a4();
			$r = $this.zpp_inner_zn.wrap_a4;
			return $r;
		}(this));
	}
	,get_anchor4: function() {
		if(this.zpp_inner_zn.wrap_a4 == null) this.zpp_inner_zn.setup_a4();
		return this.zpp_inner_zn.wrap_a4;
	}
	,set_anchor3: function(anchor3) {
		if(anchor3 != null && anchor3.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor3 == null) throw "Error: Constraint::" + "anchor3" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
			$r = $this.zpp_inner_zn.wrap_a3;
			return $r;
		}(this))).set(anchor3);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a3 == null) $this.zpp_inner_zn.setup_a3();
			$r = $this.zpp_inner_zn.wrap_a3;
			return $r;
		}(this));
	}
	,get_anchor3: function() {
		if(this.zpp_inner_zn.wrap_a3 == null) this.zpp_inner_zn.setup_a3();
		return this.zpp_inner_zn.wrap_a3;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this));
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this));
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_body4: function(body4) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body4");
		var inbody4 = body4 == null?null:body4.zpp_inner;
		if(inbody4 != this.zpp_inner_zn.b4) {
			if(this.zpp_inner_zn.b4 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b4 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b4) {
					if(this.zpp_inner_zn.b4 != null) this.zpp_inner_zn.b4.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b4.wake();
			}
			this.zpp_inner_zn.b4 = inbody4;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody4 != null && this.zpp_inner_zn.b1 != inbody4 && this.zpp_inner_zn.b2 != inbody4 && this.zpp_inner_zn.b3 != inbody4) {
				if(inbody4 != null) inbody4.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody4 != null) inbody4.wake();
			}
		}
		return this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer;
	}
	,get_body4: function() {
		return this.zpp_inner_zn.b4 == null?null:this.zpp_inner_zn.b4.outer;
	}
	,set_body3: function(body3) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body3");
		var inbody3 = body3 == null?null:body3.zpp_inner;
		if(inbody3 != this.zpp_inner_zn.b3) {
			if(this.zpp_inner_zn.b3 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b3 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b3) {
					if(this.zpp_inner_zn.b3 != null) this.zpp_inner_zn.b3.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b3.wake();
			}
			this.zpp_inner_zn.b3 = inbody3;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody3 != null && this.zpp_inner_zn.b1 != inbody3 && this.zpp_inner_zn.b2 != inbody3 && this.zpp_inner_zn.b4 != inbody3) {
				if(inbody3 != null) inbody3.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody3 != null) inbody3.wake();
			}
		}
		return this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer;
	}
	,get_body3: function() {
		return this.zpp_inner_zn.b3 == null?null:this.zpp_inner_zn.b3.outer;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b2 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2 && this.zpp_inner_zn.b3 != inbody2 && this.zpp_inner_zn.b4 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b3 != this.zpp_inner_zn.b1 && this.zpp_inner_zn.b4 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1 && this.zpp_inner_zn.b3 != inbody1 && this.zpp_inner_zn.b4 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.PulleyJoint
});
nape.constraint.UserConstraint = function(dimensions,velocityOnly) {
	if(velocityOnly == null) velocityOnly = false;
	this.zpp_inner_zn = null;
	if(dimensions < 1) throw "Error: Constraint dimension must be at least 1";
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_UserConstraint(dimensions,velocityOnly);
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
};
nape.constraint.UserConstraint.__name__ = ["nape","constraint","UserConstraint"];
nape.constraint.UserConstraint.__super__ = nape.constraint.Constraint;
nape.constraint.UserConstraint.prototype = $extend(nape.constraint.Constraint.prototype,{
	__registerBody: function(oldBody,newBody) {
		this.zpp_inner.immutable_midstep("UserConstraint::registerBody(..)");
		if(oldBody != newBody) {
			if(oldBody != null) {
				if(!this.zpp_inner_zn.remBody(oldBody.zpp_inner)) throw "Error: oldBody is not registered to the cosntraint";
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) oldBody.zpp_inner.wake();
			}
			if(newBody != null) this.zpp_inner_zn.addBody(newBody.zpp_inner);
			this.zpp_inner.wake();
			if(newBody != null) newBody.zpp_inner.wake();
		}
		return newBody;
	}
	,__invalidate: function() {
		this.zpp_inner.immutable_midstep("UserConstraint::invalidate()");
		if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.wake();
	}
	,visitBodies: function(lambda) {
		var i = 0;
		var nbodies = this.zpp_inner_zn.bodies.length;
		while(i < nbodies) {
			var b = this.zpp_inner_zn.bodies[i];
			if(b.body != null) {
				var found = false;
				var _g = i + 1;
				while(_g < nbodies) {
					var j = _g++;
					var c = this.zpp_inner_zn.bodies[j];
					if(c.body == b.body) {
						found = true;
						break;
					}
				}
				if(!found) lambda(b.body.outer);
			}
			i++;
		}
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		var found = false;
		var _g = 0, _g1 = this.zpp_inner_zn.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body == body.zpp_inner) {
				found = true;
				break;
			}
		}
		if(!found) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(this.zpp_inner_zn.dim,1);
		var _g1 = 0, _g = this.zpp_inner_zn.dim;
		while(_g1 < _g) {
			var i = _g1++;
			if(i < 0 || i >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
			ret.zpp_inner.x[i * ret.zpp_inner.n] = this.zpp_inner_zn.jAcc[i];
		}
		return ret;
	}
	,__impulse: function(imp,body,out) {
		throw "Error: UserConstraint::__impulse must be overriden";
	}
	,__clamp: function(jAcc) {
	}
	,__eff_mass: function(eff) {
		throw "Error: UserConstraint::__eff_mass must be overriden";
	}
	,__velocity: function(err) {
		throw "Error: Userconstraint::__velocity must be overriden";
	}
	,__position: function(err) {
		throw "Error: UserConstraint::__position must be overriden";
	}
	,__prepare: function() {
	}
	,__draw: function(debug) {
	}
	,__validate: function() {
	}
	,__broken: function() {
	}
	,__copy: function() {
		throw "Error: UserConstraint::__copy must be overriden";
		return null;
	}
	,__bindVec2: function() {
		var ret = new nape.geom.Vec2();
		ret.zpp_inner._inuse = true;
		ret.zpp_inner._invalidate = ($_=this.zpp_inner_zn,$bind($_,$_.bindVec2_invalidate));
		return ret;
	}
	,__class__: nape.constraint.UserConstraint
});
nape.constraint.WeldJoint = function(body1,body2,anchor1,anchor2,phase) {
	if(phase == null) phase = 0.0;
	this.zpp_inner_zn = null;
	this.zpp_inner_zn = new zpp_nape.constraint.ZPP_WeldJoint();
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	try {
		nape.constraint.Constraint.call(this);
	} catch( e ) {
	}
	this.set_body1(body1);
	this.set_body2(body2);
	if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
		$r = $this.zpp_inner_zn.wrap_a1;
		return $r;
	}(this))).set(anchor1);
	if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
	this.zpp_inner_zn.wrap_a1;
	if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
	((function($this) {
		var $r;
		if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
		$r = $this.zpp_inner_zn.wrap_a2;
		return $r;
	}(this))).set(anchor2);
	if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
	this.zpp_inner_zn.wrap_a2;
	this.zpp_inner.immutable_midstep("WeldJoint::phase");
	if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
	if(this.zpp_inner_zn.phase != phase) {
		this.zpp_inner_zn.phase = phase;
		this.zpp_inner.wake();
	}
	this.zpp_inner_zn.phase;
};
nape.constraint.WeldJoint.__name__ = ["nape","constraint","WeldJoint"];
nape.constraint.WeldJoint.__super__ = nape.constraint.Constraint;
nape.constraint.WeldJoint.prototype = $extend(nape.constraint.Constraint.prototype,{
	visitBodies: function(lambda) {
		if((this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) != null) lambda(this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer);
		if((this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != null && (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer) != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer)) lambda(this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer);
	}
	,bodyImpulse: function(body) {
		if(body == null) throw "Error: Cannot evaluate impulse on null body";
		if(body != (this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer) && body != (this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer)) throw "Error: Body is not linked to this constraint";
		if(!this.zpp_inner.active) return nape.geom.Vec3.get(); else return this.zpp_inner_zn.bodyImpulse(body.zpp_inner);
	}
	,impulse: function() {
		var ret = new nape.geom.MatMN(3,1);
		if(0 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[0 * ret.zpp_inner.n] = this.zpp_inner_zn.jAccx;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccy;
		if(1 >= ret.zpp_inner.m || 0 >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
		ret.zpp_inner.x[ret.zpp_inner.n] = this.zpp_inner_zn.jAccz;
		return ret;
	}
	,set_phase: function(phase) {
		this.zpp_inner.immutable_midstep("WeldJoint::phase");
		if(phase != phase) throw "Error: WeldJoint::phase cannot be NaN";
		if(this.zpp_inner_zn.phase != phase) {
			this.zpp_inner_zn.phase = phase;
			this.zpp_inner.wake();
		}
		return this.zpp_inner_zn.phase;
	}
	,get_phase: function() {
		return this.zpp_inner_zn.phase;
	}
	,set_anchor2: function(anchor2) {
		if(anchor2 != null && anchor2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor2 == null) throw "Error: Constraint::" + "anchor2" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this))).set(anchor2);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a2 == null) $this.zpp_inner_zn.setup_a2();
			$r = $this.zpp_inner_zn.wrap_a2;
			return $r;
		}(this));
	}
	,get_anchor2: function() {
		if(this.zpp_inner_zn.wrap_a2 == null) this.zpp_inner_zn.setup_a2();
		return this.zpp_inner_zn.wrap_a2;
	}
	,set_anchor1: function(anchor1) {
		if(anchor1 != null && anchor1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(anchor1 == null) throw "Error: Constraint::" + "anchor1" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this))).set(anchor1);
		return (function($this) {
			var $r;
			if($this.zpp_inner_zn.wrap_a1 == null) $this.zpp_inner_zn.setup_a1();
			$r = $this.zpp_inner_zn.wrap_a1;
			return $r;
		}(this));
	}
	,get_anchor1: function() {
		if(this.zpp_inner_zn.wrap_a1 == null) this.zpp_inner_zn.setup_a1();
		return this.zpp_inner_zn.wrap_a1;
	}
	,set_body2: function(body2) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body2");
		var inbody2 = body2 == null?null:body2.zpp_inner;
		if(inbody2 != this.zpp_inner_zn.b2) {
			if(this.zpp_inner_zn.b2 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b1 != this.zpp_inner_zn.b2) {
					if(this.zpp_inner_zn.b2 != null) this.zpp_inner_zn.b2.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b2.wake();
			}
			this.zpp_inner_zn.b2 = inbody2;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody2 != null && this.zpp_inner_zn.b1 != inbody2) {
				if(inbody2 != null) inbody2.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody2 != null) inbody2.wake();
			}
		}
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,get_body2: function() {
		return this.zpp_inner_zn.b2 == null?null:this.zpp_inner_zn.b2.outer;
	}
	,set_body1: function(body1) {
		this.zpp_inner.immutable_midstep("Constraint::" + "body1");
		var inbody1 = body1 == null?null:body1.zpp_inner;
		if(inbody1 != this.zpp_inner_zn.b1) {
			if(this.zpp_inner_zn.b1 != null) {
				if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && this.zpp_inner_zn.b2 != this.zpp_inner_zn.b1) {
					if(this.zpp_inner_zn.b1 != null) this.zpp_inner_zn.b1.constraints.remove(this.zpp_inner);
				}
				if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner_zn.b1.wake();
			}
			this.zpp_inner_zn.b1 = inbody1;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null && inbody1 != null && this.zpp_inner_zn.b2 != inbody1) {
				if(inbody1 != null) inbody1.constraints.add(this.zpp_inner);
			}
			if(this.zpp_inner.active && (this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) {
				this.zpp_inner.wake();
				if(inbody1 != null) inbody1.wake();
			}
		}
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,get_body1: function() {
		return this.zpp_inner_zn.b1 == null?null:this.zpp_inner_zn.b1.outer;
	}
	,__class__: nape.constraint.WeldJoint
});
nape.dynamics = {}
nape.dynamics.Arbiter = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate Arbiter derp!";
};
nape.dynamics.Arbiter.__name__ = ["nape","dynamics","Arbiter"];
nape.dynamics.Arbiter.prototype = {
	toString: function() {
		var ret = this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL?"CollisionArbiter":this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID?"FluidArbiter":"SensorArbiter";
		if(this.zpp_inner.cleared) return ret + "(object-pooled)"; else return ret + "(" + ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).toString() + "|" + ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).toString() + ")" + (this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL?"[" + ["SD","DD"][this.zpp_inner.colarb.stat?0:1] + "]":"") + "<-" + this.get_state().toString();
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		return nape.geom.Vec3.get(0,0,0);
	}
	,get_state: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return (function($this) {
			var $r;
			var _g = $this;
			$r = _g.zpp_inner.immState == (zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)?(function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
				return $r;
			}($this)):(function($this) {
				var $r;
				switch(_g.zpp_inner.immState) {
				case zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:
					$r = (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
						return $r;
					}($this));
					break;
				default:
					$r = _g.zpp_inner.immState == (zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS)?(function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
						return $r;
					}($this)):(function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE = new nape.callbacks.PreFlag();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE_ONCE;
						return $r;
					}($this));
				}
				return $r;
			}($this));
			return $r;
		}(this));
	}
	,get_body2: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b1.outer:this.zpp_inner.b2.outer;
	}
	,get_body1: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.b2.outer:this.zpp_inner.b1.outer;
	}
	,get_shape2: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws1.outer:this.zpp_inner.ws2.outer;
	}
	,get_shape1: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.ws1.id > this.zpp_inner.ws2.id?this.zpp_inner.ws2.outer:this.zpp_inner.ws1.outer;
	}
	,get_fluidArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID?this.zpp_inner.fluidarb.outer_zn:null;
	}
	,get_collisionArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL?this.zpp_inner.colarb.outer_zn:null;
	}
	,isSensorArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	}
	,isFluidArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	}
	,isCollisionArbiter: function() {
		return this.zpp_inner.type == zpp_nape.dynamics.ZPP_Arbiter.COL;
	}
	,get_type: function() {
		return zpp_nape.dynamics.ZPP_Arbiter.types[this.zpp_inner.type];
	}
	,get_isSleeping: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.sleeping;
	}
	,__class__: nape.dynamics.Arbiter
}
nape.dynamics.ArbiterIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ArbiterList.internal) throw "Error: Cannot instantiate " + "Arbiter" + "Iterator derp!";
};
nape.dynamics.ArbiterIterator.__name__ = ["nape","dynamics","ArbiterIterator"];
nape.dynamics.ArbiterIterator.get = function(list) {
	var ret = nape.dynamics.ArbiterIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ArbiterList.internal = true;
		var ret1 = new nape.dynamics.ArbiterIterator();
		zpp_nape.util.ZPP_ArbiterList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.dynamics.ArbiterIterator.zpp_pool;
		nape.dynamics.ArbiterIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.dynamics.ArbiterIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
			nape.dynamics.ArbiterIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.dynamics.ArbiterIterator
}
nape.dynamics.ArbiterList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ArbiterList();
	this.zpp_inner.outer = this;
};
nape.dynamics.ArbiterList.__name__ = ["nape","dynamics","ArbiterList"];
nape.dynamics.ArbiterList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.ArbiterList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.dynamics.ArbiterList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.ArbiterIterator.zpp_pool;
			nape.dynamics.ArbiterIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = this.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = xs.iterator();
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) this.add(x);
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.ArbiterList();
		var $it0 = this.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Arbiter" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape.dynamics.ArbiterIterator.get(this);
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Arbiter" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.head;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x = this.zpp_inner.at_ite.elt;
				if(x.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,get_length: function() {
		return this.zpp_gl();
	}
	,__class__: nape.dynamics.ArbiterList
}
nape.dynamics.ArbiterType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ArbiterType" + " derp!";
};
nape.dynamics.ArbiterType.__name__ = ["nape","dynamics","ArbiterType"];
nape.dynamics.ArbiterType.get_COLLISION = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
}
nape.dynamics.ArbiterType.get_SENSOR = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
}
nape.dynamics.ArbiterType.get_FLUID = function() {
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
}
nape.dynamics.ArbiterType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
			return $r;
		}(this))) return "COLLISION"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
			return $r;
		}(this))) return "SENSOR"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
			return $r;
		}(this))) return "FLUID"; else return "";
	}
	,__class__: nape.dynamics.ArbiterType
}
nape.dynamics.CollisionArbiter = function() {
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate CollisionArbiter derp!";
	nape.dynamics.Arbiter.call(this);
};
nape.dynamics.CollisionArbiter.__name__ = ["nape","dynamics","CollisionArbiter"];
nape.dynamics.CollisionArbiter.__super__ = nape.dynamics.Arbiter;
nape.dynamics.CollisionArbiter.prototype = $extend(nape.dynamics.Arbiter.prototype,{
	set_rollingFriction: function(rollingFriction) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "rollingFriction" + " is only mutable during a pre-handler";
		if(rollingFriction != rollingFriction) throw "Error: CollisionArbiter::" + "rollingFriction" + " cannot be NaN";
		if(rollingFriction < 0) throw "Error: CollisionArbiter::" + "rollingFriction" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.rfric = rollingFriction;
		colarb.userdef_rfric = true;
		return this.get_rollingFriction();
	}
	,get_rollingFriction: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.rfric;
	}
	,set_staticFriction: function(staticFriction) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "staticFriction" + " is only mutable during a pre-handler";
		if(staticFriction != staticFriction) throw "Error: CollisionArbiter::" + "staticFriction" + " cannot be NaN";
		if(staticFriction < 0) throw "Error: CollisionArbiter::" + "staticFriction" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.stat_fric = staticFriction;
		colarb.userdef_stat_fric = true;
		return this.get_staticFriction();
	}
	,get_staticFriction: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.stat_fric;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "dynamicFriction" + " is only mutable during a pre-handler";
		if(dynamicFriction != dynamicFriction) throw "Error: CollisionArbiter::" + "dynamicFriction" + " cannot be NaN";
		if(dynamicFriction < 0) throw "Error: CollisionArbiter::" + "dynamicFriction" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.dyn_fric = dynamicFriction;
		colarb.userdef_dyn_fric = true;
		return this.get_dynamicFriction();
	}
	,get_dynamicFriction: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.dyn_fric;
	}
	,set_elasticity: function(elasticity) {
		if(!this.zpp_inner.colarb.mutable) throw "Error: CollisionArbiter::" + "elasticity" + " is only mutable during a pre-handler";
		if(elasticity != elasticity) throw "Error: CollisionArbiter::" + "elasticity" + " cannot be NaN";
		if(elasticity < 0) throw "Error: CollisionArbiter::" + "elasticity" + " cannot be negative";
		var colarb = this.zpp_inner.colarb;
		colarb.restitution = elasticity;
		colarb.userdef_restitution = true;
		return this.get_elasticity();
	}
	,get_elasticity: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var colarb = this.zpp_inner.colarb;
		if(colarb.invalidated) {
			colarb.invalidated = false;
			if(!colarb.userdef_restitution) {
				if(colarb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || colarb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) colarb.restitution = 0; else if(colarb.s1.material.elasticity >= Math.POSITIVE_INFINITY || colarb.s2.material.elasticity >= Math.POSITIVE_INFINITY) colarb.restitution = 1; else colarb.restitution = (colarb.s1.material.elasticity + colarb.s2.material.elasticity) / 2;
				if(colarb.restitution < 0) colarb.restitution = 0;
				if(colarb.restitution > 1) colarb.restitution = 1;
			}
			if(!colarb.userdef_dyn_fric) colarb.dyn_fric = Math.sqrt(colarb.s1.material.dynamicFriction * colarb.s2.material.dynamicFriction);
			if(!colarb.userdef_stat_fric) colarb.stat_fric = Math.sqrt(colarb.s1.material.staticFriction * colarb.s2.material.staticFriction);
			if(!colarb.userdef_rfric) colarb.rfric = Math.sqrt(colarb.s1.material.rollingFriction * colarb.s2.material.rollingFriction);
		}
		return colarb.restitution;
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) return colarb.oc1.wrapper().rollingImpulse(body); else return 0.0;
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().totalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp = colarb.oc2.wrapper().totalImpulse(body);
				var t = 1;
				var t1 = t;
				retx += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}(this)) * t1;
				rety += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}(this)) * t1;
				retz += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.z;
					return $r;
				}(this)) * t;
				imp.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().tangentImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp = colarb.oc2.wrapper().tangentImpulse(body);
				var t = 1;
				var t1 = t;
				retx += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}(this)) * t1;
				rety += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}(this)) * t1;
				retz += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.z;
					return $r;
				}(this)) * t;
				imp.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var colarb = this.zpp_inner.colarb;
		if(!freshOnly || colarb.oc1.fresh) {
			var imp = colarb.oc1.wrapper().normalImpulse(body);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		if(colarb.hc2) {
			if(!freshOnly || colarb.oc2.fresh) {
				var imp = colarb.oc2.wrapper().normalImpulse(body);
				var t = 1;
				var t1 = t;
				retx += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}(this)) * t1;
				rety += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}(this)) * t1;
				retz += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.z;
					return $r;
				}(this)) * t;
				imp.dispose();
			}
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,secondVertex: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		return poly2circle?this.zpp_inner.colarb.__ref_vertex == 1:false;
	}
	,firstVertex: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var poly2circle = this.zpp_inner.colarb.__ref_edge1 != null != (this.zpp_inner.colarb.__ref_edge2 != null);
		return poly2circle?this.zpp_inner.colarb.__ref_vertex == -1:false;
	}
	,get_referenceEdge2: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!(((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) || ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws1.outer:$this.zpp_inner.ws2.outer;
			return $r;
		}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		return edge == null?null:edge.wrapper();
	}
	,get_referenceEdge1: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		var edge = this.zpp_inner.colarb.__ref_edge1;
		if(edge != null && (!(((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) || ((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.ws2.outer:$this.zpp_inner.ws1.outer;
			return $r;
		}(this))).zpp_inner != edge.polygon)) edge = this.zpp_inner.colarb.__ref_edge2;
		return edge == null?null:edge.wrapper();
	}
	,get_radius: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.colarb.radius;
	}
	,get_normal: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.colarb.wrap_normal == null) this.zpp_inner.colarb.getnormal();
		return this.zpp_inner.colarb.wrap_normal;
	}
	,get_contacts: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.colarb.wrap_contacts == null) this.zpp_inner.colarb.setupcontacts();
		return this.zpp_inner.colarb.wrap_contacts;
	}
	,__class__: nape.dynamics.CollisionArbiter
});
nape.dynamics.Contact = function() {
	this.zpp_inner = null;
	if(!zpp_nape.dynamics.ZPP_Contact.internal) throw "Error: Cannot instantiate Contact derp!";
};
nape.dynamics.Contact.__name__ = ["nape","dynamics","Contact"];
nape.dynamics.Contact.prototype = {
	toString: function() {
		if(this.zpp_inner.arbiter == null || this.zpp_inner.arbiter.cleared) return "{object-pooled}"; else return "{Contact}";
	}
	,get_friction: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		return this.zpp_inner.inner.friction;
	}
	,totalImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		var jtAcc = cin.jtAcc;
		var jrAcc = colarb.jrAcc;
		if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc - colarb.ny * jtAcc,colarb.ny * jnAcc + colarb.nx * jtAcc,jrAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			var jx = colarb.nx * jnAcc - colarb.ny * jtAcc;
			var jy = colarb.ny * jnAcc + colarb.nx * jtAcc;
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(-jx,-jy,-(jy * cin.r1x - jx * cin.r1y) - jrAcc); else return nape.geom.Vec3.get(jx,jy,jy * cin.r2x - jx * cin.r2y + jrAcc);
		}
	}
	,rollingImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var jrAcc = this.zpp_inner.arbiter.colarb.jrAcc;
		if(body == null) return jrAcc; else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			if(body == colarb.b1.outer) return -jrAcc; else return jrAcc;
		}
	}
	,tangentImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jtAcc = cin.jtAcc;
		if(body == null) return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.ny * jtAcc,-colarb.nx * jtAcc,-(cin.r1x * colarb.nx + cin.r1y * colarb.ny) * jtAcc); else return nape.geom.Vec3.get(-colarb.ny * jtAcc,colarb.nx * jtAcc,(cin.r2x * colarb.nx + cin.r2y * colarb.ny) * jtAcc);
		}
	}
	,normalImpulse: function(body) {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		var colarb = this.zpp_inner.arbiter.colarb;
		var cin = this.zpp_inner.inner;
		var jnAcc = cin.jnAcc;
		if(body == null) return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc); else {
			if(body != colarb.b1.outer && body != colarb.b2.outer) throw "Error: Contact does not relate to the given body";
			if(body == colarb.b1.outer) return nape.geom.Vec3.get(colarb.nx * -jnAcc,colarb.ny * -jnAcc,-(colarb.ny * cin.r1x - colarb.nx * cin.r1y) * jnAcc); else return nape.geom.Vec3.get(colarb.nx * jnAcc,colarb.ny * jnAcc,(colarb.ny * cin.r2x - colarb.nx * cin.r2y) * jnAcc);
		}
	}
	,get_fresh: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		return this.zpp_inner.fresh;
	}
	,get_position: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		if(this.zpp_inner.wrap_position == null) this.zpp_inner.getposition();
		return this.zpp_inner.wrap_position;
	}
	,get_penetration: function() {
		if(this.zpp_inner.inactiveme()) throw "Error: Contact not currently in use";
		return -this.zpp_inner.dist;
	}
	,get_arbiter: function() {
		return this.zpp_inner.arbiter == null?null:this.zpp_inner.arbiter.outer.get_collisionArbiter();
	}
	,__class__: nape.dynamics.Contact
}
nape.dynamics.ContactIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ContactList.internal) throw "Error: Cannot instantiate " + "Contact" + "Iterator derp!";
};
nape.dynamics.ContactIterator.__name__ = ["nape","dynamics","ContactIterator"];
nape.dynamics.ContactIterator.get = function(list) {
	var ret = nape.dynamics.ContactIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ContactList.internal = true;
		var ret1 = new nape.dynamics.ContactIterator();
		zpp_nape.util.ZPP_ContactList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.dynamics.ContactIterator.zpp_pool;
		nape.dynamics.ContactIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.dynamics.ContactIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
			nape.dynamics.ContactIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.dynamics.ContactIterator
}
nape.dynamics.ContactList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ContactList();
	this.zpp_inner.outer = this;
};
nape.dynamics.ContactList.__name__ = ["nape","dynamics","ContactList"];
nape.dynamics.ContactList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.ContactList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.dynamics.ContactList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.dynamics.ContactIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.ContactIterator.zpp_pool;
			nape.dynamics.ContactIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.dynamics.ContactIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.dynamics.ContactIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.ContactList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.dynamics.ContactIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Contact" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.dynamics.ContactIterator.get(this);
	}
	,empty: function() {
		return this.get_length() == 0;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.get_length() == 0)) this.pop(); else while(!(this.get_length() == 0)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.get_length() == 0) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.next:ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.get_length() == 0) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.next:ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.get_length() == 0?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Contact" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.get_length() == 0?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = 0;
			this.zpp_inner.at_ite = this.zpp_inner.inner.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			while(true) {
				var x = this.zpp_inner.at_ite;
				if(x.active && x.arbiter.active) break;
				this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
			}
		}
		return this.zpp_inner.at_ite.wrapper();
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = 0;
			var cx_ite = this.zpp_inner.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				if(i.active && i.arbiter.active) this.zpp_inner.user_length++;
				cx_ite = cx_ite.next;
			}
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.dynamics.ContactList
}
nape.dynamics.FluidArbiter = function() {
	if(!zpp_nape.dynamics.ZPP_Arbiter.internal) throw "Error: Cannot instantiate FluidArbiter derp!";
	nape.dynamics.Arbiter.call(this);
};
nape.dynamics.FluidArbiter.__name__ = ["nape","dynamics","FluidArbiter"];
nape.dynamics.FluidArbiter.__super__ = nape.dynamics.Arbiter;
nape.dynamics.FluidArbiter.prototype = $extend(nape.dynamics.Arbiter.prototype,{
	totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var tmp = this.buoyancyImpulse(body);
		var ret = this.dragImpulse(body);
		var _g = ret;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		_g.zpp_inner.x = (function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.x;
			return $r;
		}(this));
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		_g.zpp_inner.x;
		var _g = ret;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		_g.zpp_inner.y = (function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.y;
			return $r;
		}(this));
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		_g.zpp_inner.y;
		var _g = ret;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		_g.zpp_inner.z = (function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.z;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(tmp != null && tmp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			tmp.zpp_inner.validate();
			$r = tmp.zpp_inner.z;
			return $r;
		}(this));
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		_g.zpp_inner.z;
		tmp.dispose();
		return ret;
	}
	,dragImpulse: function(body) {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var farb = this.zpp_inner.fluidarb;
		var scale = body == null || body.zpp_inner == this.zpp_inner.b2?1:-1;
		return nape.geom.Vec3.get(farb.dampx * scale,farb.dampy * scale,farb.adamp * scale);
	}
	,buoyancyImpulse: function(body) {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(body != null && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b2.outer:$this.zpp_inner.b1.outer;
			return $r;
		}(this)) && body != (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.ws1.id > $this.zpp_inner.ws2.id?$this.zpp_inner.b1.outer:$this.zpp_inner.b2.outer;
			return $r;
		}(this))) throw "Error: Arbiter does not relate to body";
		var farb = this.zpp_inner.fluidarb;
		if(body == null) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,0); else if(body.zpp_inner == this.zpp_inner.b2) return nape.geom.Vec3.get(farb.buoyx,farb.buoyy,farb.buoyy * farb.r2x - farb.buoyx * farb.r2y); else return nape.geom.Vec3.get(-farb.buoyx,-farb.buoyy,-(farb.buoyy * farb.r1x - farb.buoyx * farb.r1y));
	}
	,set_overlap: function(overlap) {
		if(!this.zpp_inner.fluidarb.mutable) throw "Error: Arbiter is mutable only within a pre-handler";
		if(overlap != overlap) throw "Error: FluidArbiter::overlap cannot be NaN";
		if(overlap <= 0 || overlap == Math.POSITIVE_INFINITY) throw "Error: FluidArbiter::overlap must be strictly positive and non infinite";
		this.zpp_inner.fluidarb.overlap = overlap;
		return (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			$r = $this.zpp_inner.fluidarb.overlap;
			return $r;
		}(this));
	}
	,get_overlap: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		return this.zpp_inner.fluidarb.overlap;
	}
	,set_position: function(position) {
		if(!this.zpp_inner.fluidarb.mutable) throw "Error: Arbiter is mutable only within a pre-handler";
		if(position == null) throw "Error: FluidArbiter::position cannot be null";
		((function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
			$r = $this.zpp_inner.fluidarb.wrap_position;
			return $r;
		}(this))).set(position);
		return (function($this) {
			var $r;
			if(!$this.zpp_inner.active) throw "Error: Arbiter not currently in use";
			if($this.zpp_inner.fluidarb.wrap_position == null) $this.zpp_inner.fluidarb.getposition();
			$r = $this.zpp_inner.fluidarb.wrap_position;
			return $r;
		}(this));
	}
	,get_position: function() {
		if(!this.zpp_inner.active) throw "Error: Arbiter not currently in use";
		if(this.zpp_inner.fluidarb.wrap_position == null) this.zpp_inner.fluidarb.getposition();
		return this.zpp_inner.fluidarb.wrap_position;
	}
	,__class__: nape.dynamics.FluidArbiter
});
nape.dynamics.InteractionFilter = function(collisionGroup,collisionMask,sensorGroup,sensorMask,fluidGroup,fluidMask) {
	if(fluidMask == null) fluidMask = -1;
	if(fluidGroup == null) fluidGroup = 1;
	if(sensorMask == null) sensorMask = -1;
	if(sensorGroup == null) sensorGroup = 1;
	if(collisionMask == null) collisionMask = -1;
	if(collisionGroup == null) collisionGroup = 1;
	this.zpp_inner = null;
	if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
		this.zpp_inner = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(this.zpp_inner.collisionGroup != collisionGroup) {
		this.zpp_inner.collisionGroup = collisionGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionGroup;
	if(this.zpp_inner.collisionMask != collisionMask) {
		this.zpp_inner.collisionMask = collisionMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.collisionMask;
	if(this.zpp_inner.sensorGroup != sensorGroup) {
		this.zpp_inner.sensorGroup = sensorGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorGroup;
	if(this.zpp_inner.sensorMask != sensorMask) {
		this.zpp_inner.sensorMask = sensorMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.sensorMask;
	if(this.zpp_inner.fluidGroup != fluidGroup) {
		this.zpp_inner.fluidGroup = fluidGroup;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidGroup;
	if(this.zpp_inner.fluidMask != fluidMask) {
		this.zpp_inner.fluidMask = fluidMask;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.fluidMask;
};
nape.dynamics.InteractionFilter.__name__ = ["nape","dynamics","InteractionFilter"];
nape.dynamics.InteractionFilter.prototype = {
	toString: function() {
		return "{ collision: " + StringTools.hex(this.zpp_inner.collisionGroup,8) + "~" + StringTools.hex(this.zpp_inner.collisionMask,8) + " sensor: " + StringTools.hex(this.zpp_inner.sensorGroup,8) + "~" + StringTools.hex(this.zpp_inner.sensorMask,8) + " fluid: " + StringTools.hex(this.zpp_inner.fluidGroup,8) + "~" + StringTools.hex(this.zpp_inner.fluidMask,8) + " }";
	}
	,copy: function() {
		return new nape.dynamics.InteractionFilter(this.zpp_inner.collisionGroup,this.zpp_inner.collisionMask,this.zpp_inner.sensorGroup,this.zpp_inner.sensorMask,this.zpp_inner.fluidGroup,this.zpp_inner.fluidMask);
	}
	,shouldFlow: function(filter) {
		if(filter == null) throw "Error: filter argument cannot be null for shouldFlow";
		return this.zpp_inner.shouldFlow(filter.zpp_inner);
	}
	,shouldSense: function(filter) {
		if(filter == null) throw "Error: filter argument cannot be null for shouldSense";
		return this.zpp_inner.shouldSense(filter.zpp_inner);
	}
	,shouldCollide: function(filter) {
		if(filter == null) throw "Error: filter argument cannot be null for shouldCollide";
		return this.zpp_inner.shouldCollide(filter.zpp_inner);
	}
	,set_fluidMask: function(fluidMask) {
		if(this.zpp_inner.fluidMask != fluidMask) {
			this.zpp_inner.fluidMask = fluidMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidMask;
	}
	,get_fluidMask: function() {
		return this.zpp_inner.fluidMask;
	}
	,set_fluidGroup: function(fluidGroup) {
		if(this.zpp_inner.fluidGroup != fluidGroup) {
			this.zpp_inner.fluidGroup = fluidGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.fluidGroup;
	}
	,get_fluidGroup: function() {
		return this.zpp_inner.fluidGroup;
	}
	,set_sensorMask: function(sensorMask) {
		if(this.zpp_inner.sensorMask != sensorMask) {
			this.zpp_inner.sensorMask = sensorMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorMask;
	}
	,get_sensorMask: function() {
		return this.zpp_inner.sensorMask;
	}
	,set_sensorGroup: function(sensorGroup) {
		if(this.zpp_inner.sensorGroup != sensorGroup) {
			this.zpp_inner.sensorGroup = sensorGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.sensorGroup;
	}
	,get_sensorGroup: function() {
		return this.zpp_inner.sensorGroup;
	}
	,set_collisionMask: function(collisionMask) {
		if(this.zpp_inner.collisionMask != collisionMask) {
			this.zpp_inner.collisionMask = collisionMask;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionMask;
	}
	,get_collisionMask: function() {
		return this.zpp_inner.collisionMask;
	}
	,set_collisionGroup: function(collisionGroup) {
		if(this.zpp_inner.collisionGroup != collisionGroup) {
			this.zpp_inner.collisionGroup = collisionGroup;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.collisionGroup;
	}
	,get_collisionGroup: function() {
		return this.zpp_inner.collisionGroup;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,__class__: nape.dynamics.InteractionFilter
}
nape.dynamics.InteractionGroup = function(ignore) {
	if(ignore == null) ignore = false;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.dynamics.ZPP_InteractionGroup();
	this.zpp_inner.outer = this;
	if(this.zpp_inner.ignore != ignore) {
		this.zpp_inner.invalidate(true);
		this.zpp_inner.ignore = ignore;
	}
	this.zpp_inner.ignore;
};
nape.dynamics.InteractionGroup.__name__ = ["nape","dynamics","InteractionGroup"];
nape.dynamics.InteractionGroup.prototype = {
	toString: function() {
		var ret = "InteractionGroup";
		if(this.zpp_inner.ignore) ret += ":ignore";
		return ret;
	}
	,get_groups: function() {
		if(this.zpp_inner.wrap_groups == null) this.zpp_inner.wrap_groups = zpp_nape.util.ZPP_InteractionGroupList.get(this.zpp_inner.groups,true);
		return this.zpp_inner.wrap_groups;
	}
	,get_interactors: function() {
		if(this.zpp_inner.wrap_interactors == null) this.zpp_inner.wrap_interactors = zpp_nape.util.ZPP_InteractorList.get(this.zpp_inner.interactors,true);
		return this.zpp_inner.wrap_interactors;
	}
	,set_ignore: function(ignore) {
		if(this.zpp_inner.ignore != ignore) {
			this.zpp_inner.invalidate(true);
			this.zpp_inner.ignore = ignore;
		}
		return this.zpp_inner.ignore;
	}
	,get_ignore: function() {
		return this.zpp_inner.ignore;
	}
	,set_group: function(group) {
		if(group == this) throw "Error: Cannot assign InteractionGroup to itself";
		this.zpp_inner.setGroup(group == null?null:group.zpp_inner);
		return this.zpp_inner.group == null?null:this.zpp_inner.group.outer;
	}
	,get_group: function() {
		return this.zpp_inner.group == null?null:this.zpp_inner.group.outer;
	}
	,__class__: nape.dynamics.InteractionGroup
}
nape.dynamics.InteractionGroupIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_InteractionGroupList.internal) throw "Error: Cannot instantiate " + "InteractionGroup" + "Iterator derp!";
};
nape.dynamics.InteractionGroupIterator.__name__ = ["nape","dynamics","InteractionGroupIterator"];
nape.dynamics.InteractionGroupIterator.get = function(list) {
	var ret = nape.dynamics.InteractionGroupIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_InteractionGroupList.internal = true;
		var ret1 = new nape.dynamics.InteractionGroupIterator();
		zpp_nape.util.ZPP_InteractionGroupList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.dynamics.InteractionGroupIterator.zpp_pool;
		nape.dynamics.InteractionGroupIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.dynamics.InteractionGroupIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
			nape.dynamics.InteractionGroupIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.dynamics.InteractionGroupIterator
}
nape.dynamics.InteractionGroupList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractionGroupList();
	this.zpp_inner.outer = this;
};
nape.dynamics.InteractionGroupList.__name__ = ["nape","dynamics","InteractionGroupList"];
nape.dynamics.InteractionGroupList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.dynamics.InteractionGroupList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.dynamics.InteractionGroupList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.dynamics.InteractionGroupIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.dynamics.InteractionGroupIterator.zpp_pool;
			nape.dynamics.InteractionGroupIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.dynamics.InteractionGroupIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.dynamics.InteractionGroupIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.dynamics.InteractionGroupList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.dynamics.InteractionGroupIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "InteractionGroup" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.dynamics.InteractionGroupIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "InteractionGroup" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.dynamics.InteractionGroupList
}
nape.geom = {}
nape.geom.AABB = function(x,y,width,height) {
	if(height == null) height = 0;
	if(width == null) width = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_inner = null;
	if(x != x || y != y) throw "Error: AABB position cannot be NaN";
	if(width != width || height != height) throw "Error: AABB dimensions cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_AABB.get(x,y,x + width,y + height);
	this.zpp_inner.outer = this;
};
nape.geom.AABB.__name__ = ["nape","geom","AABB"];
nape.geom.AABB.prototype = {
	toString: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,set_height: function(height) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this)) != height) {
			if(height != height) throw "Error: AABB::" + "height" + " cannot be NaN";
			if(height < 0) throw "Error: AABB::" + "height" + " (" + height + ") must be >= 0";
			this.zpp_inner.maxy = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.miny;
				return $r;
			}(this)) + height;
			this.zpp_inner.invalidate();
		}
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.height();
			return $r;
		}(this));
	}
	,get_height: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.height();
	}
	,set_width: function(width) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this)) != width) {
			if(width != width) throw "Error: AABB::" + "width" + " cannot be NaN";
			if(width < 0) throw "Error: AABB::" + "width" + " (" + width + ") must be >= 0";
			this.zpp_inner.maxx = (function($this) {
				var $r;
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.minx;
				return $r;
			}(this)) + width;
			this.zpp_inner.invalidate();
		}
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.width();
			return $r;
		}(this));
	}
	,get_width: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.width();
	}
	,set_y: function(y) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != y) {
			if(y != y) throw "Error: AABB::" + "y" + " cannot be NaN";
			this.zpp_inner.maxy += y - this.zpp_inner.miny;
			this.zpp_inner.miny = y;
			this.zpp_inner.invalidate();
		}
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this));
	}
	,get_y: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.miny;
	}
	,set_x: function(x) {
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != x) {
			if(x != x) throw "Error: AABB::" + "x" + " cannot be NaN";
			this.zpp_inner.maxx += x - this.zpp_inner.minx;
			this.zpp_inner.minx = x;
			this.zpp_inner.invalidate();
		}
		return (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this));
	}
	,get_x: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.minx;
	}
	,set_max: function(max) {
		if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if(max == null) throw "Error: Cannot assign null to AABB::" + "max";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) || (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this))) throw "Error: AABB::" + "max" + " components cannot be NaN";
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.x;
			return $r;
		}(this)) < this.zpp_inner.getmin().get_x()) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(max != null && max.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			max.zpp_inner.validate();
			$r = max.zpp_inner.y;
			return $r;
		}(this)) < this.zpp_inner.getmin().get_y()) throw "Error: Assignment would cause negative height";
		this.zpp_inner.getmax().set(max);
		return this.zpp_inner.getmax();
	}
	,get_max: function() {
		return this.zpp_inner.getmax();
	}
	,set_min: function(min) {
		if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner._immutable) throw "Error: AABB is immutable";
		if(min == null) throw "Error: Cannot assign null to AABB::" + "min";
		if((function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.minx;
			return $r;
		}(this)) || (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this)) != (function($this) {
			var $r;
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.miny;
			return $r;
		}(this))) throw "Error: AABB::" + "min" + " components cannot be NaN";
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.x;
			return $r;
		}(this)) > this.zpp_inner.getmax().get_x()) throw "Error: Assignment would cause negative width";
		if((function($this) {
			var $r;
			if(min != null && min.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			min.zpp_inner.validate();
			$r = min.zpp_inner.y;
			return $r;
		}(this)) > this.zpp_inner.getmax().get_y()) throw "Error: Assignment would cause negative height";
		this.zpp_inner.getmin().set(min);
		return this.zpp_inner.getmin();
	}
	,get_min: function() {
		return this.zpp_inner.getmin();
	}
	,copy: function() {
		this.zpp_inner.validate();
		return this.zpp_inner.copy().wrapper();
	}
	,__class__: nape.geom.AABB
}
nape.geom.ConvexResult = function() {
	this.zpp_inner = null;
	if(!zpp_nape.geom.ZPP_ConvexRayResult.internal) throw "Error: ConvexResult cannot be instantiated derp!";
};
nape.geom.ConvexResult.__name__ = ["nape","geom","ConvexResult"];
nape.geom.ConvexResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return "{ shape: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.shape;
			return $r;
		}(this))) + " toi: " + (function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.toiDistance;
			return $r;
		}(this)) + " }";
	}
	,dispose: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		this.zpp_inner.free();
	}
	,get_shape: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.shape;
	}
	,get_toi: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.toiDistance;
	}
	,get_position: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.position;
	}
	,get_normal: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.normal;
	}
	,__class__: nape.geom.ConvexResult
}
nape.geom.ConvexResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ConvexResultList.internal) throw "Error: Cannot instantiate " + "ConvexResult" + "Iterator derp!";
};
nape.geom.ConvexResultIterator.__name__ = ["nape","geom","ConvexResultIterator"];
nape.geom.ConvexResultIterator.get = function(list) {
	var ret = nape.geom.ConvexResultIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ConvexResultList.internal = true;
		var ret1 = new nape.geom.ConvexResultIterator();
		zpp_nape.util.ZPP_ConvexResultList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.ConvexResultIterator.zpp_pool;
		nape.geom.ConvexResultIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.geom.ConvexResultIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
			nape.geom.ConvexResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.geom.ConvexResultIterator
}
nape.geom.ConvexResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ConvexResultList();
	this.zpp_inner.outer = this;
};
nape.geom.ConvexResultList.__name__ = ["nape","geom","ConvexResultList"];
nape.geom.ConvexResultList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.ConvexResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.ConvexResultList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.ConvexResultIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.ConvexResultIterator.zpp_pool;
			nape.geom.ConvexResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.ConvexResultIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.geom.ConvexResultIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.ConvexResultList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.ConvexResultIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "ConvexResult" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.ConvexResultIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "ConvexResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.geom.ConvexResultList
}
nape.geom.Geom = function() { }
nape.geom.Geom.__name__ = ["nape","geom","Geom"];
nape.geom.Geom.distanceBody = function(body1,body2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw "Error: Bodies cannot be empty in calculating distances";
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite = body2.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	return zpp_nape.geom.ZPP_SweepDistance.distanceBody(body1.zpp_inner,body2.zpp_inner,out1.zpp_inner,out2.zpp_inner);
}
nape.geom.Geom.distance = function(shape1,shape2,out1,out2) {
	if(out1 != null && out1.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(out2 != null && out2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	out1.zpp_inner.immutable();
	out2.zpp_inner.immutable();
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate distances";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	var tmp;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) tmp = new zpp_nape.geom.ZPP_Vec2(); else {
		tmp = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = tmp.next;
		tmp.next = null;
	}
	tmp.weak = false;
	var ret = zpp_nape.geom.ZPP_SweepDistance.distance(shape1.zpp_inner,shape2.zpp_inner,out1.zpp_inner,out2.zpp_inner,tmp,1e100);
	var o = tmp;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return ret;
}
nape.geom.Geom.intersectsBody = function(body1,body2) {
	if(body1.zpp_inner.wrap_shapes.empty() || body2.zpp_inner.wrap_shapes.empty()) throw "Error: Bodies must have shapes to test for intersection.";
	var cx_ite = body1.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	var cx_ite = body2.zpp_inner.shapes.head;
	while(cx_ite != null) {
		var i = cx_ite.elt;
		zpp_nape.geom.ZPP_Geom.validateShape(i);
		cx_ite = cx_ite.next;
	}
	if(!body1.zpp_inner.aabb.intersect(body2.zpp_inner.aabb)) return false; else {
		var cx_ite = body1.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s1 = cx_ite.elt;
			var cx_ite1 = body2.zpp_inner.shapes.head;
			while(cx_ite1 != null) {
				var s2 = cx_ite1.elt;
				if(zpp_nape.geom.ZPP_Collide.testCollide_safe(s1,s2)) return true;
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		return false;
	}
}
nape.geom.Geom.intersects = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate intersection";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return shape1.zpp_inner.aabb.intersect(shape2.zpp_inner.aabb) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape1.zpp_inner,shape2.zpp_inner);
}
nape.geom.Geom.contains = function(shape1,shape2) {
	if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Shape must be part of a Body to calculate containment";
	zpp_nape.geom.ZPP_Geom.validateShape(shape1.zpp_inner);
	zpp_nape.geom.ZPP_Geom.validateShape(shape2.zpp_inner);
	return zpp_nape.geom.ZPP_Collide.containTest(shape1.zpp_inner,shape2.zpp_inner);
}
nape.geom.GeomPoly = function(vertices) {
	this.zpp_inner = null;
	this.zpp_pool = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_GeomPoly(this);
	if(vertices != null) {
		if(js.Boot.__instanceof(vertices,Array)) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				this.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}($this)));
					if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = $this.zpp_inner.vertices;
						obj.next = $this.zpp_inner.vertices.next;
						$this.zpp_inner.vertices.next.prev = obj;
						$this.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv = vertices;
			var $it0 = lv.iterator();
			while( $it0.hasNext() ) {
				var v = $it0.next();
				if(v == null) throw "Error: Vec2List contains null objects";
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				this.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}($this)));
					if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = $this.zpp_inner.vertices;
						obj.next = $this.zpp_inner.vertices.next;
						$this.zpp_inner.vertices.next.prev = obj;
						$this.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv = vertices;
			if(lv != null && lv.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var v = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					this.zpp_inner.vertices = (function($this) {
						var $r;
						var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
							var $r;
							if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}($this)),(function($this) {
							var $r;
							if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}($this)));
						if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
							obj.prev = $this.zpp_inner.vertices;
							obj.next = $this.zpp_inner.vertices.next;
							$this.zpp_inner.vertices.next.prev = obj;
							$this.zpp_inner.vertices.next = obj;
						}
						$r = obj;
						return $r;
					}(this));
					v.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
		this.skipForward(1);
		if(js.Boot.__instanceof(vertices,Array)) {
			var lv = vertices;
			var i = 0;
			while(i < lv.length) {
				var cur = lv[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv = vertices;
			if(lv.zpp_inner._validate != null) lv.zpp_inner._validate();
			var ins = lv.zpp_inner.inner;
			var pre = null;
			var cur = ins.head;
			while(cur != null) {
				var x = cur.elt;
				if(x.outer.zpp_inner.weak) {
					cur = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur;
					cur = cur.next;
				}
			}
		}
	}
};
nape.geom.GeomPoly.__name__ = ["nape","geom","GeomPoly"];
nape.geom.GeomPoly.get = function(vertices) {
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolGeomPoly == null) ret = new nape.geom.GeomPoly(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolGeomPoly;
		zpp_nape.util.ZPP_PubPool.poolGeomPoly = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextGeomPoly) zpp_nape.util.ZPP_PubPool.nextGeomPoly = null;
	}
	if(vertices != null) {
		if(js.Boot.__instanceof(vertices,Array)) {
			var lv = vertices;
			var _g = 0;
			while(_g < lv.length) {
				var vite = lv[_g];
				++_g;
				if(vite == null) throw "Error: Array<Vec2> contains null objects";
				if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
				var v = vite;
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				ret.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}($this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = ret.zpp_inner.vertices;
						obj.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj;
						ret.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv = vertices;
			var $it0 = lv.iterator();
			while( $it0.hasNext() ) {
				var v = $it0.next();
				if(v == null) throw "Error: Vec2List contains null objects";
				if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				ret.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						v.zpp_inner.validate();
						$r = v.zpp_inner.y;
						return $r;
					}($this)));
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = ret.zpp_inner.vertices;
						obj.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj;
						ret.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.GeomPoly)) {
			var lv = vertices;
			if(lv != null && lv.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			var verts = lv.zpp_inner.vertices;
			if(verts != null) {
				var vite = verts;
				do {
					var v = nape.geom.Vec2.get(vite.x,vite.y,null);
					vite = vite.next;
					ret.zpp_inner.vertices = (function($this) {
						var $r;
						var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
							var $r;
							if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
							v.zpp_inner.validate();
							$r = v.zpp_inner.x;
							return $r;
						}($this)),(function($this) {
							var $r;
							if(v != null && v.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
							v.zpp_inner.validate();
							$r = v.zpp_inner.y;
							return $r;
						}($this)));
						if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
							obj.prev = ret.zpp_inner.vertices;
							obj.next = ret.zpp_inner.vertices.next;
							ret.zpp_inner.vertices.next.prev = obj;
							ret.zpp_inner.vertices.next = obj;
						}
						$r = obj;
						return $r;
					}(this));
					v.dispose();
				} while(vite != verts);
			}
		} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
		ret.skipForward(1);
		if(js.Boot.__instanceof(vertices,Array)) {
			var lv = vertices;
			var i = 0;
			while(i < lv.length) {
				var cur = lv[i];
				if(cur.zpp_inner.weak?(function($this) {
					var $r;
					cur.dispose();
					$r = true;
					return $r;
				}(this)):false) {
					lv.splice(i,1);
					continue;
				}
				i++;
			}
		} else if(js.Boot.__instanceof(vertices,nape.geom.Vec2List)) {
			var lv = vertices;
			if(lv.zpp_inner._validate != null) lv.zpp_inner._validate();
			var ins = lv.zpp_inner.inner;
			var pre = null;
			var cur = ins.head;
			while(cur != null) {
				var x = cur.elt;
				if(x.outer.zpp_inner.weak) {
					cur = ins.erase(pre);
					if(x.outer.zpp_inner.weak) {
						x.outer.dispose();
						true;
					} else false;
				} else {
					pre = cur;
					cur = cur.next;
				}
			}
		}
	}
	return ret;
}
nape.geom.GeomPoly.prototype = {
	right: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable rightmmost vertex";
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x > max.x) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		return (function($this) {
			var $r;
			if(max.wrap == null) {
				max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
				max.wrap.zpp_inner._inuse = true;
				max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
				max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
			}
			$r = max.wrap;
			return $r;
		}(this));
	}
	,left: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable leftmost vertex";
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < min.x) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		return (function($this) {
			var $r;
			if(min.wrap == null) {
				min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
				min.wrap.zpp_inner._inuse = true;
				min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
				min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
			}
			$r = min.wrap;
			return $r;
		}(this));
	}
	,bottom: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable bottommost vertex";
		var max = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y > max.y) max = v;
				nite = nite.next;
			} while(nite != L);
		}
		return (function($this) {
			var $r;
			if(max.wrap == null) {
				max.wrap = nape.geom.Vec2.get(max.x,max.y,null);
				max.wrap.zpp_inner._inuse = true;
				max.wrap.zpp_inner._invalidate = $bind(max,max.modwrap);
				max.wrap.zpp_inner._validate = $bind(max,max.getwrap);
			}
			$r = max.wrap;
			return $r;
		}(this));
	}
	,top: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable topmost vertex";
		var min = this.zpp_inner.vertices;
		var F = this.zpp_inner.vertices.next;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.y < min.y) min = v;
				nite = nite.next;
			} while(nite != L);
		}
		return (function($this) {
			var $r;
			if(min.wrap == null) {
				min.wrap = nape.geom.Vec2.get(min.x,min.y,null);
				min.wrap.zpp_inner._inuse = true;
				min.wrap.zpp_inner._invalidate = $bind(min,min.modwrap);
				min.wrap.zpp_inner._validate = $bind(min,min.getwrap);
			}
			$r = min.wrap;
			return $r;
		}(this));
	}
	,bounds: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: empty GeomPoly has no defineable bounds";
		var minx = 1e100;
		var miny = 1e100;
		var maxx = -1e+100;
		var maxy = -1e+100;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v.x < minx) minx = v.x;
				if(v.y < miny) miny = v.y;
				if(v.x > maxx) maxx = v.x;
				if(v.y > maxy) maxy = v.y;
				nite = nite.next;
			} while(nite != L);
		}
		return new nape.geom.AABB(minx,miny,maxx - minx,maxy - miny);
	}
	,transform: function(matrix) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(matrix == null) throw "Error: Cannot transform by null matrix";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				var t = matrix.zpp_inner.a * v.x + matrix.zpp_inner.b * v.y + matrix.zpp_inner.tx;
				v.y = matrix.zpp_inner.c * v.x + matrix.zpp_inner.d * v.y + matrix.zpp_inner.ty;
				v.x = t;
				nite = nite.next;
			} while(nite != L);
		}
		return this;
	}
	,cut: function(start,end,boundedStart,boundedEnd,output) {
		if(boundedEnd == null) boundedEnd = false;
		if(boundedStart == null) boundedStart = false;
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(!(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null || $this.zpp_inner.vertices.next == null || $this.zpp_inner.vertices.prev == $this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Simple.isSimple($this.zpp_inner.vertices);
			return $r;
		}(this))) throw "Error: Cut requires a truly simple polygon";
		if(start == null || end == null) throw "Error: Cannot cut with null start/end's";
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		var ret = zpp_nape.geom.ZPP_Cutter.run(this.zpp_inner.vertices,start,end,boundedStart,boundedEnd,output);
		if(start.zpp_inner.weak) {
			start.dispose();
			true;
		} else false;
		if(end.zpp_inner.weak) {
			end.dispose();
			true;
		} else false;
		return ret;
	}
	,inflate: function(inflation) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var ret = nape.geom.GeomPoly.get();
		if(this.winding() == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) inflation = -inflation;
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				var prev = p.prev;
				var next = p.next;
				var ax = 0.0;
				var ay = 0.0;
				var bx = 0.0;
				var by = 0.0;
				ax = p.x - prev.x;
				ay = p.y - prev.y;
				bx = next.x - p.x;
				by = next.y - p.y;
				var apx = 0.0;
				var apy = 0.0;
				var bpx = 0.0;
				var bpy = 0.0;
				apx = ax;
				apy = ay;
				var d = apx * apx + apy * apy;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				apx *= t;
				apy *= t;
				var t = apx;
				apx = -apy;
				apy = t;
				var t = inflation;
				apx *= t;
				apy *= t;
				bpx = bx;
				bpy = by;
				var d = bpx * bpx + bpy * bpy;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				bpx *= t;
				bpy *= t;
				var t = bpx;
				bpx = -bpy;
				bpy = t;
				var t = inflation;
				bpx *= t;
				bpy *= t;
				var bapx = 0.0;
				var bapy = 0.0;
				bapx = bpx - apx;
				bapy = bpy - apy;
				var num = by * bapx - bx * bapy;
				var t = num == 0?0:num / (by * ax - bx * ay);
				var px = 0.0;
				var py = 0.0;
				px = p.x + apx;
				py = p.y + apy;
				var t1 = t;
				px += ax * t1;
				py += ay * t1;
				ret.push(nape.geom.Vec2.get(px,py,null));
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,triangularDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret = output == null?new nape.geom.GeomPolyList():output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_nape.geom.ZPP_Triangular.triangulate(MP);
			if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
				$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape.geom.GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,convexDecomposition: function(delaunay,output) {
		if(delaunay == null) delaunay = false;
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract_partitions((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
			return $r;
		}(this)));
		var ret = output == null?new nape.geom.GeomPolyList():output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			zpp_nape.geom.ZPP_Triangular.triangulate(MP);
			if(delaunay) zpp_nape.geom.ZPP_Triangular.optimise(MP);
			zpp_nape.geom.ZPP_Convex.optimise(MP);
			var MQs = MP.extract((function($this) {
				var $r;
				if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
				$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
				return $r;
			}(this)));
			var o = MP;
			o.next = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = o;
			while(!(MQs.head == null)) {
				var MQ = MQs.pop_unsafe();
				var x = nape.geom.GeomPoly.get();
				x.zpp_inner.vertices = MQ;
				if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
			}
		}
		return ret;
	}
	,monotoneDecomposition: function(output) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var poly = zpp_nape.geom.ZPP_Monotone.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
			$r = zpp_nape.geom.ZPP_Monotone.sharedPPoly;
			return $r;
		}(this)));
		var MPs = poly.extract((function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret = output == null?new nape.geom.GeomPolyList():output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,simpleDecomposition: function(output) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) throw "Error: Cannot decompose a degenerate polygon";
		var MPs = zpp_nape.geom.ZPP_Simple.decompose(this.zpp_inner.vertices,(function($this) {
			var $r;
			if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
			$r = zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
			return $r;
		}(this)));
		var ret = output == null?new nape.geom.GeomPolyList():output;
		while(!(MPs.head == null)) {
			var MP = MPs.pop_unsafe();
			var x = nape.geom.GeomPoly.get();
			x.zpp_inner.vertices = MP;
			if(ret.zpp_inner.reverse_flag) ret.push(x); else ret.unshift(x);
		}
		return ret;
	}
	,simplify: function(epsilon) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(epsilon <= 0.0) throw "Error: Epsilon should be > 0 for simplifying a GeomPoly";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return this.copy(); else {
			var x = zpp_nape.geom.ZPP_Simplify.simplify(this.zpp_inner.vertices,epsilon);
			var ret = nape.geom.GeomPoly.get();
			ret.zpp_inner.vertices = x;
			return ret;
		}
	}
	,isDegenerate: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:this.area() < nape.Config.epsilon;
	}
	,isMonotone: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Monotone.isMonotone(this.zpp_inner.vertices);
	}
	,isSimple: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:zpp_nape.geom.ZPP_Simple.isSimple(this.zpp_inner.vertices);
	}
	,isConvex: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?true:(function($this) {
			var $r;
			var neg = false;
			var pos = false;
			var ret = true;
			{
				var F = $this.zpp_inner.vertices;
				var L = $this.zpp_inner.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						var u = v.prev;
						var w = v.next;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > 0.0) pos = true; else if(dot < 0.0) neg = true;
						if(pos && neg) {
							ret = false;
							break;
						}
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,isClockwise: function() {
		return this.winding() == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this));
	}
	,contains: function(point) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: GeomPoly::contains point cannot be null";
		var ret = (function($this) {
			var $r;
			var x = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				point.zpp_inner.validate();
				$r = point.zpp_inner.x;
				return $r;
			}($this));
			var y = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				point.zpp_inner.validate();
				$r = point.zpp_inner.y;
				return $r;
			}($this));
			var ret1 = false;
			{
				var F = $this.zpp_inner.vertices;
				var L = $this.zpp_inner.vertices;
				if(F != null) {
					var nite = F;
					do {
						var p = nite;
						var q = p.prev;
						if((p.y < y && q.y >= y || q.y < y && p.y >= y) && (p.x <= x || q.x <= x)) {
							if(p.x + (y - p.y) / (q.y - p.y) * (q.x - p.x) < x) ret1 = !ret1;
						}
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = ret1;
			return $r;
		}(this));
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,winding: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next) return (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			return $r;
		}(this)); else {
			var area = (function($this) {
				var $r;
				var area1 = 0.0;
				{
					var F = $this.zpp_inner.vertices;
					var L = $this.zpp_inner.vertices;
					if(F != null) {
						var nite = F;
						do {
							var v = nite;
							area1 += v.x * (v.next.y - v.prev.y);
							nite = nite.next;
						} while(nite != L);
					}
				}
				$r = area1 * 0.5;
				return $r;
			}(this));
			return area > 0?(function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
				return $r;
			}(this)):area == 0?(function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
				return $r;
			}(this)):(function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
				return $r;
			}(this));
		}
	}
	,area: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null || this.zpp_inner.vertices.next == null || this.zpp_inner.vertices.prev == this.zpp_inner.vertices.next?0.0:(function($this) {
			var $r;
			var ret = (function($this) {
				var $r;
				var area = 0.0;
				{
					var F = $this.zpp_inner.vertices;
					var L = $this.zpp_inner.vertices;
					if(F != null) {
						var nite = F;
						do {
							var v = nite;
							area += v.x * (v.next.y - v.prev.y);
							nite = nite.next;
						} while(nite != L);
					}
				}
				$r = area * 0.5;
				return $r;
			}($this));
			$r = ret < 0?-ret:ret;
			return $r;
		}(this));
	}
	,toString: function() {
		var ret = "GeomPoly[";
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				if(v != this.zpp_inner.vertices) ret += ",";
				ret += "{" + v.x + "," + v.y + "}";
				nite = nite.next;
			} while(nite != L);
		}
		return ret + "]";
	}
	,dispose: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		this.clear();
		var o = this;
		o.zpp_pool = null;
		if(zpp_nape.util.ZPP_PubPool.nextGeomPoly != null) zpp_nape.util.ZPP_PubPool.nextGeomPoly.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolGeomPoly = o;
		zpp_nape.util.ZPP_PubPool.nextGeomPoly = o;
		o.zpp_disp = true;
	}
	,copy: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var ret = nape.geom.GeomPoly.get();
		var F = this.zpp_inner.vertices;
		var L = this.zpp_inner.vertices;
		if(F != null) {
			var nite = F;
			do {
				var v = nite;
				ret.zpp_inner.vertices = (function($this) {
					var $r;
					var obj = zpp_nape.geom.ZPP_GeomVert.get(v.x,v.y);
					if(ret.zpp_inner.vertices == null) ret.zpp_inner.vertices = obj.prev = obj.next = obj; else {
						obj.prev = ret.zpp_inner.vertices;
						obj.next = ret.zpp_inner.vertices.next;
						ret.zpp_inner.vertices.next.prev = obj;
						ret.zpp_inner.vertices.next = obj;
					}
					$r = obj;
					return $r;
				}(this));
				nite = nite.next;
			} while(nite != L);
		}
		return ret.skipForward(1);
	}
	,clear: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		while(!(this.zpp_inner.vertices == null)) {
			var tmp = this.zpp_inner.vertices;
			this.zpp_inner.vertices = this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices?(function($this) {
				var $r;
				$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
				$r = $this.zpp_inner.vertices = null;
				return $r;
			}(this)):(function($this) {
				var $r;
				var retnodes = $this.zpp_inner.vertices.next;
				$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
				$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
				$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
				$this.zpp_inner.vertices = null;
				$r = retnodes;
				return $r;
			}(this));
			var o = tmp;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		}
		return this;
	}
	,erase: function(count) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		while(count != 0 && !(this.zpp_inner.vertices == null)) {
			var retv = this.zpp_inner.vertices;
			if(count > 0) {
				this.zpp_inner.vertices = this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices?(function($this) {
					var $r;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					$r = $this.zpp_inner.vertices = null;
					return $r;
				}(this)):(function($this) {
					var $r;
					var retnodes = $this.zpp_inner.vertices.next;
					$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
					$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					$this.zpp_inner.vertices = null;
					$r = retnodes;
					return $r;
				}(this));
				count--;
			} else if(count < 0) {
				this.zpp_inner.vertices = this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices?(function($this) {
					var $r;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					$r = null;
					return $r;
				}(this)):(function($this) {
					var $r;
					var retnodes = $this.zpp_inner.vertices.prev;
					$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
					$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
					$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
					$this.zpp_inner.vertices = null;
					$r = retnodes;
					return $r;
				}(this));
				count++;
			}
			var o = retv;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		}
		return this;
	}
	,skipBackwards: function(times) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.skipForward(-times);
	}
	,skipForward: function(times) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(!(this.zpp_inner.vertices == null)) {
			if(times > 0) while(times-- > 0) this.zpp_inner.vertices = this.zpp_inner.vertices.next; else if(times < 0) while(times++ < 0) this.zpp_inner.vertices = this.zpp_inner.vertices.prev;
		}
		return this;
	}
	,shift: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null) throw "Error: Cannot shift from empty polygon";
		var retv = this.zpp_inner.vertices;
		this.zpp_inner.vertices = this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices?(function($this) {
			var $r;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			$r = $this.zpp_inner.vertices = null;
			return $r;
		}(this)):(function($this) {
			var $r;
			var retnodes = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			$this.zpp_inner.vertices = null;
			$r = retnodes;
			return $r;
		}(this));
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		return this;
	}
	,unshift: function(vertex) {
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vertex == null) throw "Error: Cannot unshift null vertex";
		this.zpp_inner.vertices = (function($this) {
			var $r;
			var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
				var $r;
				if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				vertex.zpp_inner.validate();
				$r = vertex.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				vertex.zpp_inner.validate();
				$r = vertex.zpp_inner.y;
				return $r;
			}($this)));
			if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
				obj.next = $this.zpp_inner.vertices;
				obj.prev = $this.zpp_inner.vertices.prev;
				$this.zpp_inner.vertices.prev.next = obj;
				$this.zpp_inner.vertices.prev = obj;
			}
			$r = obj;
			return $r;
		}(this));
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,pop: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(this.zpp_inner.vertices == null) throw "Error: Cannot pop from empty polygon";
		var retv = this.zpp_inner.vertices;
		this.zpp_inner.vertices = this.zpp_inner.vertices != null && this.zpp_inner.vertices.prev == this.zpp_inner.vertices?(function($this) {
			var $r;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			$r = null;
			return $r;
		}(this)):(function($this) {
			var $r;
			var retnodes = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.prev.next = $this.zpp_inner.vertices.next;
			$this.zpp_inner.vertices.next.prev = $this.zpp_inner.vertices.prev;
			$this.zpp_inner.vertices.next = $this.zpp_inner.vertices.prev = null;
			$this.zpp_inner.vertices = null;
			$r = retnodes;
			return $r;
		}(this));
		var o = retv;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		return this;
	}
	,push: function(vertex) {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vertex == null) throw "Error: Cannot push null vertex";
		this.zpp_inner.vertices = (function($this) {
			var $r;
			var obj = zpp_nape.geom.ZPP_GeomVert.get((function($this) {
				var $r;
				if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				vertex.zpp_inner.validate();
				$r = vertex.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if(vertex != null && vertex.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				vertex.zpp_inner.validate();
				$r = vertex.zpp_inner.y;
				return $r;
			}($this)));
			if($this.zpp_inner.vertices == null) $this.zpp_inner.vertices = obj.prev = obj.next = obj; else {
				obj.prev = $this.zpp_inner.vertices;
				obj.next = $this.zpp_inner.vertices.next;
				$this.zpp_inner.vertices.next.prev = obj;
				$this.zpp_inner.vertices.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		if(vertex.zpp_inner.weak) {
			vertex.dispose();
			true;
		} else false;
		return this;
	}
	,current: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
			$r = $this.zpp_inner.vertices == null;
			return $r;
		}(this))) throw "Error: GeomPoly is empty";
		return this.zpp_inner.vertices.wrapper();
	}
	,backwardsIterator: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,false);
	}
	,forwardIterator: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,iterator: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return zpp_nape.geom.ZPP_GeomVertexIterator.get(this.zpp_inner.vertices,true);
	}
	,size: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return (function($this) {
			var $r;
			var ret = 0;
			{
				var F = $this.zpp_inner.vertices;
				var L = $this.zpp_inner.vertices;
				if(F != null) {
					var nite = F;
					do {
						var i = nite;
						ret++;
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,empty: function() {
		if(this.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		return this.zpp_inner.vertices == null;
	}
	,__class__: nape.geom.GeomPoly
}
nape.geom.GeomPolyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_GeomPolyList.internal) throw "Error: Cannot instantiate " + "GeomPoly" + "Iterator derp!";
};
nape.geom.GeomPolyIterator.__name__ = ["nape","geom","GeomPolyIterator"];
nape.geom.GeomPolyIterator.get = function(list) {
	var ret = nape.geom.GeomPolyIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_GeomPolyList.internal = true;
		var ret1 = new nape.geom.GeomPolyIterator();
		zpp_nape.util.ZPP_GeomPolyList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.GeomPolyIterator.zpp_pool;
		nape.geom.GeomPolyIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.geom.GeomPolyIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
			nape.geom.GeomPolyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.geom.GeomPolyIterator
}
nape.geom.GeomPolyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_GeomPolyList();
	this.zpp_inner.outer = this;
};
nape.geom.GeomPolyList.__name__ = ["nape","geom","GeomPolyList"];
nape.geom.GeomPolyList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.GeomPolyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.GeomPolyList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.GeomPolyIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.GeomPolyIterator.zpp_pool;
			nape.geom.GeomPolyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.GeomPolyIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.geom.GeomPolyIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.GeomPolyList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.GeomPolyIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "GeomPoly" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.GeomPolyIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "GeomPoly" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.geom.GeomPolyList
}
nape.geom.GeomVertexIterator = function() {
	if(!zpp_nape.geom.ZPP_GeomVertexIterator.internal) throw "Error: Cannot instantiate GeomVertexIterator";
};
nape.geom.GeomVertexIterator.__name__ = ["nape","geom","GeomVertexIterator"];
nape.geom.GeomVertexIterator.prototype = {
	next: function() {
		if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
		var ret = this.zpp_inner.ptr.wrapper();
		this.zpp_inner.ptr = this.zpp_inner.forward?this.zpp_inner.ptr.next:this.zpp_inner.ptr.prev;
		return ret;
	}
	,hasNext: function() {
		if(this.zpp_inner == null) throw "Error: Iterator has been disposed";
		var ret = this.zpp_inner.ptr != this.zpp_inner.start || this.zpp_inner.first;
		this.zpp_inner.first = false;
		if(!ret) {
			var o = this.zpp_inner;
			o.outer.zpp_inner = null;
			o.ptr = o.start = null;
			o.next = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
			zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = o;
		}
		return ret;
	}
	,__class__: nape.geom.GeomVertexIterator
}
nape.geom.MarchingSquares = function() { }
nape.geom.MarchingSquares.__name__ = ["nape","geom","MarchingSquares"];
nape.geom.MarchingSquares.run = function(iso,bounds,cellsize,quality,subgrid,combine,output) {
	if(combine == null) combine = true;
	if(quality == null) quality = 2;
	if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(iso == null) throw "Error: MarchingSquares requires an iso function to operate";
	if(bounds == null) throw "Error: MarchingSquares requires an AABB to define bounds of surface extraction";
	if(cellsize == null) throw "Error: MarchingSquares requires a Vec2 to define cell size for surface extraction";
	if((function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(cellsize != null && cellsize.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cellsize.zpp_inner.validate();
		$r = cellsize.zpp_inner.y;
		return $r;
	}(this)) <= 0) throw "Error: MarchingSquares cannot operate with non-positive cell dimensions";
	if(quality < 0) throw "Error: MarchingSquares cannot use a negative quality value for interpolation";
	if(subgrid != null && ((function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.x;
		return $r;
	}(this)) <= 0 || (function($this) {
		var $r;
		if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		subgrid.zpp_inner.validate();
		$r = subgrid.zpp_inner.y;
		return $r;
	}(this)) <= 0)) throw "Error: MarchingSquares cannot with non-positive sub-grid dimensions";
	var ret = output != null?output:new nape.geom.GeomPolyList();
	if(subgrid == null) zpp_nape.geom.ZPP_MarchingSquares.run(iso,(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.minx;
		return $r;
	}(this)),(function($this) {
		var $r;
		bounds.zpp_inner.validate();
		$r = bounds.zpp_inner.miny;
		return $r;
	}(this)),bounds.zpp_inner.getmax().get_x(),bounds.zpp_inner.getmax().get_y(),cellsize,quality,combine,ret); else {
		var xp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.width();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.x;
			return $r;
		}(this));
		var yp = (function($this) {
			var $r;
			bounds.zpp_inner.validate();
			$r = bounds.zpp_inner.height();
			return $r;
		}(this)) / (function($this) {
			var $r;
			if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			subgrid.zpp_inner.validate();
			$r = subgrid.zpp_inner.y;
			return $r;
		}(this));
		var xn = xp | 0;
		var yn = yp | 0;
		if(xn != xp) xn++;
		if(yn != yp) yn++;
		var _g = 0;
		while(_g < xn) {
			var x = _g++;
			var x0 = (function($this) {
				var $r;
				bounds.zpp_inner.validate();
				$r = bounds.zpp_inner.minx;
				return $r;
			}(this)) + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this)) * x;
			var x1 = x == xn - 1?bounds.zpp_inner.getmax().get_x():x0 + (function($this) {
				var $r;
				if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				subgrid.zpp_inner.validate();
				$r = subgrid.zpp_inner.x;
				return $r;
			}(this));
			var _g1 = 0;
			while(_g1 < yn) {
				var y = _g1++;
				var y0 = (function($this) {
					var $r;
					bounds.zpp_inner.validate();
					$r = bounds.zpp_inner.miny;
					return $r;
				}(this)) + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this)) * y;
				var y1 = y == yn - 1?bounds.zpp_inner.getmax().get_y():y0 + (function($this) {
					var $r;
					if(subgrid != null && subgrid.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					subgrid.zpp_inner.validate();
					$r = subgrid.zpp_inner.y;
					return $r;
				}(this));
				zpp_nape.geom.ZPP_MarchingSquares.run(iso,x0,y0,x1,y1,cellsize,quality,combine,ret);
			}
		}
	}
	if(cellsize.zpp_inner.weak) {
		cellsize.dispose();
		true;
	} else false;
	if(subgrid != null) {
		if(subgrid.zpp_inner.weak) {
			subgrid.dispose();
			true;
		} else false;
	}
	return ret;
}
nape.geom.Mat23 = function(a,b,c,d,tx,ty) {
	if(ty == null) ty = 0.0;
	if(tx == null) tx = 0.0;
	if(d == null) d = 1.0;
	if(c == null) c = 0.0;
	if(b == null) b = 0.0;
	if(a == null) a = 1.0;
	this.zpp_inner = null;
	this.zpp_inner = zpp_nape.geom.ZPP_Mat23.get();
	this.zpp_inner.outer = this;
	if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
	this.zpp_inner.a = a;
	this.zpp_inner.invalidate();
	this.zpp_inner.a;
	if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
	this.zpp_inner.b = b;
	this.zpp_inner.invalidate();
	this.zpp_inner.b;
	if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
	this.zpp_inner.tx = tx;
	this.zpp_inner.invalidate();
	this.zpp_inner.tx;
	if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
	this.zpp_inner.c = c;
	this.zpp_inner.invalidate();
	this.zpp_inner.c;
	if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
	this.zpp_inner.d = d;
	this.zpp_inner.invalidate();
	this.zpp_inner.d;
	if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
	this.zpp_inner.ty = ty;
	this.zpp_inner.invalidate();
	this.zpp_inner.ty;
};
nape.geom.Mat23.__name__ = ["nape","geom","Mat23"];
nape.geom.Mat23.rotation = function(angle) {
	if(angle != angle) throw "Error: Cannot create rotation matrix with NaN angle";
	var cos = Math.cos(angle);
	var sin = Math.sin(angle);
	return new nape.geom.Mat23(cos,-sin,sin,cos,0,0);
}
nape.geom.Mat23.translation = function(tx,ty) {
	return new nape.geom.Mat23(1,0,0,1,tx,ty);
}
nape.geom.Mat23.scale = function(sx,sy) {
	return new nape.geom.Mat23(sx,0,0,sy,0,0);
}
nape.geom.Mat23.prototype = {
	orthogonalise: function() {
		if(!this.orthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			if(k1 * k1 < nape.Config.epsilon || k2 * k2 < nape.Config.epsilon) throw "Error: Matrix is singular and cannot be " + "orthogonal" + "ised";
			var k = 1;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.set_a(_g.zpp_inner.a * k1);
			var _g = this;
			_g.set_c(_g.zpp_inner.c * k1);
			var _g = this;
			_g.set_b(_g.zpp_inner.b * k2);
			var _g = this;
			_g.set_d(_g.zpp_inner.d * k2);
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
			if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
			if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,equiorthogonalise: function() {
		if(!this.equiorthogonal()) {
			var k1 = Math.sqrt(this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.c * this.zpp_inner.c);
			var k2 = Math.sqrt(this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.d * this.zpp_inner.d);
			if(k1 * k1 < nape.Config.epsilon || k2 * k2 < nape.Config.epsilon) throw "Error: Matrix is singular and cannot be " + "equiorthogonal" + "ised";
			var k = (k1 + k2) / 2;
			k1 = k / k1;
			k2 = k / k2;
			var _g = this;
			_g.set_a(_g.zpp_inner.a * k1);
			var _g = this;
			_g.set_c(_g.zpp_inner.c * k1);
			var _g = this;
			_g.set_b(_g.zpp_inner.b * k2);
			var _g = this;
			_g.set_d(_g.zpp_inner.d * k2);
			var dot = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			var ang = 0.25 * Math.PI - 0.5 * Math.acos(dot / (k * k));
			if(this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c > 0) ang = -ang;
			var sin = Math.sin(ang);
			var cos = Math.cos(ang);
			var a2 = this.zpp_inner.a * cos - this.zpp_inner.c * sin;
			var b2 = this.zpp_inner.b * cos + this.zpp_inner.d * sin;
			this.set_c(this.zpp_inner.c * cos + this.zpp_inner.a * sin);
			if(a2 != a2) throw "Error: Mat23::" + "a" + " cannot be NaN";
			this.zpp_inner.a = a2;
			this.zpp_inner.invalidate();
			this.zpp_inner.a;
			this.set_d(this.zpp_inner.d * cos - this.zpp_inner.b * sin);
			if(b2 != b2) throw "Error: Mat23::" + "b" + " cannot be NaN";
			this.zpp_inner.b = b2;
			this.zpp_inner.invalidate();
			this.zpp_inner.b;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,orthogonal: function() {
		var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
		if(x * x < nape.Config.epsilon) {
			var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - 1;
			var z = this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d - 1;
			return y * y < nape.Config.epsilon && z * z < nape.Config.epsilon;
		} else return false;
	}
	,equiorthogonal: function() {
		if(this.singular()) return false; else {
			var x = this.zpp_inner.a * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.d;
			if(x * x < nape.Config.epsilon) {
				var y = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b - this.zpp_inner.c * this.zpp_inner.c - this.zpp_inner.d * this.zpp_inner.d;
				return y * y < nape.Config.epsilon;
			} else return false;
		}
	}
	,toString: function() {
		return "{ a: " + this.zpp_inner.a + " b: " + this.zpp_inner.b + " c: " + this.zpp_inner.c + " d: " + this.zpp_inner.d + " tx: " + this.zpp_inner.tx + " ty: " + this.zpp_inner.ty + " }";
	}
	,inverseTransform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		if(this.singular()) throw "Error: Matrix is singular and inverse transformation cannot be performed";
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		var ret;
		if(noTranslation) ret = nape.geom.Vec2.get(((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.d - (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b) * idet,((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.a - (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c) * idet,weak); else {
			var dx = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				point.zpp_inner.validate();
				$r = point.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.tx;
			var dy = (function($this) {
				var $r;
				if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				point.zpp_inner.validate();
				$r = point.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.ty;
			ret = nape.geom.Vec2.get((dx * this.zpp_inner.d - dy * this.zpp_inner.b) * idet,(dy * this.zpp_inner.a - dx * this.zpp_inner.c) * idet,weak);
		}
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,transform: function(point,noTranslation,weak) {
		if(weak == null) weak = false;
		if(noTranslation == null) noTranslation = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		var ret;
		if(noTranslation) ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b,(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d,weak); else ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.a + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.b + this.zpp_inner.tx,(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.c + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.d + this.zpp_inner.ty,weak);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,concat: function(matrix) {
		var m = matrix;
		if(m == null) throw "Error: Cannot concatenate with null Mat23";
		return new nape.geom.Mat23(m.zpp_inner.a * this.zpp_inner.a + m.zpp_inner.b * this.zpp_inner.c,m.zpp_inner.a * this.zpp_inner.b + m.zpp_inner.b * this.zpp_inner.d,m.zpp_inner.c * this.zpp_inner.a + m.zpp_inner.d * this.zpp_inner.c,m.zpp_inner.c * this.zpp_inner.b + m.zpp_inner.d * this.zpp_inner.d,m.zpp_inner.a * this.zpp_inner.tx + m.zpp_inner.b * this.zpp_inner.ty + m.zpp_inner.tx,m.zpp_inner.c * this.zpp_inner.tx + m.zpp_inner.d * this.zpp_inner.ty + m.zpp_inner.ty);
	}
	,transpose: function() {
		return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.c,this.zpp_inner.b,this.zpp_inner.d,-this.zpp_inner.a * this.zpp_inner.tx - this.zpp_inner.c * this.zpp_inner.ty,-this.zpp_inner.b * this.zpp_inner.tx - this.zpp_inner.d * this.zpp_inner.ty);
	}
	,inverse: function() {
		if(this.singular()) throw "Error: Matrix is singular and cannot be inverted";
		var idet = 1.0 / (this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c);
		return new nape.geom.Mat23(this.zpp_inner.d * idet,-this.zpp_inner.b * idet,-this.zpp_inner.c * idet,this.zpp_inner.a * idet,(this.zpp_inner.b * this.zpp_inner.ty - this.zpp_inner.d * this.zpp_inner.tx) * idet,(this.zpp_inner.c * this.zpp_inner.tx - this.zpp_inner.a * this.zpp_inner.ty) * idet);
	}
	,singular: function() {
		var norm = this.zpp_inner.a * this.zpp_inner.a + this.zpp_inner.b * this.zpp_inner.b + this.zpp_inner.c * this.zpp_inner.c + this.zpp_inner.d * this.zpp_inner.d;
		var limit = this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
		if(limit < 0) limit = -limit;
		return norm > nape.Config.illConditionedThreshold * limit;
	}
	,get_determinant: function() {
		return this.zpp_inner.a * this.zpp_inner.d - this.zpp_inner.b * this.zpp_inner.c;
	}
	,reset: function() {
		return this.setAs();
	}
	,setAs: function(a,b,c,d,tx,ty) {
		if(ty == null) ty = 0.0;
		if(tx == null) tx = 0.0;
		if(d == null) d = 1.0;
		if(c == null) c = 0.0;
		if(b == null) b = 0.0;
		if(a == null) a = 1.0;
		this.zpp_inner.setas(a,b,c,d,tx,ty);
		this.zpp_inner.invalidate();
		return this;
	}
	,set: function(matrix) {
		if(matrix == null) throw "Error: Cannot set form null matrix";
		this.zpp_inner.set(matrix.zpp_inner);
		this.zpp_inner.invalidate();
		return this;
	}
	,copy: function() {
		return new nape.geom.Mat23(this.zpp_inner.a,this.zpp_inner.b,this.zpp_inner.c,this.zpp_inner.d,this.zpp_inner.tx,this.zpp_inner.ty);
	}
	,set_ty: function(ty) {
		if(ty != ty) throw "Error: Mat23::" + "ty" + " cannot be NaN";
		this.zpp_inner.ty = ty;
		this.zpp_inner.invalidate();
		return this.zpp_inner.ty;
	}
	,get_ty: function() {
		return this.zpp_inner.ty;
	}
	,set_tx: function(tx) {
		if(tx != tx) throw "Error: Mat23::" + "tx" + " cannot be NaN";
		this.zpp_inner.tx = tx;
		this.zpp_inner.invalidate();
		return this.zpp_inner.tx;
	}
	,get_tx: function() {
		return this.zpp_inner.tx;
	}
	,set_d: function(d) {
		if(d != d) throw "Error: Mat23::" + "d" + " cannot be NaN";
		this.zpp_inner.d = d;
		this.zpp_inner.invalidate();
		return this.zpp_inner.d;
	}
	,get_d: function() {
		return this.zpp_inner.d;
	}
	,set_c: function(c) {
		if(c != c) throw "Error: Mat23::" + "c" + " cannot be NaN";
		this.zpp_inner.c = c;
		this.zpp_inner.invalidate();
		return this.zpp_inner.c;
	}
	,get_c: function() {
		return this.zpp_inner.c;
	}
	,set_b: function(b) {
		if(b != b) throw "Error: Mat23::" + "b" + " cannot be NaN";
		this.zpp_inner.b = b;
		this.zpp_inner.invalidate();
		return this.zpp_inner.b;
	}
	,get_b: function() {
		return this.zpp_inner.b;
	}
	,set_a: function(a) {
		if(a != a) throw "Error: Mat23::" + "a" + " cannot be NaN";
		this.zpp_inner.a = a;
		this.zpp_inner.invalidate();
		return this.zpp_inner.a;
	}
	,get_a: function() {
		return this.zpp_inner.a;
	}
	,__class__: nape.geom.Mat23
}
nape.geom.MatMN = function(rows,cols) {
	this.zpp_inner = null;
	if(rows <= 0 || cols <= 0) throw "Error: MatMN::dimensions cannot be < 1";
	this.zpp_inner = new zpp_nape.geom.ZPP_MatMN(rows,cols);
	this.zpp_inner.outer = this;
};
nape.geom.MatMN.__name__ = ["nape","geom","MatMN"];
nape.geom.MatMN.prototype = {
	mul: function(matrix) {
		var y = matrix;
		if(this.zpp_inner.n != y.zpp_inner.m) throw "Error: Matrix dimensions aren't compatible";
		var ret = new nape.geom.MatMN(this.zpp_inner.m,y.zpp_inner.n);
		var _g1 = 0, _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0, _g2 = y.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				var v = 0.0;
				var _g5 = 0, _g4 = this.zpp_inner.n;
				while(_g5 < _g4) {
					var k = _g5++;
					v += (function($this) {
						var $r;
						if(i < 0 || k < 0 || i >= $this.zpp_inner.m || k >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
						$r = $this.zpp_inner.x[i * $this.zpp_inner.n + k];
						return $r;
					}(this)) * (function($this) {
						var $r;
						if(k < 0 || j < 0 || k >= y.zpp_inner.m || j >= y.zpp_inner.n) throw "Error: MatMN indices out of range";
						$r = y.zpp_inner.x[k * y.zpp_inner.n + j];
						return $r;
					}(this));
				}
				if(i < 0 || j < 0 || i >= ret.zpp_inner.m || j >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
				ret.zpp_inner.x[i * ret.zpp_inner.n + j] = v;
			}
		}
		return ret;
	}
	,transpose: function() {
		var ret = new nape.geom.MatMN(this.zpp_inner.n,this.zpp_inner.m);
		var _g1 = 0, _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			var _g3 = 0, _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				if(j < 0 || i < 0 || j >= ret.zpp_inner.m || i >= ret.zpp_inner.n) throw "Error: MatMN indices out of range";
				ret.zpp_inner.x[j * ret.zpp_inner.n + i] = (function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this));
			}
		}
		return ret;
	}
	,toString: function() {
		var ret = "{ ";
		var fst = true;
		var _g1 = 0, _g = this.zpp_inner.m;
		while(_g1 < _g) {
			var i = _g1++;
			if(!fst) ret += "; ";
			fst = false;
			var _g3 = 0, _g2 = this.zpp_inner.n;
			while(_g3 < _g2) {
				var j = _g3++;
				ret += (function($this) {
					var $r;
					if(i < 0 || j < 0 || i >= $this.zpp_inner.m || j >= $this.zpp_inner.n) throw "Error: MatMN indices out of range";
					$r = $this.zpp_inner.x[i * $this.zpp_inner.n + j];
					return $r;
				}(this)) + " ";
			}
		}
		ret += "}";
		return ret;
	}
	,setx: function(row,col,x) {
		if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
		return this.zpp_inner.x[row * this.zpp_inner.n + col] = x;
	}
	,x: function(row,col) {
		if(row < 0 || col < 0 || row >= this.zpp_inner.m || col >= this.zpp_inner.n) throw "Error: MatMN indices out of range";
		return this.zpp_inner.x[row * this.zpp_inner.n + col];
	}
	,get_cols: function() {
		return this.zpp_inner.n;
	}
	,get_rows: function() {
		return this.zpp_inner.m;
	}
	,__class__: nape.geom.MatMN
}
nape.geom.Ray = function(origin,direction) {
	this.zpp_inner = null;
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.geom.ZPP_Ray();
	if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(origin == null) throw "Error: Ray::origin cannot be null";
	this.zpp_inner.origin.set(origin);
	this.zpp_inner.origin;
	if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(direction == null) throw "Error: Ray::direction cannot be null";
	this.zpp_inner.direction.set(direction);
	this.zpp_inner.zip_dir = true;
	this.zpp_inner.direction;
	this.zpp_inner.maxdist = Math.POSITIVE_INFINITY;
};
nape.geom.Ray.__name__ = ["nape","geom","Ray"];
nape.geom.Ray.fromSegment = function(start,end) {
	if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(start == null) throw "Error: Ray::fromSegment::start is null";
	if(end == null) throw "Error: Ray::fromSegment::end is null";
	var dir = end.sub(start,true);
	var ret = new nape.geom.Ray(start,dir);
	ret.set_maxDistance(Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		start.zpp_inner.validate();
		$r = start.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(start != null && start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		start.zpp_inner.validate();
		$r = start.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		end.zpp_inner.validate();
		$r = end.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(end != null && end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		end.zpp_inner.validate();
		$r = end.zpp_inner.y;
		return $r;
	}(this)))));
	if(start.zpp_inner.weak) {
		start.dispose();
		true;
	} else false;
	if(end.zpp_inner.weak) {
		end.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Ray.prototype = {
	copy: function() {
		var ret = new nape.geom.Ray(this.zpp_inner.origin,this.zpp_inner.direction);
		ret.set_maxDistance(this.zpp_inner.maxdist);
		return ret;
	}
	,at: function(distance,weak) {
		if(weak == null) weak = false;
		this.zpp_inner.validate_dir();
		return nape.geom.Vec2.get(this.zpp_inner.origin.get_x() + distance * this.zpp_inner.dirx,this.zpp_inner.origin.get_y() + distance * this.zpp_inner.diry,weak);
	}
	,aabb: function() {
		return this.zpp_inner.rayAABB().wrapper();
	}
	,set_maxDistance: function(maxDistance) {
		if(maxDistance != maxDistance) throw "Error: maxDistance cannot be NaN";
		this.zpp_inner.maxdist = maxDistance;
		return this.zpp_inner.maxdist;
	}
	,get_maxDistance: function() {
		return this.zpp_inner.maxdist;
	}
	,set_direction: function(direction) {
		if(direction != null && direction.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(direction == null) throw "Error: Ray::direction cannot be null";
		this.zpp_inner.direction.set(direction);
		this.zpp_inner.zip_dir = true;
		return this.zpp_inner.direction;
	}
	,get_direction: function() {
		return this.zpp_inner.direction;
	}
	,set_origin: function(origin) {
		if(origin != null && origin.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(origin == null) throw "Error: Ray::origin cannot be null";
		this.zpp_inner.origin.set(origin);
		return this.zpp_inner.origin;
	}
	,get_origin: function() {
		return this.zpp_inner.origin;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,__class__: nape.geom.Ray
}
nape.geom.RayResult = function() {
	this.zpp_inner = null;
	if(!zpp_nape.geom.ZPP_ConvexRayResult.internal) throw "Error: RayResult cannot be instantiated derp!";
};
nape.geom.RayResult.__name__ = ["nape","geom","RayResult"];
nape.geom.RayResult.prototype = {
	toString: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return "{ shape: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.shape;
			return $r;
		}(this))) + " distance: " + (function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.toiDistance;
			return $r;
		}(this)) + " ?inner: " + Std.string((function($this) {
			var $r;
			if($this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
			$r = $this.zpp_inner.inner;
			return $r;
		}(this))) + " }";
	}
	,dispose: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		this.zpp_inner.free();
	}
	,get_shape: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.shape;
	}
	,get_inner: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.inner;
	}
	,get_distance: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.toiDistance;
	}
	,get_normal: function() {
		if(this.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
		return this.zpp_inner.normal;
	}
	,__class__: nape.geom.RayResult
}
nape.geom.RayResultIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_RayResultList.internal) throw "Error: Cannot instantiate " + "RayResult" + "Iterator derp!";
};
nape.geom.RayResultIterator.__name__ = ["nape","geom","RayResultIterator"];
nape.geom.RayResultIterator.get = function(list) {
	var ret = nape.geom.RayResultIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_RayResultList.internal = true;
		var ret1 = new nape.geom.RayResultIterator();
		zpp_nape.util.ZPP_RayResultList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.RayResultIterator.zpp_pool;
		nape.geom.RayResultIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.geom.RayResultIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.RayResultIterator.zpp_pool;
			nape.geom.RayResultIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.geom.RayResultIterator
}
nape.geom.RayResultList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_RayResultList();
	this.zpp_inner.outer = this;
};
nape.geom.RayResultList.__name__ = ["nape","geom","RayResultList"];
nape.geom.RayResultList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.RayResultList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.RayResultList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.RayResultIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.RayResultIterator.zpp_pool;
			nape.geom.RayResultIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.RayResultIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.geom.RayResultIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.RayResultList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.geom.RayResultIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "RayResult" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.geom.RayResultIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			} else this.zpp_inner.inner.add(obj);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "RayResult" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.geom.RayResultList
}
nape.geom.Vec2 = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	this.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
	this.zpp_inner.outer = this;
};
nape.geom.Vec2.__name__ = ["nape","geom","Vec2"];
nape.geom.Vec2.weak = function(x,y) {
	if(y == null) y = 0;
	if(x == null) x = 0;
	return nape.geom.Vec2.get(x,y,true);
}
nape.geom.Vec2.get = function(x,y,weak) {
	if(weak == null) weak = false;
	if(y == null) y = 0;
	if(x == null) x = 0;
	if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec2 == null) ret = new nape.geom.Vec2(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec2;
		zpp_nape.util.ZPP_PubPool.poolVec2 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextVec2) zpp_nape.util.ZPP_PubPool.nextVec2 = null;
	}
	if(ret.zpp_inner == null) {
		ret.zpp_inner = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		ret.zpp_inner.outer = ret;
	} else {
		if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		ret.zpp_inner.immutable();
		if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
		if(!((function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if(ret != null && ret.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			ret.zpp_inner.validate();
			$r = ret.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			ret.zpp_inner.x = x;
			ret.zpp_inner.y = y;
			ret.zpp_inner.invalidate();
		}
		ret;
	}
	ret.zpp_inner.weak = weak;
	return ret;
}
nape.geom.Vec2.fromPolar = function(length,angle,weak) {
	if(weak == null) weak = false;
	if(length != length) throw "Error: Vec2::length cannot be NaN";
	if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
	return nape.geom.Vec2.get(length * Math.cos(angle),length * Math.sin(angle),weak);
}
nape.geom.Vec2.dsq = function(a,b) {
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null || b == null) throw "Error: Cannot compute squared distance between null Vec2";
	var ret = zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this)));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.distance = function(a,b) {
	if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	if(a == null || b == null) throw "Error: Cannot compute squared distance between null Vec2";
	var ret = Math.sqrt(zpp_nape.geom.ZPP_VecMath.vec_dsq((function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(a != null && a.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		a.zpp_inner.validate();
		$r = a.zpp_inner.y;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.x;
		return $r;
	}(this)),(function($this) {
		var $r;
		if(b != null && b.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		b.zpp_inner.validate();
		$r = b.zpp_inner.y;
		return $r;
	}(this))));
	if(a.zpp_inner.weak) {
		a.dispose();
		true;
	} else false;
	if(b.zpp_inner.weak) {
		b.dispose();
		true;
	} else false;
	return ret;
}
nape.geom.Vec2.prototype = {
	toString: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.toString();
	}
	,perp: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return nape.geom.Vec2.get(-(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),weak);
	}
	,cross: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot take cross product with null vector";
		var ret = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,dot: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot take dot product with null vector";
		var ret = (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,muleq: function(scalar) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(scalar != scalar) throw "Error: Cannot multiply with NaN";
		return this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar);
	}
	,subeq: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(vector == null) throw "Error: Cannot subtract null vectors";
		this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,addeq: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(vector == null) throw "Error: Cannot add null vectors";
		this.setxy((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return this;
	}
	,mul: function(scalar,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(scalar != scalar) throw "Error: Cannot multiply with NaN";
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
	}
	,sub: function(vector,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot subtract null vectors";
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,addMul: function(vector,scalar,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot add null vectors";
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * scalar,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * scalar,weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,add: function(vector,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot add null vectors";
		var ret = nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),weak);
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,unit: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw "Error: Cannot normalise vector of length 0";
		var scale = 1 / Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * scale,(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * scale,weak);
	}
	,normalise: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw "Error: Cannot normalise vector of length 0";
		var d = (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g = this;
		_g.set_y((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return this;
	}
	,reflect: function(vec,weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vec != null && vec.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this)) == 0) throw "Error: Cannot reflect in zero vector";
		var normal = ((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = nape.geom.Vec2.get((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)),(function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)),true);
			return $r;
		}(this))).normalise();
		var ret = vec.sub(normal.muleq(2 * normal.dot(vec)),weak);
		if(vec.zpp_inner.weak) {
			vec.dispose();
			true;
		} else false;
		return ret;
	}
	,rotate: function(angle) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(angle != angle) throw "Error: Cannot rotate Vec2 by NaN";
		if(angle % (Math.PI * 2) != 0) {
			var ax = Math.sin(angle);
			var ay = Math.cos(angle);
			var t = ay * this.zpp_inner.x - ax * this.zpp_inner.y;
			this.zpp_inner.y = this.zpp_inner.x * ax + this.zpp_inner.y * ay;
			this.zpp_inner.x = t;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,set_angle: function(angle) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(angle != angle) throw "Error: Vec2::angle cannot be NaN";
		var l = (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this));
		this.setxy(l * Math.cos(angle),l * Math.sin(angle));
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) == (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) && (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) == 0?0.0:Math.atan2((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)),(function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)));
			return $r;
		}(this));
	}
	,get_angle: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) && (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == 0) return 0.0; else return Math.atan2((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)));
	}
	,setxy: function(x,y) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(x != x || y != y) throw "Error: Vec2 components cannot be NaN";
		if(!((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) == x && (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == y)) {
			this.zpp_inner.x = x;
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return this;
	}
	,set: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(vector == null) throw "Error: Cannot assign null Vec2";
		var ret = this.setxy((function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)));
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return ret;
	}
	,lsq: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,set_length: function(length) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(length != length) throw "Error: Vec2::length cannot be NaN";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) == 0) throw "Error: Cannot set length of a zero vector";
		var t = length / Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
		var _g = this;
		_g.set_x((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t);
		var _g = this;
		_g.set_y((function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.y;
			return $r;
		}(this)) * t);
		this.zpp_inner.invalidate();
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this));
	}
	,get_length: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)));
	}
	,set_y: function(y) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) != y) {
			if(y != y) throw "Error: Vec2::" + "y" + " cannot be NaN";
			this.zpp_inner.y = y;
			this.zpp_inner.invalidate();
		}
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,get_y: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_x: function(x) {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) != x) {
			if(x != x) throw "Error: Vec2::" + "x" + " cannot be NaN";
			this.zpp_inner.x = x;
			this.zpp_inner.invalidate();
		}
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this));
	}
	,get_x: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,copy: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,dispose: function() {
		if(this.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.immutable();
		if(this.zpp_inner._inuse) throw "Error: This Vec2 is not disposable";
		var inner = this.zpp_inner;
		this.zpp_inner.outer = null;
		this.zpp_inner = null;
		var o = this;
		o.zpp_pool = null;
		if(zpp_nape.util.ZPP_PubPool.nextVec2 != null) zpp_nape.util.ZPP_PubPool.nextVec2.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec2 = o;
		zpp_nape.util.ZPP_PubPool.nextVec2 = o;
		o.zpp_disp = true;
		var o = inner;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	}
	,__class__: nape.geom.Vec2
}
nape.geom.Vec2Iterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_Vec2List.internal) throw "Error: Cannot instantiate " + "Vec2" + "Iterator derp!";
};
nape.geom.Vec2Iterator.__name__ = ["nape","geom","Vec2Iterator"];
nape.geom.Vec2Iterator.get = function(list) {
	var ret = nape.geom.Vec2Iterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_Vec2List.internal = true;
		var ret1 = new nape.geom.Vec2Iterator();
		zpp_nape.util.ZPP_Vec2List.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.geom.Vec2Iterator.zpp_pool;
		nape.geom.Vec2Iterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.geom.Vec2Iterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.zpp_gl();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
			nape.geom.Vec2Iterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.geom.Vec2Iterator
}
nape.geom.Vec2List = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_Vec2List();
	this.zpp_inner.outer = this;
};
nape.geom.Vec2List.__name__ = ["nape","geom","Vec2List"];
nape.geom.Vec2List.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.geom.Vec2List();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.geom.Vec2List.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.zpp_gl()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = this.iterator();
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.geom.Vec2Iterator.zpp_pool;
			nape.geom.Vec2Iterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = this.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = xs.iterator();
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) this.add(x);
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.geom.Vec2List();
		var $it0 = this.iterator();
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					i.zpp_inner.validate();
					$r = i.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(i != null && i.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					i.zpp_inner.validate();
					$r = i.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_vm();
		return nape.geom.Vec2Iterator.get(this);
	}
	,empty: function() {
		return this.zpp_gl() == 0;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.zpp_gl() == 1?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.empty()?null:this.zpp_inner.inner.iterator_at(this.zpp_gl() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,has: function(obj) {
		this.zpp_vm();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,zpp_vm: function() {
		this.zpp_inner.valmod();
	}
	,zpp_gl: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,get_length: function() {
		return this.zpp_gl();
	}
	,__class__: nape.geom.Vec2List
}
nape.geom.Vec3 = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	this.zpp_pool = null;
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.geom.ZPP_Vec3();
	this.zpp_inner.outer = this;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.x = x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.x;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.y = y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.y;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
	this.zpp_inner.z = z;
	if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
	this.zpp_inner.validate();
	this.zpp_inner.z;
};
nape.geom.Vec3.__name__ = ["nape","geom","Vec3"];
nape.geom.Vec3.get = function(x,y,z) {
	if(z == null) z = 0;
	if(y == null) y = 0;
	if(x == null) x = 0;
	var ret;
	if(zpp_nape.util.ZPP_PubPool.poolVec3 == null) ret = new nape.geom.Vec3(); else {
		ret = zpp_nape.util.ZPP_PubPool.poolVec3;
		zpp_nape.util.ZPP_PubPool.poolVec3 = ret.zpp_pool;
		ret.zpp_pool = null;
		ret.zpp_disp = false;
		if(ret == zpp_nape.util.ZPP_PubPool.nextVec3) zpp_nape.util.ZPP_PubPool.nextVec3 = null;
	}
	ret.setxyz(x,y,z);
	ret.zpp_inner.immutable = false;
	ret.zpp_inner._validate = null;
	return ret;
}
nape.geom.Vec3.prototype = {
	toString: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return "{ x: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + " y: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + " z: " + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) + " }";
	}
	,xy: function(weak) {
		if(weak == null) weak = false;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return nape.geom.Vec2.get((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)),weak);
	}
	,setxyz: function(x,y,z) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.x = x;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		this.zpp_inner.x;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.y = y;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		this.zpp_inner.y;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.z = z;
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		this.zpp_inner.z;
		return this;
	}
	,set: function(vector) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot assign null Vec3";
		return this.setxyz((function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.z;
			return $r;
		}(this)));
	}
	,lsq: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this));
	}
	,set_length: function(length) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(length != length) throw "Error: Vec3::length cannot be NaN";
		if((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) == 0) throw "Error: Cannot set length of a zero vector";
		var t = length / (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)));
			return $r;
		}(this));
		var t1 = t;
		var _g = this;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		_g.zpp_inner.x = (function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.x;
			return $r;
		}(this)) * t1;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		_g.zpp_inner.x;
		var _g = this;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		_g.zpp_inner.y = (function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.y;
			return $r;
		}(this)) * t1;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		_g.zpp_inner.y;
		var _g = this;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		_g.zpp_inner.z = (function($this) {
			var $r;
			if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			_g.zpp_inner.validate();
			$r = _g.zpp_inner.z;
			return $r;
		}(this)) * t;
		if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		_g.zpp_inner.validate();
		_g.zpp_inner.z;
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.y;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				$this.zpp_inner.validate();
				$r = $this.zpp_inner.z;
				return $r;
			}($this)));
			return $r;
		}(this));
	}
	,get_length: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		return Math.sqrt((function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this)) + (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)) * (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this)));
	}
	,dispose: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: This Vec3 is not disposable";
		var o = this;
		o.zpp_pool = null;
		if(zpp_nape.util.ZPP_PubPool.nextVec3 != null) zpp_nape.util.ZPP_PubPool.nextVec3.zpp_pool = o; else zpp_nape.util.ZPP_PubPool.poolVec3 = o;
		zpp_nape.util.ZPP_PubPool.nextVec3 = o;
		o.zpp_disp = true;
	}
	,set_z: function(z) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.z = z;
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.z;
			return $r;
		}(this));
	}
	,get_z: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.z;
	}
	,set_y: function(y) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.y = y;
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.y;
			return $r;
		}(this));
	}
	,get_y: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.y;
	}
	,set_x: function(x) {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		if(this.zpp_inner.immutable) throw "Error: Vec3 is immutable";
		this.zpp_inner.x = x;
		return (function($this) {
			var $r;
			if($this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
			$this.zpp_inner.validate();
			$r = $this.zpp_inner.x;
			return $r;
		}(this));
	}
	,get_x: function() {
		if(this.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
		this.zpp_inner.validate();
		return this.zpp_inner.x;
	}
	,__class__: nape.geom.Vec3
}
nape.geom.Winding = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Winding" + " derp!";
};
nape.geom.Winding.__name__ = ["nape","geom","Winding"];
nape.geom.Winding.get_UNDEFINED = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
}
nape.geom.Winding.get_CLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
}
nape.geom.Winding.get_ANTICLOCKWISE = function() {
	if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
}
nape.geom.Winding.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_UNDEFINED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_UNDEFINED = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_UNDEFINED;
			return $r;
		}(this))) return "UNDEFINED"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_CLOCKWISE;
			return $r;
		}(this))) return "CLOCKWISE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE = new nape.geom.Winding();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Winding_ANTICLOCKWISE;
			return $r;
		}(this))) return "ANTICLOCKWISE"; else return "";
	}
	,__class__: nape.geom.Winding
}
nape.phys = {}
nape.phys.Interactor = function() {
	this.zpp_inner_i = null;
	throw "Error: Cannot instantiate an Interactor, only Shape/Body/Compound";
};
nape.phys.Interactor.__name__ = ["nape","phys","Interactor"];
nape.phys.Interactor.prototype = {
	toString: function() {
		return "";
	}
	,get_cbTypes: function() {
		if(this.zpp_inner_i.wrap_cbTypes == null) this.zpp_inner_i.setupcbTypes();
		return this.zpp_inner_i.wrap_cbTypes;
	}
	,set_group: function(group) {
		this.zpp_inner_i.immutable_midstep("Interactor::group");
		this.zpp_inner_i.setGroup(group == null?null:group.zpp_inner);
		return this.zpp_inner_i.group == null?null:this.zpp_inner_i.group.outer;
	}
	,get_group: function() {
		return this.zpp_inner_i.group == null?null:this.zpp_inner_i.group.outer;
	}
	,get_castCompound: function() {
		return this.zpp_inner_i.icompound != null?this.zpp_inner_i.icompound.outer:null;
	}
	,get_castBody: function() {
		return this.zpp_inner_i.ibody != null?this.zpp_inner_i.ibody.outer:null;
	}
	,get_castShape: function() {
		return this.zpp_inner_i.ishape != null?this.zpp_inner_i.ishape.outer:null;
	}
	,isCompound: function() {
		return this.zpp_inner_i.icompound != null;
	}
	,isBody: function() {
		return this.zpp_inner_i.ibody != null;
	}
	,isShape: function() {
		return this.zpp_inner_i.ishape != null;
	}
	,get_userData: function() {
		if(this.zpp_inner_i.userData == null) this.zpp_inner_i.userData = { };
		return this.zpp_inner_i.userData;
	}
	,get_id: function() {
		return this.zpp_inner_i.id;
	}
	,__class__: nape.phys.Interactor
}
nape.phys.Body = function(type,position) {
	this.debugDraw = true;
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	this.zpp_inner = new zpp_nape.phys.ZPP_Body();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	if(position != null) {
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.posx = (function($this) {
			var $r;
			if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			position.zpp_inner.validate();
			$r = position.zpp_inner.x;
			return $r;
		}(this));
		this.zpp_inner.posy = (function($this) {
			var $r;
			if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			position.zpp_inner.validate();
			$r = position.zpp_inner.y;
			return $r;
		}(this));
	} else {
		this.zpp_inner.posx = 0;
		this.zpp_inner.posy = 0;
	}
	this.set_type(type == null?(function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
		return $r;
	}(this)):type);
	if(position != null) {
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_BODY.zpp_inner);
};
nape.phys.Body.__name__ = ["nape","phys","Body"];
nape.phys.Body.__super__ = nape.phys.Interactor;
nape.phys.Body.prototype = $extend(nape.phys.Interactor.prototype,{
	toString: function() {
		return (this.zpp_inner.world?"(space::world":"(" + (this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC?"dynamic":this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?"static":"kinematic")) + ")#" + this.zpp_inner_i.id;
	}
	,contains: function(point) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot check containment of null point";
		var wasWeak = point.zpp_inner.weak;
		point.zpp_inner.weak = false;
		var retvar;
		retvar = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.outer.contains(point)) {
				retvar = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		point.zpp_inner.weak = wasWeak;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return retvar;
	}
	,totalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				var imp = con.outer.bodyImpulse(this);
				var t = 1;
				var t1 = t;
				retx += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}(this)) * t1;
				rety += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}(this)) * t1;
				retz += (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.z;
					return $r;
				}(this)) * t;
				imp.dispose();
			}
			cx_ite = cx_ite.next;
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,constraintsImpulse: function() {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var cx_ite = this.zpp_inner.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			var imp = con.outer.bodyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
			cx_ite = cx_ite.next;
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,totalFluidImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().totalImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,dragImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().dragImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,buoyancyImpulse: function(body) {
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.FLUID) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_fluidArbiter().buoyancyImpulse(this);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,rollingImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var ret = 0.0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			ret += arb.wrapper().get_collisionArbiter().rollingImpulse(this,freshOnly);
		}
		return ret;
	}
	,totalContactsImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().totalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,tangentImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().tangentImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,normalImpulse: function(body,freshOnly) {
		if(freshOnly == null) freshOnly = false;
		var retx = 0;
		var rety = 0;
		var retz = 0;
		var arbs = this.zpp_inner.arbiters;
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var oarb = $it0.next();
			var arb = oarb.zpp_inner;
			if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.COL) continue;
			if(body != null && arb.b2 != body.zpp_inner && arb.b1 != body.zpp_inner) continue;
			var imp = arb.wrapper().get_collisionArbiter().normalImpulse(this,freshOnly);
			var t = 1;
			var t1 = t;
			retx += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.x;
				return $r;
			}(this)) * t1;
			rety += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.y;
				return $r;
			}(this)) * t1;
			retz += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				imp.zpp_inner.validate();
				$r = imp.zpp_inner.z;
				return $r;
			}(this)) * t;
			imp.dispose();
		}
		return nape.geom.Vec3.get(retx,rety,retz);
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_localCOM: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no " + "localCOM";
		if(this.zpp_inner.wrap_localCOM == null) {
			this.zpp_inner.wrap_localCOM = nape.geom.Vec2.get(this.zpp_inner.localCOMx,this.zpp_inner.localCOMy,null);
			this.zpp_inner.wrap_localCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_localCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getlocalCOM));
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,setShapeFluidProperties: function(fluidProperties) {
		this.zpp_inner.immutable_midstep("Body::setShapeFluidProperties()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_fluidProperties(fluidProperties);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeFilters: function(filter) {
		this.zpp_inner.immutable_midstep("Body::setShapeFilters()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_filter(filter);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,setShapeMaterials: function(material) {
		this.zpp_inner.immutable_midstep("Body::setShapeMaterials()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.set_material(material);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,rotate: function(centre,angle) {
		if(centre != null && centre.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(centre == null) throw "Error: Cannot rotate about a null Vec2";
		if(angle != angle) throw "Error: Cannot rotate by NaN radians";
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		var del = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).sub(centre);
		del.rotate(angle);
		this.set_position(centre.add(del,true));
		del.dispose();
		var _g = this;
		_g.set_rotation(_g.zpp_inner.rot + angle);
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,align: function() {
		this.zpp_inner.immutable_midstep("Body::align()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.shapes.head == null) throw "Error: Cannot align empty Body";
		this.zpp_inner.validate_localCOM();
		var dx = nape.geom.Vec2.get(-this.zpp_inner.localCOMx,-this.zpp_inner.localCOMy,null);
		this.translateShapes(dx);
		var dx2 = this.localVectorToWorld(dx);
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).subeq(dx2);
		if(this.zpp_inner.pre_posx < Math.POSITIVE_INFINITY) {
			var t = 1.0;
			this.zpp_inner.pre_posx -= (function($this) {
				var $r;
				if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.x;
				return $r;
			}(this)) * t;
			this.zpp_inner.pre_posy -= (function($this) {
				var $r;
				if(dx2 != null && dx2.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				dx2.zpp_inner.validate();
				$r = dx2.zpp_inner.y;
				return $r;
			}(this)) * t;
		}
		dx.dispose();
		dx2.dispose();
		return this;
	}
	,transformShapes: function(matrix) {
		this.zpp_inner.immutable_midstep("Body::transformShapes()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.transform(matrix);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,scaleShapes: function(scaleX,scaleY) {
		this.zpp_inner.immutable_midstep("Body::scaleShapes()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.scale(scaleX,scaleY);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,rotateShapes: function(angle) {
		this.zpp_inner.immutable_midstep("Body::rotateShapes()");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.rotate(angle);
			cx_ite = cx_ite.next;
		}
		return this;
	}
	,translateShapes: function(translation) {
		this.zpp_inner.immutable_midstep("Body::translateShapes()");
		if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(translation == null) throw "Error: Cannot displace by null Vec2";
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		var cx_ite = this.zpp_inner.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.outer.translate(translation);
			cx_ite = cx_ite.next;
		}
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,applyAngularImpulse: function(impulse,sleepable) {
		if(sleepable == null) sleepable = false;
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(sleepable && (function($this) {
			var $r;
			if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
			$r = $this.zpp_inner.component.sleeping;
			return $r;
		}(this))) return this;
		this.zpp_inner.validate_inertia();
		this.zpp_inner.angvel += impulse * this.zpp_inner.iinertia;
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		return this;
	}
	,applyImpulse: function(impulse,pos,sleepable) {
		if(sleepable == null) sleepable = false;
		if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(impulse == null) throw "Error: Cannot apply null impulse to Body";
		if(sleepable && (function($this) {
			var $r;
			if($this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
			$r = $this.zpp_inner.component.sleeping;
			return $r;
		}(this))) {
			if(impulse.zpp_inner.weak) {
				impulse.dispose();
				true;
			} else false;
			if(pos != null) {
				if(pos.zpp_inner.weak) {
					pos.dispose();
					true;
				} else false;
			}
			return this;
		}
		this.zpp_inner.validate_mass();
		var t = this.zpp_inner.imass;
		this.zpp_inner.velx += (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.x;
			return $r;
		}(this)) * t;
		this.zpp_inner.vely += (function($this) {
			var $r;
			if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			impulse.zpp_inner.validate();
			$r = impulse.zpp_inner.y;
			return $r;
		}(this)) * t;
		if(pos != null) {
			var rx = 0.0;
			var ry = 0.0;
			rx = (function($this) {
				var $r;
				if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.x;
				return $r;
			}(this)) - this.zpp_inner.posx;
			ry = (function($this) {
				var $r;
				if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				pos.zpp_inner.validate();
				$r = pos.zpp_inner.y;
				return $r;
			}(this)) - this.zpp_inner.posy;
			this.zpp_inner.validate_inertia();
			this.zpp_inner.angvel += ((function($this) {
				var $r;
				if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.y;
				return $r;
			}(this)) * rx - (function($this) {
				var $r;
				if(impulse != null && impulse.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				impulse.zpp_inner.validate();
				$r = impulse.zpp_inner.x;
				return $r;
			}(this)) * ry) * this.zpp_inner.iinertia;
			if(pos.zpp_inner.weak) {
				pos.dispose();
				true;
			} else false;
		}
		if(!sleepable) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.zpp_inner.wake();
		}
		if(impulse.zpp_inner.weak) {
			impulse.dispose();
			true;
		} else false;
		return this;
	}
	,worldVectorToLocal: function(vector,weak) {
		if(weak == null) weak = false;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisy + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		tempy = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy - (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,localVectorToWorld: function(vector,weak) {
		if(weak == null) weak = false;
		if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(vector == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(vector != null && vector.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			vector.zpp_inner.validate();
			$r = vector.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(vector.zpp_inner.weak) {
			vector.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,worldPointToLocal: function(point,weak) {
		if(weak == null) weak = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		var pointx = 0.0;
		var pointy = 0.0;
		pointx = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.posx;
		pointy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) - this.zpp_inner.posy;
		tempx = pointx * this.zpp_inner.axisy + pointy * this.zpp_inner.axisx;
		tempy = pointy * this.zpp_inner.axisy - pointx * this.zpp_inner.axisx;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx,tempy,weak);
	}
	,localPointToWorld: function(point,weak) {
		if(weak == null) weak = false;
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot transform null Vec2";
		this.zpp_inner.validate_axis();
		var tempx = 0.0;
		var tempy = 0.0;
		tempx = this.zpp_inner.axisy * (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) - this.zpp_inner.axisx * (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this));
		tempy = (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)) * this.zpp_inner.axisx + (function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)) * this.zpp_inner.axisy;
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return nape.geom.Vec2.get(tempx + this.zpp_inner.posx,tempy + this.zpp_inner.posy,weak);
	}
	,crushFactor: function() {
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) == null) throw "Error: Makes no sense to see how much an object not taking part in a simulation is being crushed";
		var msum = 0.0;
		var jsum = nape.geom.Vec2.get(null,null,null);
		var $it0 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_arbiters == null) $this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get($this.zpp_inner.arbiters,true);
			$r = $this.zpp_inner.wrap_arbiters;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var arb = $it0.next();
			var imp3 = arb.totalImpulse(this);
			var imp = imp3.xy();
			jsum.addeq(imp);
			msum += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = Math.sqrt((function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}($this)) * (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}($this)) + (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}($this)) * (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}($this)));
				return $r;
			}(this));
			imp.dispose();
			imp3.dispose();
		}
		var $it1 = ((function($this) {
			var $r;
			if($this.zpp_inner.wrap_constraints == null) $this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get($this.zpp_inner.constraints,true);
			$r = $this.zpp_inner.wrap_constraints;
			return $r;
		}(this))).iterator();
		while( $it1.hasNext() ) {
			var con = $it1.next();
			var imp3 = con.bodyImpulse(this);
			var imp = imp3.xy();
			jsum.addeq(imp);
			msum += (function($this) {
				var $r;
				if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = Math.sqrt((function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}($this)) * (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.x;
					return $r;
				}($this)) + (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}($this)) * (function($this) {
					var $r;
					if(imp != null && imp.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					imp.zpp_inner.validate();
					$r = imp.zpp_inner.y;
					return $r;
				}($this)));
				return $r;
			}(this));
			imp.dispose();
			imp3.dispose();
		}
		var ret = (msum - (function($this) {
			var $r;
			if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			$r = Math.sqrt((function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.x;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.x;
				return $r;
			}($this)) + (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.y;
				return $r;
			}($this)) * (function($this) {
				var $r;
				if(jsum != null && jsum.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				jsum.zpp_inner.validate();
				$r = jsum.zpp_inner.y;
				return $r;
			}($this)));
			return $r;
		}(this))) / ((function($this) {
			var $r;
			if($this.zpp_inner.world) throw "Error: Space::world has no mass";
			$this.zpp_inner.validate_mass();
			if($this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && $this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
			$r = $this.zpp_inner.cmass;
			return $r;
		}(this)) * (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.pre_dt);
		jsum.dispose();
		return ret;
	}
	,interactingBodies: function(type,depth,output) {
		if(depth == null) depth = -1;
		var arbiter_type = type == null?zpp_nape.dynamics.ZPP_Arbiter.COL | zpp_nape.dynamics.ZPP_Arbiter.SENSOR | zpp_nape.dynamics.ZPP_Arbiter.FLUID:type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
			return $r;
		}(this))?zpp_nape.dynamics.ZPP_Arbiter.COL:type == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
			return $r;
		}(this))?zpp_nape.dynamics.ZPP_Arbiter.SENSOR:zpp_nape.dynamics.ZPP_Arbiter.FLUID;
		return this.zpp_inner.interactingBodies(arbiter_type,depth,output);
	}
	,connectedBodies: function(depth,output) {
		if(depth == null) depth = -1;
		return this.zpp_inner.connectedBodies(depth,output);
	}
	,set_inertia: function(inertia) {
		this.zpp_inner.immutable_midstep("Body::inertia");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(inertia != inertia) throw "Error: Inertia cannot be NaN";
		if(inertia <= 0) throw "Error: Inertia must be strictly positive";
		if(inertia >= Math.POSITIVE_INFINITY) throw "Error: Inertia cannot be infinite, use allowRotation = false instead";
		this.zpp_inner.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED;
		this.zpp_inner.cinertia = inertia;
		this.zpp_inner.invalidate_inertia();
		return (function($this) {
			var $r;
			if($this.zpp_inner.world) throw "Error: Space::world has no inertia";
			$this.zpp_inner.validate_inertia();
			if($this.zpp_inner.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && $this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
			$r = $this.zpp_inner.cinertia;
			return $r;
		}(this));
	}
	,get_inertia: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no inertia";
		this.zpp_inner.validate_inertia();
		if(this.zpp_inner.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && this.zpp_inner.wrap_shapes.empty()) throw "Error: Given current inertia mode flag, Body::inertia only makes sense if Body contains Shapes";
		return this.zpp_inner.cinertia;
	}
	,get_constraintInertia: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_inertia();
		return this.zpp_inner.sinertia;
	}
	,set_inertiaMode: function(inertiaMode) {
		this.zpp_inner.immutable_midstep("Body::inertiaMode");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(inertiaMode == null) throw "Error: Cannot use null InertiaMode";
		this.zpp_inner.inertiaMode = inertiaMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))?zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED:zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
		this.zpp_inner.invalidate_inertia();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,get_inertiaMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.inertiaMode];
	}
	,set_gravMassScale: function(gravMassScale) {
		this.zpp_inner.immutable_midstep("Body::gravMassScale");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(gravMassScale != gravMassScale) throw "Error: gravMassScale cannot be NaN";
		this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED;
		this.zpp_inner.gravMassScale = gravMassScale;
		this.zpp_inner.invalidate_gravMassScale();
		return (function($this) {
			var $r;
			$this.zpp_inner.validate_gravMassScale();
			if($this.zpp_inner.shapes.head == null) {
				if($this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && $this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
			}
			$r = $this.zpp_inner.gravMassScale;
			return $r;
		}(this));
	}
	,get_gravMassScale: function() {
		this.zpp_inner.validate_gravMassScale();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) throw "Error: Given current mass/gravMass modes; Body::gravMassScale only makes sense if it contains Shapes";
		}
		return this.zpp_inner.gravMassScale;
	}
	,set_gravMass: function(gravMass) {
		this.zpp_inner.immutable_midstep("Body::gravMass");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(gravMass != gravMass) throw "Error: gravMass cannot be NaN";
		this.zpp_inner.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
		this.zpp_inner.gravMass = gravMass;
		this.zpp_inner.invalidate_gravMass();
		return (function($this) {
			var $r;
			if($this.zpp_inner.world) throw "Error: Space::world has no gravMass";
			$this.zpp_inner.validate_gravMass();
			if($this.zpp_inner.shapes.head == null) {
				if($this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && $this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
			}
			$r = $this.zpp_inner.gravMass;
			return $r;
		}(this));
	}
	,get_gravMass: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no gravMass";
		this.zpp_inner.validate_gravMass();
		if(this.zpp_inner.shapes.head == null) {
			if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) throw "Error: Given current mass/gravMass modes; Body::gravMass only makes sense if it contains Shapes";
		}
		return this.zpp_inner.gravMass;
	}
	,set_gravMassMode: function(gravMassMode) {
		this.zpp_inner.immutable_midstep("Body::gravMassMode");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(gravMassMode == null) throw "Error: Cannot use null gravMassMode";
		this.zpp_inner.gravMassMode = gravMassMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))?zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED:gravMassMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))?zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT:zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED;
		this.zpp_inner.invalidate_gravMass();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_gravMassMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_mass: function(mass) {
		this.zpp_inner.immutable_midstep("Body::mass");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(mass != mass) throw "Error: Mass cannot be NaN";
		if(mass <= 0) throw "Error: Mass must be strictly positive";
		if(mass >= Math.POSITIVE_INFINITY) throw "Error: Mass cannot be infinite, use allowMovement = false instead";
		this.zpp_inner.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
		this.zpp_inner.cmass = mass;
		this.zpp_inner.invalidate_mass();
		return (function($this) {
			var $r;
			if($this.zpp_inner.world) throw "Error: Space::world has no mass";
			$this.zpp_inner.validate_mass();
			if($this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && $this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
			$r = $this.zpp_inner.cmass;
			return $r;
		}(this));
	}
	,get_mass: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no mass";
		this.zpp_inner.validate_mass();
		if(this.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && this.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
		return this.zpp_inner.cmass;
	}
	,get_constraintMass: function() {
		if(!this.zpp_inner.world) this.zpp_inner.validate_mass();
		return this.zpp_inner.smass;
	}
	,set_massMode: function(massMode) {
		this.zpp_inner.immutable_midstep("Body::massMode");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(massMode == null) throw "Error: cannot use null massMode";
		this.zpp_inner.massMode = massMode == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this))?zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT:zpp_nape.util.ZPP_Flags.id_MassMode_FIXED;
		this.zpp_inner.invalidate_mass();
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,get_massMode: function() {
		return [(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))][this.zpp_inner.massMode];
	}
	,set_allowRotation: function(allowRotation) {
		this.zpp_inner.immutable_midstep("Body::" + Std.string(allowRotation));
		if(!this.zpp_inner.norotate != allowRotation) {
			this.zpp_inner.norotate = !allowRotation;
			this.zpp_inner.invalidate_inertia();
		}
		return !this.zpp_inner.norotate;
	}
	,get_allowRotation: function() {
		return !this.zpp_inner.norotate;
	}
	,set_allowMovement: function(allowMovement) {
		this.zpp_inner.immutable_midstep("Body::" + Std.string(allowMovement));
		if(!this.zpp_inner.nomove != allowMovement) {
			this.zpp_inner.nomove = !allowMovement;
			this.zpp_inner.invalidate_mass();
		}
		return !this.zpp_inner.nomove;
	}
	,get_allowMovement: function() {
		return !this.zpp_inner.nomove;
	}
	,get_bounds: function() {
		if(this.zpp_inner.world) throw "Error: Space::world has no bounds";
		return this.zpp_inner.aabb.wrapper();
	}
	,set_torque: function(torque) {
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(!(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Non-dynamic body cannot have torque applied.";
		if(torque != torque) throw "Error: Body::torque cannot be NaN";
		if(this.zpp_inner.torque != torque) {
			this.zpp_inner.torque = torque;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.torque;
	}
	,get_torque: function() {
		return this.zpp_inner.torque;
	}
	,set_kinAngVel: function(kinAngVel) {
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.kinangvel != kinAngVel) {
			if(kinAngVel != kinAngVel) throw "Error: Body::kinAngVel cannot be NaN";
			this.zpp_inner.kinangvel = kinAngVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.kinangvel;
	}
	,get_kinAngVel: function() {
		return this.zpp_inner.kinangvel;
	}
	,set_angularVel: function(angularVel) {
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.angvel != angularVel) {
			if(angularVel != angularVel) throw "Error: Body::angularVel cannot be NaN";
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: A static object cannot be given a velocity";
			this.zpp_inner.angvel = angularVel;
			this.zpp_inner.wake();
		}
		return this.zpp_inner.angvel;
	}
	,get_angularVel: function() {
		return this.zpp_inner.angvel;
	}
	,set_rotation: function(rotation) {
		this.zpp_inner.immutable_midstep("Body::rotation");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) throw "Error: Static objects cannot be rotated once inside a Space";
		if(this.zpp_inner.rot != rotation) {
			if(rotation != rotation) throw "Error: Body::rotation cannot be NaN";
			this.zpp_inner.rot = rotation;
			this.zpp_inner.invalidate_rot();
			this.zpp_inner.wake();
		}
		return this.zpp_inner.rot;
	}
	,get_rotation: function() {
		return this.zpp_inner.rot;
	}
	,get_constraintVelocity: function() {
		if(this.zpp_inner.wrapcvel == null) this.zpp_inner.setup_cvel();
		return this.zpp_inner.wrapcvel;
	}
	,set_force: function(force) {
		if(force != null && force.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(force == null) throw "Error: Body::" + "force" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
			$r = $this.zpp_inner.wrap_force;
			return $r;
		}(this))).set(force);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_force == null) $this.zpp_inner.setupForce();
			$r = $this.zpp_inner.wrap_force;
			return $r;
		}(this));
	}
	,get_force: function() {
		if(this.zpp_inner.wrap_force == null) this.zpp_inner.setupForce();
		return this.zpp_inner.wrap_force;
	}
	,set_surfaceVel: function(surfaceVel) {
		if(surfaceVel != null && surfaceVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(surfaceVel == null) throw "Error: Body::" + "surfaceVel" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
			$r = $this.zpp_inner.wrap_svel;
			return $r;
		}(this))).set(surfaceVel);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_svel == null) $this.zpp_inner.setupsvel();
			$r = $this.zpp_inner.wrap_svel;
			return $r;
		}(this));
	}
	,get_surfaceVel: function() {
		if(this.zpp_inner.wrap_svel == null) this.zpp_inner.setupsvel();
		return this.zpp_inner.wrap_svel;
	}
	,set_kinematicVel: function(kinematicVel) {
		if(kinematicVel != null && kinematicVel.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(kinematicVel == null) throw "Error: Body::" + "kinematicVel" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
			$r = $this.zpp_inner.wrap_kinvel;
			return $r;
		}(this))).set(kinematicVel);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_kinvel == null) $this.zpp_inner.setupkinvel();
			$r = $this.zpp_inner.wrap_kinvel;
			return $r;
		}(this));
	}
	,get_kinematicVel: function() {
		if(this.zpp_inner.wrap_kinvel == null) this.zpp_inner.setupkinvel();
		return this.zpp_inner.wrap_kinvel;
	}
	,setVelocityFromTarget: function(targetPosition,targetRotation,deltaTime) {
		if(targetPosition != null && targetPosition.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(targetPosition == null) throw "Cannot set velocity for null target position";
		if(deltaTime == 0) throw "deltaTime cannot be 0 for setVelocityFromTarget";
		var idt = 1 / deltaTime;
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(targetPosition.sub((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this)),true).muleq(idt));
		this.set_angularVel((targetRotation - this.zpp_inner.rot) * idt);
		if(targetPosition.zpp_inner.weak) {
			targetPosition.dispose();
			true;
		} else false;
		return this;
	}
	,set_velocity: function(velocity) {
		if(velocity != null && velocity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(velocity == null) throw "Error: Body::" + "velocity" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this))).set(velocity);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_vel == null) $this.zpp_inner.setupVelocity();
			$r = $this.zpp_inner.wrap_vel;
			return $r;
		}(this));
	}
	,get_velocity: function() {
		if(this.zpp_inner.wrap_vel == null) this.zpp_inner.setupVelocity();
		return this.zpp_inner.wrap_vel;
	}
	,set_position: function(position) {
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position == null) throw "Error: Body::" + "position" + " cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this))).set(position);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_pos == null) $this.zpp_inner.setupPosition();
			$r = $this.zpp_inner.wrap_pos;
			return $r;
		}(this));
	}
	,get_position: function() {
		if(this.zpp_inner.wrap_pos == null) this.zpp_inner.setupPosition();
		return this.zpp_inner.wrap_pos;
	}
	,copy: function() {
		if(this.zpp_inner.world) throw "Error: Space::world cannot be copied";
		return this.zpp_inner.copy();
	}
	,get_constraints: function() {
		if(this.zpp_inner.wrap_constraints == null) this.zpp_inner.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.zpp_inner.constraints,true);
		return this.zpp_inner.wrap_constraints;
	}
	,get_isSleeping: function() {
		if(this.zpp_inner.space == null) throw "Error: isSleeping makes no sense if the object is not contained within a Space";
		return this.zpp_inner.component.sleeping;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) this.zpp_inner.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.zpp_inner.arbiters,true);
		return this.zpp_inner.wrap_arbiters;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set";
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) this.zpp_inner.component.woken = false;
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_bodies.remove(this);
			if(space != null) space.zpp_inner.wrap_bodies.add(this);
		}
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,get_space: function() {
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,set_compound: function(compound) {
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(this);
			if(compound != null) compound.zpp_inner.wrap_bodies.add(this);
		}
		return this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer;
	}
	,get_compound: function() {
		return this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer;
	}
	,get_shapes: function() {
		return this.zpp_inner.wrap_shapes;
	}
	,isKinematic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
	}
	,isDynamic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
	}
	,isStatic: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
	}
	,integrate: function(deltaTime) {
		if(deltaTime != deltaTime) throw "Cannot integrate by NaN time";
		this.zpp_inner.immutable_midstep("Body::space");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(deltaTime == 0) return this;
		var cur = this.zpp_inner;
		cur.sweepTime = 0;
		cur.sweep_angvel = cur.angvel;
		cur.sweepIntegrate(deltaTime);
		cur.invalidate_pos();
		cur.invalidate_rot();
		cur.sweepTime = 0;
		return this;
	}
	,set_disableCCD: function(disableCCD) {
		this.zpp_inner.disableCCD = disableCCD;
		return this.zpp_inner.disableCCD;
	}
	,get_disableCCD: function() {
		return this.zpp_inner.disableCCD;
	}
	,set_isBullet: function(isBullet) {
		this.zpp_inner.bulletEnabled = isBullet;
		return this.zpp_inner.bulletEnabled;
	}
	,get_isBullet: function() {
		return this.zpp_inner.bulletEnabled;
	}
	,set_type: function(type) {
		this.zpp_inner.immutable_midstep("Body::type");
		if(this.zpp_inner.world) throw "Error: Space::world is immutable";
		if(zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type] != type) {
			if(type == null) throw "Error: Cannot use null BodyType";
			var ntype = type == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC:type == (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
				return $r;
			}(this))?zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC:zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
			if(ntype == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.space != null) {
				this.zpp_inner.velx = 0;
				this.zpp_inner.vely = 0;
				this.zpp_inner.angvel = 0;
			}
			this.zpp_inner.invalidate_type();
			if(this.zpp_inner.space != null) this.zpp_inner.space.transmitType(this.zpp_inner,ntype); else this.zpp_inner.type = ntype;
		}
		return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
	}
	,get_type: function() {
		return zpp_nape.phys.ZPP_Body.types[this.zpp_inner.type];
	}
	,__class__: nape.phys.Body
});
nape.phys.BodyIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_BodyList.internal) throw "Error: Cannot instantiate " + "Body" + "Iterator derp!";
};
nape.phys.BodyIterator.__name__ = ["nape","phys","BodyIterator"];
nape.phys.BodyIterator.get = function(list) {
	var ret = nape.phys.BodyIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_BodyList.internal = true;
		var ret1 = new nape.phys.BodyIterator();
		zpp_nape.util.ZPP_BodyList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.phys.BodyIterator.zpp_pool;
		nape.phys.BodyIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.phys.BodyIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.BodyIterator.zpp_pool;
			nape.phys.BodyIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.phys.BodyIterator
}
nape.phys.BodyList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_BodyList();
	this.zpp_inner.outer = this;
};
nape.phys.BodyList.__name__ = ["nape","phys","BodyList"];
nape.phys.BodyList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.BodyList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.phys.BodyList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.BodyIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.BodyIterator.zpp_pool;
			nape.phys.BodyIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.BodyIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.phys.BodyIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.BodyList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.BodyIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Body" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.BodyIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Body" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.phys.BodyList
}
nape.phys.BodyType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "BodyType" + " derp!";
};
nape.phys.BodyType.__name__ = ["nape","phys","BodyType"];
nape.phys.BodyType.get_STATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_STATIC;
}
nape.phys.BodyType.get_DYNAMIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
}
nape.phys.BodyType.get_KINEMATIC = function() {
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
}
nape.phys.BodyType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
			return $r;
		}(this))) return "STATIC"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
			return $r;
		}(this))) return "DYNAMIC"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
			return $r;
		}(this))) return "KINEMATIC"; else return "";
	}
	,__class__: nape.phys.BodyType
}
nape.phys.Compound = function() {
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	this.zpp_inner = new zpp_nape.phys.ZPP_Compound();
	this.zpp_inner.outer = this;
	this.zpp_inner.outer_i = this;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND.zpp_inner);
};
nape.phys.Compound.__name__ = ["nape","phys","Compound"];
nape.phys.Compound.__super__ = nape.phys.Interactor;
nape.phys.Compound.prototype = $extend(nape.phys.Interactor.prototype,{
	rotate: function(centre,angle) {
		if(centre != null && centre.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(centre == null) throw "Error: Cannot rotate about a null Vec2";
		if(angle != angle) throw "Error: Cannot rotate by NaN radians";
		var weak = centre.zpp_inner.weak;
		centre.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			b.rotate(centre,angle);
		});
		centre.zpp_inner.weak = weak;
		if(centre.zpp_inner.weak) {
			centre.dispose();
			true;
		} else false;
		return this;
	}
	,translate: function(translation) {
		if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(translation == null) throw "Error: Cannot translate by null Vec2";
		var weak = translation.zpp_inner.weak;
		translation.zpp_inner.weak = false;
		this.visitBodies(function(b) {
			((function($this) {
				var $r;
				if(b.zpp_inner.wrap_pos == null) b.zpp_inner.setupPosition();
				$r = b.zpp_inner.wrap_pos;
				return $r;
			}(this))).addeq(translation);
		});
		translation.zpp_inner.weak = weak;
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,COM: function(weak) {
		if(weak == null) weak = false;
		var ret = nape.geom.Vec2.get(0,0,weak);
		var total = 0.0;
		this.visitBodies(function(b) {
			if(!b.zpp_inner.wrap_shapes.empty()) {
				ret.addeq(((function($this) {
					var $r;
					if(b.zpp_inner.world) throw "Error: Space::world has no " + "worldCOM";
					if(b.zpp_inner.wrap_worldCOM == null) {
						b.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(b.zpp_inner.worldCOMx,b.zpp_inner.worldCOMy,null);
						b.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
						b.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=b.zpp_inner,$bind($_,$_.getworldCOM));
					}
					$r = b.zpp_inner.wrap_worldCOM;
					return $r;
				}(this))).mul((function($this) {
					var $r;
					if(b.zpp_inner.world) throw "Error: Space::world has no mass";
					b.zpp_inner.validate_mass();
					if(b.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
					$r = b.zpp_inner.cmass;
					return $r;
				}(this)),true));
				total += (function($this) {
					var $r;
					if(b.zpp_inner.world) throw "Error: Space::world has no mass";
					b.zpp_inner.validate_mass();
					if(b.zpp_inner.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && b.zpp_inner.shapes.head == null) throw "Error: Given current mass mode, Body::mass only makes sense if it contains shapes";
					$r = b.zpp_inner.cmass;
					return $r;
				}(this));
			}
		});
		if(total == 0.0) throw "Error: COM of an empty Compound is undefined silly";
		ret.muleq(1 / total);
		return ret;
	}
	,visitCompounds: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Compound::visitConstraints";
		var $it0 = this.zpp_inner.wrap_compounds.iterator();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Compound::visitConstraints";
		var $it0 = this.zpp_inner.wrap_constraints.iterator();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			lambda(c);
		}
		var $it1 = this.zpp_inner.wrap_compounds.iterator();
		while( $it1.hasNext() ) {
			var c = $it1.next();
			c.visitConstraints(lambda);
		}
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Compound::visitBodies";
		var $it0 = this.zpp_inner.wrap_bodies.iterator();
		while( $it0.hasNext() ) {
			var b = $it0.next();
			lambda(b);
		}
		var $it1 = this.zpp_inner.wrap_compounds.iterator();
		while( $it1.hasNext() ) {
			var c = $it1.next();
			c.visitBodies(lambda);
		}
	}
	,breakApart: function() {
		this.zpp_inner.breakApart();
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,toString: function() {
		return "Compound" + this.zpp_inner_i.id;
	}
	,set_space: function(space) {
		if(this.zpp_inner.compound != null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";
		this.zpp_inner.immutable_midstep("Compound::space");
		if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != space) {
			if((this.zpp_inner.space == null?null:this.zpp_inner.space.outer) != null) (this.zpp_inner.space == null?null:this.zpp_inner.space.outer).zpp_inner.wrap_compounds.remove(this);
			if(space != null) space.zpp_inner.wrap_compounds.add(this);
		}
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,get_space: function() {
		return this.zpp_inner.space == null?null:this.zpp_inner.space.outer;
	}
	,set_compound: function(compound) {
		this.zpp_inner.immutable_midstep("Compound::compound");
		if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != compound) {
			if((this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer) != null) (this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(this);
			if(compound != null) compound.zpp_inner.wrap_compounds.add(this);
		}
		return this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer;
	}
	,get_compound: function() {
		return this.zpp_inner.compound == null?null:this.zpp_inner.compound.outer;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,__class__: nape.phys.Compound
});
nape.phys.CompoundIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_CompoundList.internal) throw "Error: Cannot instantiate " + "Compound" + "Iterator derp!";
};
nape.phys.CompoundIterator.__name__ = ["nape","phys","CompoundIterator"];
nape.phys.CompoundIterator.get = function(list) {
	var ret = nape.phys.CompoundIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_CompoundList.internal = true;
		var ret1 = new nape.phys.CompoundIterator();
		zpp_nape.util.ZPP_CompoundList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.phys.CompoundIterator.zpp_pool;
		nape.phys.CompoundIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.phys.CompoundIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.CompoundIterator.zpp_pool;
			nape.phys.CompoundIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.phys.CompoundIterator
}
nape.phys.CompoundList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_CompoundList();
	this.zpp_inner.outer = this;
};
nape.phys.CompoundList.__name__ = ["nape","phys","CompoundList"];
nape.phys.CompoundList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.CompoundList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.phys.CompoundList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.CompoundIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.CompoundIterator.zpp_pool;
			nape.phys.CompoundIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.CompoundIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.phys.CompoundIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.CompoundList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.CompoundIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Compound" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.CompoundIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Compound" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.phys.CompoundList
}
nape.phys.FluidProperties = function(density,viscosity) {
	if(viscosity == null) viscosity = 1;
	if(density == null) density = 1;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_FluidProperties(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
		zpp_nape.phys.ZPP_FluidProperties.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.density * 1000;
	if(viscosity != this.zpp_inner.viscosity) {
		if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
		if(viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
		this.zpp_inner.viscosity = viscosity / 1;
		this.zpp_inner.invalidate();
	}
	this.zpp_inner.viscosity;
};
nape.phys.FluidProperties.__name__ = ["nape","phys","FluidProperties"];
nape.phys.FluidProperties.prototype = {
	toString: function() {
		return "{ density: " + this.zpp_inner.density * 1000 + " viscosity: " + this.zpp_inner.viscosity + " gravity: " + Std.string(this.zpp_inner.wrap_gravity) + " }";
	}
	,set_gravity: function(gravity) {
		if(gravity == null) {
			if(this.zpp_inner.wrap_gravity != null) {
				this.zpp_inner.wrap_gravity.zpp_inner._inuse = false;
				this.zpp_inner.wrap_gravity.dispose();
				this.zpp_inner.wrap_gravity = null;
			}
		} else {
			if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
			this.zpp_inner.wrap_gravity.set(gravity);
		}
		return this.zpp_inner.wrap_gravity;
	}
	,get_gravity: function() {
		return this.zpp_inner.wrap_gravity;
	}
	,set_viscosity: function(viscosity) {
		if(viscosity != this.zpp_inner.viscosity) {
			if(viscosity != viscosity) throw "Error: FluidProperties::" + "viscosity" + " cannot be NaN";
			if(viscosity < 0) throw "Error: FluidProperties::" + "viscosity" + " (" + viscosity + ") must be >= 0";
			this.zpp_inner.viscosity = viscosity / 1;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.viscosity;
	}
	,get_viscosity: function() {
		return this.zpp_inner.viscosity;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			if(density != density) throw "Error: FluidProperties::" + "density" + " cannot be NaN";
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate();
		}
		return this.zpp_inner.density * 1000;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,copy: function() {
		var ret = new nape.phys.FluidProperties(this.zpp_inner.density * 1000,this.zpp_inner.viscosity);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		ret.set_gravity(this.zpp_inner.wrap_gravity);
		return ret;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,__class__: nape.phys.FluidProperties
}
nape.phys.GravMassMode = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "GravMassMode" + " derp!";
};
nape.phys.GravMassMode.__name__ = ["nape","phys","GravMassMode"];
nape.phys.GravMassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
}
nape.phys.GravMassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
}
nape.phys.GravMassMode.get_SCALED = function() {
	if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
}
nape.phys.GravMassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_FIXED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.GravMassMode_SCALED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.GravMassMode_SCALED = new nape.phys.GravMassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.GravMassMode_SCALED;
			return $r;
		}(this))) return "SCALED"; else return "";
	}
	,__class__: nape.phys.GravMassMode
}
nape.phys.InertiaMode = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "InertiaMode" + " derp!";
};
nape.phys.InertiaMode.__name__ = ["nape","phys","InertiaMode"];
nape.phys.InertiaMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
}
nape.phys.InertiaMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
}
nape.phys.InertiaMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.InertiaMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.InertiaMode_FIXED = new nape.phys.InertiaMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.InertiaMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape.phys.InertiaMode
}
nape.phys.InteractorIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_InteractorList.internal) throw "Error: Cannot instantiate " + "Interactor" + "Iterator derp!";
};
nape.phys.InteractorIterator.__name__ = ["nape","phys","InteractorIterator"];
nape.phys.InteractorIterator.get = function(list) {
	var ret = nape.phys.InteractorIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_InteractorList.internal = true;
		var ret1 = new nape.phys.InteractorIterator();
		zpp_nape.util.ZPP_InteractorList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.phys.InteractorIterator.zpp_pool;
		nape.phys.InteractorIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.phys.InteractorIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.phys.InteractorIterator.zpp_pool;
			nape.phys.InteractorIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.phys.InteractorIterator
}
nape.phys.InteractorList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_InteractorList();
	this.zpp_inner.outer = this;
};
nape.phys.InteractorList.__name__ = ["nape","phys","InteractorList"];
nape.phys.InteractorList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.phys.InteractorList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.phys.InteractorList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.InteractorIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.phys.InteractorIterator.zpp_pool;
			nape.phys.InteractorIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.InteractorIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.phys.InteractorIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.phys.InteractorList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.phys.InteractorIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Interactor" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.phys.InteractorIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner_i) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer_i;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer_i;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer_i;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			} else this.zpp_inner.inner.add(obj.zpp_inner_i);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Interactor" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner_i); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner_i);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer_i;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner_i);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.phys.InteractorList
}
nape.phys.MassMode = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "MassMode" + " derp!";
};
nape.phys.MassMode.__name__ = ["nape","phys","MassMode"];
nape.phys.MassMode.get_DEFAULT = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
}
nape.phys.MassMode.get_FIXED = function() {
	if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.MassMode_FIXED;
}
nape.phys.MassMode.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_DEFAULT == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_DEFAULT = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_DEFAULT;
			return $r;
		}(this))) return "DEFAULT"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.MassMode_FIXED == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.MassMode_FIXED = new nape.phys.MassMode();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.MassMode_FIXED;
			return $r;
		}(this))) return "FIXED"; else return "";
	}
	,__class__: nape.phys.MassMode
}
nape.phys.Material = function(elasticity,dynamicFriction,staticFriction,density,rollingFriction) {
	if(rollingFriction == null) rollingFriction = 0.001;
	if(density == null) density = 1;
	if(staticFriction == null) staticFriction = 2.0;
	if(dynamicFriction == null) dynamicFriction = 1.0;
	if(elasticity == null) elasticity = 0.0;
	this.zpp_inner = null;
	if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner = new zpp_nape.phys.ZPP_Material(); else {
		this.zpp_inner = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.next;
		this.zpp_inner.next = null;
	}
	null;
	this.zpp_inner.outer = this;
	if(elasticity != this.zpp_inner.elasticity) {
		if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
		this.zpp_inner.elasticity = elasticity / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.elasticity;
	if(dynamicFriction != this.zpp_inner.dynamicFriction) {
		if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
		if(dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " cannot be negative";
		this.zpp_inner.dynamicFriction = dynamicFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.dynamicFriction;
	if(staticFriction != this.zpp_inner.staticFriction) {
		if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
		if(staticFriction < 0) throw "Error: Material::" + "staticFriction" + " cannot be negative";
		this.zpp_inner.staticFriction = staticFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.staticFriction;
	if(density != this.zpp_inner.density * 1000) {
		if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
		if(density < 0) throw "Error: Material::density must be positive";
		if(density < 0) throw "Error: Material::" + "density" + " cannot be negative";
		this.zpp_inner.density = density / 1000;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
	}
	this.zpp_inner.density * 1000;
	if(rollingFriction != this.zpp_inner.rollingFriction) {
		if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
		if(rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " cannot be negative";
		this.zpp_inner.rollingFriction = rollingFriction / 1;
		this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
	}
	this.zpp_inner.rollingFriction;
};
nape.phys.Material.__name__ = ["nape","phys","Material"];
nape.phys.Material.wood = function() {
	return new nape.phys.Material(0.4,0.2,0.38,0.7,0.005);
}
nape.phys.Material.steel = function() {
	return new nape.phys.Material(0.2,0.57,0.74,7.8,0.001);
}
nape.phys.Material.ice = function() {
	return new nape.phys.Material(0.3,0.03,0.1,0.9,0.0001);
}
nape.phys.Material.rubber = function() {
	return new nape.phys.Material(0.8,1.0,1.4,1.5,0.01);
}
nape.phys.Material.glass = function() {
	return new nape.phys.Material(0.4,0.4,0.94,2.6,0.002);
}
nape.phys.Material.sand = function() {
	return new nape.phys.Material(-1.0,0.45,0.6,1.6,16.0);
}
nape.phys.Material.prototype = {
	toString: function() {
		return "{ elasticity: " + this.zpp_inner.elasticity + " dynamicFriction: " + this.zpp_inner.dynamicFriction + " staticFriction: " + this.zpp_inner.staticFriction + " density: " + this.zpp_inner.density * 1000 + " rollingFriction: " + this.zpp_inner.rollingFriction + " }";
	}
	,set_rollingFriction: function(rollingFriction) {
		if(rollingFriction != this.zpp_inner.rollingFriction) {
			if(rollingFriction != rollingFriction) throw "Error: Material::" + "rollingFriction" + " cannot be NaN";
			if(rollingFriction < 0) throw "Error: Material::" + "rollingFriction" + " cannot be negative";
			this.zpp_inner.rollingFriction = rollingFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.rollingFriction;
	}
	,get_rollingFriction: function() {
		return this.zpp_inner.rollingFriction;
	}
	,set_density: function(density) {
		if(density != this.zpp_inner.density * 1000) {
			if(density != density) throw "Error: Material::" + "density" + " cannot be NaN";
			if(density < 0) throw "Error: Material::density must be positive";
			if(density < 0) throw "Error: Material::" + "density" + " cannot be negative";
			this.zpp_inner.density = density / 1000;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.PROPS);
		}
		return this.zpp_inner.density * 1000;
	}
	,get_density: function() {
		return this.zpp_inner.density * 1000;
	}
	,set_staticFriction: function(staticFriction) {
		if(staticFriction != this.zpp_inner.staticFriction) {
			if(staticFriction != staticFriction) throw "Error: Material::" + "staticFriction" + " cannot be NaN";
			if(staticFriction < 0) throw "Error: Material::" + "staticFriction" + " cannot be negative";
			this.zpp_inner.staticFriction = staticFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.staticFriction;
	}
	,get_staticFriction: function() {
		return this.zpp_inner.staticFriction;
	}
	,set_dynamicFriction: function(dynamicFriction) {
		if(dynamicFriction != this.zpp_inner.dynamicFriction) {
			if(dynamicFriction != dynamicFriction) throw "Error: Material::" + "dynamicFriction" + " cannot be NaN";
			if(dynamicFriction < 0) throw "Error: Material::" + "dynamicFriction" + " cannot be negative";
			this.zpp_inner.dynamicFriction = dynamicFriction / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ANGDRAG | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.dynamicFriction;
	}
	,get_dynamicFriction: function() {
		return this.zpp_inner.dynamicFriction;
	}
	,set_elasticity: function(elasticity) {
		if(elasticity != this.zpp_inner.elasticity) {
			if(elasticity != elasticity) throw "Error: Material::" + "elasticity" + " cannot be NaN";
			this.zpp_inner.elasticity = elasticity / 1;
			this.zpp_inner.invalidate(zpp_nape.phys.ZPP_Material.WAKE | zpp_nape.phys.ZPP_Material.ARBITERS);
		}
		return this.zpp_inner.elasticity;
	}
	,get_elasticity: function() {
		return this.zpp_inner.elasticity;
	}
	,copy: function() {
		var ret = new nape.phys.Material(this.zpp_inner.elasticity,this.zpp_inner.dynamicFriction,this.zpp_inner.staticFriction,this.zpp_inner.density * 1000,this.zpp_inner.rollingFriction);
		if(this.zpp_inner.userData != null) ret.zpp_inner.userData = Reflect.copy(this.zpp_inner.userData);
		return ret;
	}
	,get_shapes: function() {
		if(this.zpp_inner.wrap_shapes == null) this.zpp_inner.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.zpp_inner.shapes,true);
		return this.zpp_inner.wrap_shapes;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,__class__: nape.phys.Material
}
nape.shape = {}
nape.shape.Shape = function() {
	this.zpp_inner = null;
	try {
		nape.phys.Interactor.call(this);
	} catch( e ) {
	}
	throw "Error: Shape cannot be instantiated derp!";
};
nape.shape.Shape.__name__ = ["nape","shape","Shape"];
nape.shape.Shape.__super__ = nape.phys.Interactor;
nape.shape.Shape.prototype = $extend(nape.phys.Interactor.prototype,{
	toString: function() {
		var ret = this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?"Circle":"Polygon";
		return ret + "#" + this.zpp_inner_i.id;
	}
	,copy: function() {
		return this.zpp_inner.copy();
	}
	,contains: function(point) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Cannot check null point for containment";
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) == null) throw "Error: Shape is not well defined without a Body";
		zpp_nape.geom.ZPP_Geom.validateShape(this.zpp_inner);
		point.zpp_inner.validate();
		var ret = zpp_nape.geom.ZPP_Collide.shapeContains(this.zpp_inner,point.zpp_inner);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,transform: function(matrix) {
		this.zpp_inner.immutable_midstep("Shape::transform()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(matrix == null) throw "Error: Cannot transform Shape by null matrix";
		if(matrix.singular()) throw "Error: Cannot transform Shape by a singular matrix";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			if(matrix.equiorthogonal()) this.zpp_inner.circle.__transform(matrix); else throw "Error: Cannot transform Circle by a non equiorthogonal matrix";
		} else this.zpp_inner.polygon.__transform(matrix);
		return this;
	}
	,rotate: function(angle) {
		this.zpp_inner.immutable_midstep("Shape::rotate()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(angle != angle) throw "Error: Cannot rotate Shape by NaN";
		var dr = angle % (2 * Math.PI);
		if(dr != 0.0) {
			var cos = Math.cos(angle);
			var sin = Math.sin(angle);
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__rotate(sin,cos); else this.zpp_inner.polygon.__rotate(sin,cos);
		}
		return this;
	}
	,scale: function(scalex,scaley) {
		this.zpp_inner.immutable_midstep("Shape::scale()");
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(scalex != scalex || scaley != scaley) throw "Error: Cannot scale Shape by NaN";
		if(scalex == 0 || scaley == 0) throw "Error: Cannot Scale shape by a factor of 0";
		if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var d = scalex * scalex - scaley * scaley;
			if(d * d < nape.Config.epsilon * nape.Config.epsilon) this.zpp_inner.circle.__scale(scalex,scaley); else throw "Error: Cannot perform a non equal scaling on a Circle";
		} else this.zpp_inner.polygon.__scale(scalex,scaley);
		return this;
	}
	,translate: function(translation) {
		this.zpp_inner.immutable_midstep("Shape::translate()");
		if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(translation == null) throw "Error: Cannot displace Shape by null Vec2";
		if(translation.lsq() > 0) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.__translate((function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this))); else this.zpp_inner.polygon.__translate((function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.x;
				return $r;
			}(this)),(function($this) {
				var $r;
				if(translation != null && translation.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				translation.zpp_inner.validate();
				$r = translation.zpp_inner.y;
				return $r;
			}(this)));
		}
		if(translation.zpp_inner.weak) {
			translation.dispose();
			true;
		} else false;
		return this;
	}
	,get_bounds: function() {
		return this.zpp_inner.aabb.wrapper();
	}
	,set_sensorEnabled: function(sensorEnabled) {
		this.zpp_inner.immutable_midstep("Shape::sensorEnabled");
		this.zpp_inner.sensorEnabled = sensorEnabled;
		this.zpp_inner.wake();
		return this.zpp_inner.sensorEnabled;
	}
	,get_sensorEnabled: function() {
		return this.zpp_inner.sensorEnabled;
	}
	,set_fluidEnabled: function(fluidEnabled) {
		this.zpp_inner.immutable_midstep("Shape::fluidEnabled");
		this.zpp_inner.fluidEnabled = fluidEnabled;
		if(fluidEnabled && this.zpp_inner.fluidProperties == null) this.set_fluidProperties(new nape.phys.FluidProperties());
		this.zpp_inner.wake();
		return this.zpp_inner.fluidEnabled;
	}
	,get_fluidEnabled: function() {
		return this.zpp_inner.fluidEnabled;
	}
	,set_fluidProperties: function(fluidProperties) {
		if(fluidProperties == null) throw "Error: Cannot assign null as Shape fluidProperties, disable fluids by setting fluidEnabled to false";
		this.zpp_inner.setFluid(fluidProperties.zpp_inner);
		return (function($this) {
			var $r;
			$this.zpp_inner.immutable_midstep("Shape::fluidProperties");
			if($this.zpp_inner.fluidProperties == null) $this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
			$r = $this.zpp_inner.fluidProperties.wrapper();
			return $r;
		}(this));
	}
	,get_fluidProperties: function() {
		this.zpp_inner.immutable_midstep("Shape::fluidProperties");
		if(this.zpp_inner.fluidProperties == null) this.zpp_inner.setFluid(new nape.phys.FluidProperties().zpp_inner);
		return this.zpp_inner.fluidProperties.wrapper();
	}
	,set_filter: function(filter) {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		return this.zpp_inner.filter.wrapper();
	}
	,get_filter: function() {
		return this.zpp_inner.filter.wrapper();
	}
	,set_material: function(material) {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		return this.zpp_inner.material.wrapper();
	}
	,get_material: function() {
		return this.zpp_inner.material.wrapper();
	}
	,get_angDrag: function() {
		this.zpp_inner.validate_angDrag();
		return this.zpp_inner.angDrag;
	}
	,get_inertia: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.inertia;
	}
	,get_area: function() {
		this.zpp_inner.validate_area_inertia();
		return this.zpp_inner.area;
	}
	,set_localCOM: function(localCOM) {
		this.zpp_inner.immutable_midstep("Body::localCOM");
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(this.zpp_inner.body != null && this.zpp_inner.body.space != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Cannot modify Shape belonging to a static Object once inside a Space";
		if(localCOM == null) throw "Error: Shape::localCOM cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_localCOM == null) {
				if($this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
			}
			$r = $this.zpp_inner.wrap_localCOM;
			return $r;
		}(this))).set(localCOM);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_localCOM == null) {
				if($this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) $this.zpp_inner.circle.setupLocalCOM(); else $this.zpp_inner.polygon.setupLocalCOM();
			}
			$r = $this.zpp_inner.wrap_localCOM;
			return $r;
		}(this));
	}
	,get_localCOM: function() {
		if(this.zpp_inner.wrap_localCOM == null) {
			if(this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zpp_inner.circle.setupLocalCOM(); else this.zpp_inner.polygon.setupLocalCOM();
		}
		return this.zpp_inner.wrap_localCOM;
	}
	,get_worldCOM: function() {
		if(this.zpp_inner.wrap_worldCOM == null) {
			this.zpp_inner.wrap_worldCOM = nape.geom.Vec2.get(this.zpp_inner.worldCOMx,this.zpp_inner.worldCOMy,null);
			this.zpp_inner.wrap_worldCOM.zpp_inner._inuse = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._immutable = true;
			this.zpp_inner.wrap_worldCOM.zpp_inner._validate = ($_=this.zpp_inner,$bind($_,$_.getworldCOM));
		}
		return this.zpp_inner.wrap_worldCOM;
	}
	,get_castPolygon: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON?this.zpp_inner.polygon.outer_zn:null;
	}
	,get_castCircle: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?this.zpp_inner.circle.outer_zn:null;
	}
	,set_body: function(body) {
		this.zpp_inner.immutable_midstep("Shape::body");
		if((this.zpp_inner.body != null?this.zpp_inner.body.outer:null) != body) {
			if(this.zpp_inner.body != null) (this.zpp_inner.body != null?this.zpp_inner.body.outer:null).zpp_inner.wrap_shapes.remove(this);
			if(body != null) body.zpp_inner.wrap_shapes.add(this);
		}
		return this.zpp_inner.body != null?this.zpp_inner.body.outer:null;
	}
	,get_body: function() {
		return this.zpp_inner.body != null?this.zpp_inner.body.outer:null;
	}
	,isPolygon: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
	}
	,isCircle: function() {
		return this.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
	}
	,get_type: function() {
		return zpp_nape.shape.ZPP_Shape.types[this.zpp_inner.type];
	}
	,__class__: nape.shape.Shape
});
nape.shape.Circle = function(radius,localCOM,material,filter) {
	this.zpp_inner_zn = null;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Circle();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	this.zpp_inner.immutable_midstep("Circle::radius");
	if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
	if(radius != this.zpp_inner_zn.radius) {
		if(radius != radius) throw "Error: Circle::radius cannot be NaN";
		if(radius < nape.Config.epsilon) throw "Error: Circle::radius (" + radius + ") must be > Config.epsilon";
		if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
		this.zpp_inner_zn.radius = radius;
		this.zpp_inner_zn.invalidate_radius();
	}
	this.zpp_inner_zn.radius;
	if(localCOM == null) {
		this.zpp_inner.localCOMx = 0;
		this.zpp_inner.localCOMy = 0;
	} else {
		if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		this.zpp_inner.localCOMx = (function($this) {
			var $r;
			if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			localCOM.zpp_inner.validate();
			$r = localCOM.zpp_inner.x;
			return $r;
		}(this));
		this.zpp_inner.localCOMy = (function($this) {
			var $r;
			if(localCOM != null && localCOM.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			localCOM.zpp_inner.validate();
			$r = localCOM.zpp_inner.y;
			return $r;
		}(this));
		if(localCOM.zpp_inner.weak) {
			localCOM.dispose();
			true;
		} else false;
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
nape.shape.Circle.__name__ = ["nape","shape","Circle"];
nape.shape.Circle.__super__ = nape.shape.Shape;
nape.shape.Circle.prototype = $extend(nape.shape.Shape.prototype,{
	set_radius: function(radius) {
		this.zpp_inner.immutable_midstep("Circle::radius");
		if(this.zpp_inner.body != null && this.zpp_inner.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.zpp_inner.body.space != null) throw "Error: Cannot modifiy radius of Circle contained in static object once added to space";
		if(radius != this.zpp_inner_zn.radius) {
			if(radius != radius) throw "Error: Circle::radius cannot be NaN";
			if(radius < nape.Config.epsilon) throw "Error: Circle::radius (" + radius + ") must be > Config.epsilon";
			if(radius > 1e100) throw "Error: Circle::radius (" + radius + ") must be < PR(Const).FMAX";
			this.zpp_inner_zn.radius = radius;
			this.zpp_inner_zn.invalidate_radius();
		}
		return this.zpp_inner_zn.radius;
	}
	,get_radius: function() {
		return this.zpp_inner_zn.radius;
	}
	,__class__: nape.shape.Circle
});
nape.shape.Edge = function() {
	this.zpp_inner = null;
	if(!zpp_nape.shape.ZPP_Edge.internal) throw "Error: Cannot instantiate an Edge derp!";
};
nape.shape.Edge.__name__ = ["nape","shape","Edge"];
nape.shape.Edge.prototype = {
	toString: function() {
		if(this.zpp_inner.polygon == null) return "Edge(object-pooled)"; else if(this.zpp_inner.polygon.body == null) {
			this.zpp_inner.polygon.validate_laxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " }";
		} else {
			this.zpp_inner.polygon.validate_gaxi();
			return "{ localNormal : " + ("{ x: " + this.zpp_inner.lnormx + " y: " + this.zpp_inner.lnormy + " }") + " worldNormal : " + ("{ x: " + this.zpp_inner.gnormx + " y: " + this.zpp_inner.gnormy + " }") + " }";
		}
	}
	,get_worldVertex2: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp1.wrapper();
	}
	,get_worldVertex1: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gp0.wrapper();
	}
	,get_localVertex2: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp1.wrapper();
	}
	,get_localVertex1: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lp0.wrapper();
	}
	,get_worldProjection: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if(this.zpp_inner.polygon.body == null) throw "Error: Edge world projection only makes sense for Polygons contained within a rigid body";
		this.zpp_inner.polygon.validate_gaxi();
		return this.zpp_inner.gprojection;
	}
	,get_localProjection: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.lprojection;
	}
	,get_length: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		this.zpp_inner.polygon.validate_laxi();
		return this.zpp_inner.length;
	}
	,get_worldNormal: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if(this.zpp_inner.wrap_gnorm == null) this.zpp_inner.getgnorm();
		return this.zpp_inner.wrap_gnorm;
	}
	,get_localNormal: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		if(this.zpp_inner.wrap_lnorm == null) this.zpp_inner.getlnorm();
		return this.zpp_inner.wrap_lnorm;
	}
	,get_polygon: function() {
		if(this.zpp_inner.polygon == null) throw "Error: Edge not current in use";
		return this.zpp_inner.polygon.outer_zn;
	}
	,__class__: nape.shape.Edge
}
nape.shape.EdgeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_EdgeList.internal) throw "Error: Cannot instantiate " + "Edge" + "Iterator derp!";
};
nape.shape.EdgeIterator.__name__ = ["nape","shape","EdgeIterator"];
nape.shape.EdgeIterator.get = function(list) {
	var ret = nape.shape.EdgeIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_EdgeList.internal = true;
		var ret1 = new nape.shape.EdgeIterator();
		zpp_nape.util.ZPP_EdgeList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.shape.EdgeIterator.zpp_pool;
		nape.shape.EdgeIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.shape.EdgeIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.shape.EdgeIterator.zpp_pool;
			nape.shape.EdgeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.shape.EdgeIterator
}
nape.shape.EdgeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_EdgeList();
	this.zpp_inner.outer = this;
};
nape.shape.EdgeList.__name__ = ["nape","shape","EdgeList"];
nape.shape.EdgeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.shape.EdgeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.shape.EdgeList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.shape.EdgeIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.shape.EdgeIterator.zpp_pool;
			nape.shape.EdgeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.shape.EdgeIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.shape.EdgeIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.shape.EdgeList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.shape.EdgeIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Edge" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.shape.EdgeIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Edge" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = index == this.get_length() - 1?index:this.get_length() - 2 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.wrapper();
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.shape.EdgeList
}
nape.shape.Polygon = function(localVerts,material,filter) {
	this.zpp_inner_zn = null;
	try {
		nape.shape.Shape.call(this);
	} catch( e ) {
	}
	if(localVerts == null) throw "Error: localVerts cannot be null";
	this.zpp_inner_zn = new zpp_nape.shape.ZPP_Polygon();
	this.zpp_inner_zn.outer = this;
	this.zpp_inner_zn.outer_zn = this;
	this.zpp_inner = this.zpp_inner_zn;
	this.zpp_inner_i = this.zpp_inner;
	this.zpp_inner_i.outer_i = this;
	if(js.Boot.__instanceof(localVerts,Array)) {
		var lv = localVerts;
		var _g = 0;
		while(_g < lv.length) {
			var vite = lv[_g];
			++_g;
			if(vite == null) throw "Error: Array<Vec2> contains null objects";
			if(!js.Boot.__instanceof(vite,nape.geom.Vec2)) throw "Error: Array<Vec2> contains non Vec2 objects";
			var x = vite;
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv = localVerts;
		var $it0 = lv.iterator();
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(x == null) throw "Error: Vec2List contains null objects";
			if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			((function($this) {
				var $r;
				if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
				$r = $this.zpp_inner_zn.wrap_lverts;
				return $r;
			}(this))).push((function($this) {
				var $r;
				if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				$r = nape.geom.Vec2.get((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.x;
					return $r;
				}($this)),(function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					x.zpp_inner.validate();
					$r = x.zpp_inner.y;
					return $r;
				}($this)),false);
				return $r;
			}(this)));
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.GeomPoly)) {
		var lv = localVerts;
		if(lv != null && lv.zpp_disp) throw "Error: " + "GeomPoly" + " has been disposed and cannot be used!";
		var verts = lv.zpp_inner.vertices;
		if(verts != null) {
			var vite = verts;
			do {
				var x = nape.geom.Vec2.get(vite.x,vite.y,null);
				vite = vite.next;
				((function($this) {
					var $r;
					if($this.zpp_inner_zn.wrap_lverts == null) $this.zpp_inner_zn.getlverts();
					$r = $this.zpp_inner_zn.wrap_lverts;
					return $r;
				}(this))).push((function($this) {
					var $r;
					if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
					$r = nape.geom.Vec2.get((function($this) {
						var $r;
						if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x.zpp_inner.validate();
						$r = x.zpp_inner.x;
						return $r;
					}($this)),(function($this) {
						var $r;
						if(x != null && x.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
						x.zpp_inner.validate();
						$r = x.zpp_inner.y;
						return $r;
					}($this)),false);
					return $r;
				}(this)));
				x.dispose();
			} while(vite != verts);
		}
	} else throw "Error: Invalid type for polygon object, should be Array<Vec2>, Vec2List, GeomPoly or for flash10+ flash.Vector<Vec2>";
	if(js.Boot.__instanceof(localVerts,Array)) {
		var lv = localVerts;
		var i = 0;
		while(i < lv.length) {
			var cur = lv[i];
			if(cur.zpp_inner.weak?(function($this) {
				var $r;
				cur.dispose();
				$r = true;
				return $r;
			}(this)):false) {
				lv.splice(i,1);
				continue;
			}
			i++;
		}
	} else if(js.Boot.__instanceof(localVerts,nape.geom.Vec2List)) {
		var lv = localVerts;
		if(lv.zpp_inner._validate != null) lv.zpp_inner._validate();
		var ins = lv.zpp_inner.inner;
		var pre = null;
		var cur = ins.head;
		while(cur != null) {
			var x = cur.elt;
			if(x.outer.zpp_inner.weak) {
				cur = ins.erase(pre);
				if(x.outer.zpp_inner.weak) {
					x.outer.dispose();
					true;
				} else false;
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
	}
	if(material == null) {
		if(zpp_nape.phys.ZPP_Material.zpp_pool == null) this.zpp_inner.material = new zpp_nape.phys.ZPP_Material(); else {
			this.zpp_inner.material = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = this.zpp_inner.material.next;
			this.zpp_inner.material.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::material");
		if(material == null) throw "Error: Cannot assign null as Shape material";
		this.zpp_inner.setMaterial(material.zpp_inner);
		this.zpp_inner.material.wrapper();
	}
	if(filter == null) {
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) this.zpp_inner.filter = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			this.zpp_inner.filter = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = this.zpp_inner.filter.next;
			this.zpp_inner.filter.next = null;
		}
		null;
	} else {
		this.zpp_inner.immutable_midstep("Shape::filter");
		if(filter == null) throw "Error: Cannot assign null as Shape filter";
		this.zpp_inner.setFilter(filter.zpp_inner);
		this.zpp_inner.filter.wrapper();
	}
	this.zpp_inner_i.insert_cbtype(zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE.zpp_inner);
};
nape.shape.Polygon.__name__ = ["nape","shape","Polygon"];
nape.shape.Polygon.rect = function(x,y,width,height,weak) {
	if(weak == null) weak = false;
	if(x != x || y != y || width != width || height != height) throw "Error: Polygon.rect cannot accept NaN arguments";
	return [nape.geom.Vec2.get(x,y,weak),nape.geom.Vec2.get(x + width,y,weak),nape.geom.Vec2.get(x + width,y + height,weak),nape.geom.Vec2.get(x,y + height,weak)];
}
nape.shape.Polygon.box = function(width,height,weak) {
	if(weak == null) weak = false;
	if(width != width || height != height) throw "Error: Polygon.box cannot accept NaN arguments";
	return nape.shape.Polygon.rect(-width / 2,-height / 2,width,height,weak);
}
nape.shape.Polygon.regular = function(xRadius,yRadius,edgeCount,angleOffset,weak) {
	if(weak == null) weak = false;
	if(angleOffset == null) angleOffset = 0.0;
	if(xRadius != xRadius || yRadius != yRadius || angleOffset != angleOffset) throw "Error: Polygon.regular cannot accept NaN arguments";
	var ret = [];
	var dangle = Math.PI * 2 / edgeCount;
	var _g = 0;
	while(_g < edgeCount) {
		var i = _g++;
		var ang = i * dangle + angleOffset;
		var x = nape.geom.Vec2.get(Math.cos(ang) * xRadius,Math.sin(ang) * yRadius,weak);
		ret.push(x);
	}
	return ret;
}
nape.shape.Polygon.__super__ = nape.shape.Shape;
nape.shape.Polygon.prototype = $extend(nape.shape.Shape.prototype,{
	validity: function() {
		return this.zpp_inner_zn.valid();
	}
	,get_edges: function() {
		if(this.zpp_inner_zn.wrap_edges == null) this.zpp_inner_zn.getedges();
		return this.zpp_inner_zn.wrap_edges;
	}
	,get_worldVerts: function() {
		if(this.zpp_inner_zn.wrap_gverts == null) this.zpp_inner_zn.getgverts();
		return this.zpp_inner_zn.wrap_gverts;
	}
	,get_localVerts: function() {
		if(this.zpp_inner_zn.wrap_lverts == null) this.zpp_inner_zn.getlverts();
		return this.zpp_inner_zn.wrap_lverts;
	}
	,__class__: nape.shape.Polygon
});
nape.shape.ShapeIterator = function() {
	this.zpp_next = null;
	this.zpp_critical = false;
	this.zpp_i = 0;
	this.zpp_inner = null;
	if(!zpp_nape.util.ZPP_ShapeList.internal) throw "Error: Cannot instantiate " + "Shape" + "Iterator derp!";
};
nape.shape.ShapeIterator.__name__ = ["nape","shape","ShapeIterator"];
nape.shape.ShapeIterator.get = function(list) {
	var ret = nape.shape.ShapeIterator.zpp_pool == null?(function($this) {
		var $r;
		zpp_nape.util.ZPP_ShapeList.internal = true;
		var ret1 = new nape.shape.ShapeIterator();
		zpp_nape.util.ZPP_ShapeList.internal = false;
		$r = ret1;
		return $r;
	}(this)):(function($this) {
		var $r;
		var r = nape.shape.ShapeIterator.zpp_pool;
		nape.shape.ShapeIterator.zpp_pool = r.zpp_next;
		$r = r;
		return $r;
	}(this));
	ret.zpp_i = 0;
	ret.zpp_inner = list;
	ret.zpp_critical = false;
	return ret;
}
nape.shape.ShapeIterator.prototype = {
	next: function() {
		this.zpp_critical = false;
		return this.zpp_inner.at(this.zpp_i++);
	}
	,hasNext: function() {
		this.zpp_inner.zpp_inner.valmod();
		var length = this.zpp_inner.get_length();
		this.zpp_critical = true;
		if(this.zpp_i < length) return true; else {
			this.zpp_next = nape.shape.ShapeIterator.zpp_pool;
			nape.shape.ShapeIterator.zpp_pool = this;
			this.zpp_inner = null;
			return false;
		}
	}
	,__class__: nape.shape.ShapeIterator
}
nape.shape.ShapeList = function() {
	this.zpp_inner = null;
	this.zpp_inner = new zpp_nape.util.ZPP_ShapeList();
	this.zpp_inner.outer = this;
};
nape.shape.ShapeList.__name__ = ["nape","shape","ShapeList"];
nape.shape.ShapeList.fromArray = function(array) {
	if(array == null) throw "Error: Cannot convert null Array to Nape list";
	var ret = new nape.shape.ShapeList();
	var _g = 0;
	while(_g < array.length) {
		var i = array[_g];
		++_g;
		ret.push(i);
	}
	return ret;
}
nape.shape.ShapeList.prototype = {
	filter: function(lambda) {
		if(lambda == null) throw "Error: Cannot select elements of list with null";
		var i = 0;
		while(i < this.get_length()) {
			var x = this.at(i);
			try {
				if(lambda(x)) i++; else this.remove(x);
			} catch( e ) {
				break;
			}
		}
		return this;
	}
	,foreach: function(lambda) {
		if(lambda == null) throw "Error: Cannot execute null on list elements";
		var it = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.shape.ShapeIterator.get($this);
			return $r;
		}(this));
		while(it.hasNext()) try {
			lambda((function($this) {
				var $r;
				it.zpp_critical = false;
				$r = it.zpp_inner.at(it.zpp_i++);
				return $r;
			}(this)));
		} catch( e ) {
			it.zpp_next = nape.shape.ShapeIterator.zpp_pool;
			nape.shape.ShapeIterator.zpp_pool = it;
			it.zpp_inner = null;
			break;
		}
		return this;
	}
	,toString: function() {
		var ret = "[";
		var fst = true;
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.shape.ShapeIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			if(!fst) ret += ",";
			ret += i == null?"NULL":i.toString();
			fst = false;
		}
		return ret + "]";
	}
	,merge: function(xs) {
		if(xs == null) throw "Error: Cannot merge with null list";
		var $it0 = (function($this) {
			var $r;
			xs.zpp_inner.valmod();
			$r = nape.shape.ShapeIterator.get(xs);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var x = $it0.next();
			if(!this.has(x)) {
				if(this.zpp_inner.reverse_flag) this.push(x); else this.unshift(x);
			}
		}
	}
	,copy: function(deep) {
		if(deep == null) deep = false;
		var ret = new nape.shape.ShapeList();
		var $it0 = (function($this) {
			var $r;
			$this.zpp_inner.valmod();
			$r = nape.shape.ShapeIterator.get($this);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var i = $it0.next();
			ret.push(deep?(function($this) {
				var $r;
				throw "Error: " + "Shape" + " is not a copyable type";
				$r = null;
				return $r;
			}(this)):i);
		}
		return ret;
	}
	,iterator: function() {
		this.zpp_inner.valmod();
		return nape.shape.ShapeIterator.get(this);
	}
	,empty: function() {
		return this.zpp_inner.inner.head == null;
	}
	,clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!(this.zpp_inner.inner.head == null)) this.pop(); else while(!(this.zpp_inner.inner.head == null)) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var ret;
		ret = false;
		var cx_ite = this.zpp_inner.inner.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x == obj.zpp_inner) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,add: function(obj) {
		return this.zpp_inner.reverse_flag?this.push(obj):this.unshift(obj);
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		} else {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.zpp_inner.inner.head == null) throw "Error: Cannot remove from empty list";
		this.zpp_inner.valmod();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.zpp_inner.inner.head.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.pop();
		} else {
			if(this.zpp_inner.at_ite != null && this.zpp_inner.at_ite.next == null) this.zpp_inner.at_ite = null;
			var ite = this.get_length() == 1?null:this.zpp_inner.inner.iterator_at(this.get_length() - 2);
			ret = ite == null?this.zpp_inner.inner.head.elt:ite.next.elt;
			var retx = ret.outer;
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.zpp_inner.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.outer;
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			} else this.zpp_inner.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Shape" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_inner.valmod();
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.zpp_inner.inner.add(obj.zpp_inner); else {
				if(this.zpp_inner.push_ite == null) this.zpp_inner.push_ite = this.zpp_inner.inner.head == null?null:this.zpp_inner.inner.iterator_at(this.get_length() - 1);
				this.zpp_inner.push_ite = this.zpp_inner.inner.insert(this.zpp_inner.push_ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_inner.valmod();
		if(index < 0 || index >= this.get_length()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.get_length() - 1 - index;
		if(index < this.zpp_inner.at_index || this.zpp_inner.at_ite == null) {
			this.zpp_inner.at_index = index;
			this.zpp_inner.at_ite = this.zpp_inner.inner.iterator_at(index);
		} else while(this.zpp_inner.at_index != index) {
			this.zpp_inner.at_index++;
			this.zpp_inner.at_ite = this.zpp_inner.at_ite.next;
		}
		return this.zpp_inner.at_ite.elt.outer;
	}
	,has: function(obj) {
		this.zpp_inner.valmod();
		return this.zpp_inner.inner.has(obj.zpp_inner);
	}
	,get_length: function() {
		this.zpp_inner.valmod();
		if(this.zpp_inner.zip_length) {
			this.zpp_inner.zip_length = false;
			this.zpp_inner.user_length = this.zpp_inner.inner.length;
		}
		return this.zpp_inner.user_length;
	}
	,__class__: nape.shape.ShapeList
}
nape.shape.ShapeType = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ShapeType" + " derp!";
};
nape.shape.ShapeType.__name__ = ["nape","shape","ShapeType"];
nape.shape.ShapeType.get_CIRCLE = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
}
nape.shape.ShapeType.get_POLYGON = function() {
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
}
nape.shape.ShapeType.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
			return $r;
		}(this))) return "CIRCLE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
			return $r;
		}(this))) return "POLYGON"; else return "";
	}
	,__class__: nape.shape.ShapeType
}
nape.shape.ValidationResult = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "ValidationResult" + " derp!";
};
nape.shape.ValidationResult.__name__ = ["nape","shape","ValidationResult"];
nape.shape.ValidationResult.get_VALID = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
}
nape.shape.ValidationResult.get_DEGENERATE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
}
nape.shape.ValidationResult.get_CONCAVE = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
}
nape.shape.ValidationResult.get_SELF_INTERSECTING = function() {
	if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
}
nape.shape.ValidationResult.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
			return $r;
		}(this))) return "VALID"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
			return $r;
		}(this))) return "DEGENERATE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
			return $r;
		}(this))) return "CONCAVE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
			return $r;
		}(this))) return "SELF_INTERSECTING"; else return "";
	}
	,__class__: nape.shape.ValidationResult
}
nape.space = {}
nape.space.Broadphase = function() {
	if(!zpp_nape.util.ZPP_Flags.internal) throw "Error: Cannot instantiate " + "Broadphase" + " derp!";
};
nape.space.Broadphase.__name__ = ["nape","space","Broadphase"];
nape.space.Broadphase.get_DYNAMIC_AABB_TREE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
}
nape.space.Broadphase.get_SWEEP_AND_PRUNE = function() {
	if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	return zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
}
nape.space.Broadphase.prototype = {
	toString: function() {
		if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
			return $r;
		}(this))) return "DYNAMIC_AABB_TREE"; else if(this == (function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
			return $r;
		}(this))) return "SWEEP_AND_PRUNE"; else return "";
	}
	,__class__: nape.space.Broadphase
}
nape.space.Space = function(gravity,broadphase) {
	this.zpp_inner = null;
	if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
	this.zpp_inner = new zpp_nape.space.ZPP_Space(gravity == null?null:gravity.zpp_inner,broadphase);
	this.zpp_inner.outer = this;
	if(gravity != null) {
		if(gravity.zpp_inner.weak) {
			gravity.dispose();
			true;
		} else false;
	}
};
nape.space.Space.__name__ = ["nape","space","Space"];
nape.space.Space.prototype = {
	rayMultiCast: function(ray,inner,filter,output) {
		if(inner == null) inner = false;
		if(ray == null) throw "Error: Cannot cast null ray :)";
		return this.zpp_inner.rayMultiCast(ray,inner,filter,output);
	}
	,rayCast: function(ray,inner,filter) {
		if(inner == null) inner = false;
		if(ray == null) throw "Error: Cannot cast null ray :)";
		return this.zpp_inner.rayCast(ray,inner,filter);
	}
	,convexMultiCast: function(shape,deltaTime,liveSweep,filter,output) {
		if(liveSweep == null) liveSweep = false;
		if(shape == null) throw "Error: Cannot cast null shape :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Shape must belong to a body to be cast.";
		if(deltaTime < 0 || deltaTime != deltaTime) throw "Error: deltaTime must be positive";
		return this.zpp_inner.convexMultiCast(shape.zpp_inner,deltaTime,filter,liveSweep,output);
	}
	,convexCast: function(shape,deltaTime,liveSweep,filter) {
		if(liveSweep == null) liveSweep = false;
		if(shape == null) throw "Error: Cannot cast null shape :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Shape must belong to a body to be cast.";
		if(deltaTime < 0 || deltaTime != deltaTime) throw "Error: deltaTime must be positive";
		return this.zpp_inner.convexCast(shape.zpp_inner,deltaTime,filter,liveSweep);
	}
	,bodiesInBody: function(body,filter,output) {
		if(body == null) throw "Error: Cannot evaluate shapes in null body";
		var ret = output == null?new nape.phys.BodyList():output;
		var $it0 = body.zpp_inner.wrap_shapes.iterator();
		while( $it0.hasNext() ) {
			var shape = $it0.next();
			var cur = this.bodiesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,shapesInBody: function(body,filter,output) {
		if(body == null) throw "Error: Cannot evaluate shapes in null body";
		var ret = output == null?new nape.shape.ShapeList():output;
		var $it0 = body.zpp_inner.wrap_shapes.iterator();
		while( $it0.hasNext() ) {
			var shape = $it0.next();
			var cur = this.shapesInShape(shape,false,filter,ret);
		}
		return ret;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		if(shape == null) throw "Error: Cannot evaluate bodies in a null shapes :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
		if(shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var res = shape.zpp_inner.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw "Error: Polygon query shape is invalid : " + res.toString();
		}
		return this.zpp_inner.bodiesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInShape: function(shape,containment,filter,output) {
		if(containment == null) containment = false;
		if(shape == null) throw "Error: Cannot evaluate shapes in a null shapes :)";
		if((shape.zpp_inner.body != null?shape.zpp_inner.body.outer:null) == null) throw "Error: Query shape needs to be inside a Body to be well defined :)";
		if(shape.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var res = shape.zpp_inner.polygon.valid();
			if(res != (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
				return $r;
			}(this))) throw "Error: Polygon query shape is invalid : " + res.toString();
		}
		return this.zpp_inner.shapesInShape(shape.zpp_inner,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position == null) throw "Error: Cannot evaluate objects at null circle :)";
		if(radius != radius) throw "Error: Circle radius cannot be NaN";
		if(radius <= 0) throw "Error: Circle radius must be strictly positive";
		var ret = this.zpp_inner.bodiesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesInCircle: function(position,radius,containment,filter,output) {
		if(containment == null) containment = false;
		if(position != null && position.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(position == null) throw "Error: Cannot evaluate shapes at null circle :)";
		if(radius != radius) throw "Error: Circle radius cannot be NaN";
		if(radius <= 0) throw "Error: Circle radius must be strictly positive";
		var ret = this.zpp_inner.shapesInCircle(position,radius,containment,filter == null?null:filter.zpp_inner,output);
		if(position.zpp_inner.weak) {
			position.dispose();
			true;
		} else false;
		return ret;
	}
	,bodiesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		if(aabb == null) throw "Error: Cannot evaluate objects in a null AABB :)";
		if((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)) == 0) throw "Error: Cannot evaluate objects in degenerate AABB :/";
		return this.zpp_inner.bodiesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,shapesInAABB: function(aabb,containment,strict,filter,output) {
		if(strict == null) strict = true;
		if(containment == null) containment = false;
		if(aabb == null) throw "Error: Cannot evaluate shapes in a null AABB :)";
		if((function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.width();
			return $r;
		}(this)) == 0 || (function($this) {
			var $r;
			aabb.zpp_inner.validate();
			$r = aabb.zpp_inner.height();
			return $r;
		}(this)) == 0) throw "Error: Cannot evaluate shapes in degenerate AABB :/";
		return this.zpp_inner.shapesInAABB(aabb,strict,containment,filter == null?null:filter.zpp_inner,output);
	}
	,bodiesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot evaluate objects under a null point :)";
		var ret = this.zpp_inner.bodiesUnderPoint((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,shapesUnderPoint: function(point,filter,output) {
		if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(point == null) throw "Error: Cannot evaluate shapes under a null point :)";
		var ret = this.zpp_inner.shapesUnderPoint((function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(point != null && point.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			point.zpp_inner.validate();
			$r = point.zpp_inner.y;
			return $r;
		}(this)),filter == null?null:filter.zpp_inner,output);
		if(point.zpp_inner.weak) {
			point.dispose();
			true;
		} else false;
		return ret;
	}
	,interactionType: function(shape1,shape2) {
		if(shape1 == null || shape2 == null) throw "Error: Cannot evaluate interaction type for null shapes";
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == null || (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null) == null) throw "Error: Cannot evaluate interaction type for shapes not part of a Body";
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null).zpp_inner.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return null;
		if((shape1.zpp_inner.body != null?shape1.zpp_inner.body.outer:null) == (shape2.zpp_inner.body != null?shape2.zpp_inner.body.outer:null)) return null;
		var s1 = shape1.zpp_inner;
		var s2 = shape2.zpp_inner;
		return (function($this) {
			var $r;
			var _g = $this.zpp_inner.interactionType(s1,s2,s1.body,s2.body);
			$r = (function($this) {
				var $r;
				switch(_g) {
				case 0:
					$r = (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.InteractionType_FLUID == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.InteractionType_FLUID = new nape.callbacks.InteractionType();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.InteractionType_FLUID;
						return $r;
					}($this));
					break;
				case 1:
					$r = (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.InteractionType_COLLISION == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.InteractionType_COLLISION = new nape.callbacks.InteractionType();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.InteractionType_COLLISION;
						return $r;
					}($this));
					break;
				case 2:
					$r = (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.InteractionType_SENSOR == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.InteractionType_SENSOR = new nape.callbacks.InteractionType();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.InteractionType_SENSOR;
						return $r;
					}($this));
					break;
				default:
					$r = null;
				}
				return $r;
			}($this));
			return $r;
		}(this));
	}
	,get_elapsedTime: function() {
		return this.zpp_inner.time;
	}
	,get_timeStamp: function() {
		return this.zpp_inner.stamp;
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		if(positionIterations == null) positionIterations = 10;
		if(velocityIterations == null) velocityIterations = 10;
		if(deltaTime != deltaTime) throw "Error: deltaTime cannot be NaN";
		if(deltaTime <= 0) throw "Error: deltaTime must be strictly positive";
		if(velocityIterations <= 0) throw "Error: must use atleast one velocity iteration";
		if(positionIterations <= 0) throw "Error: must use atleast one position iteration";
		this.zpp_inner.step(deltaTime,velocityIterations,positionIterations);
	}
	,clear: function() {
		if(this.zpp_inner.midstep) throw "Error: Space::clear() cannot be called during space step()";
		this.zpp_inner.clear();
	}
	,get_listeners: function() {
		return this.zpp_inner.wrap_listeners;
	}
	,get_arbiters: function() {
		if(this.zpp_inner.wrap_arbiters == null) {
			var ret = new zpp_nape.dynamics.ZPP_SpaceArbiterList();
			ret.space = this.zpp_inner;
			this.zpp_inner.wrap_arbiters = ret;
		}
		return this.zpp_inner.wrap_arbiters;
	}
	,get_world: function() {
		return this.zpp_inner.__static;
	}
	,visitCompounds: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Space::visitCompounds";
		var $it0 = this.zpp_inner.wrap_compounds.iterator();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			lambda(c);
			c.visitCompounds(lambda);
		}
	}
	,visitConstraints: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Space::visitConstraints";
		var $it0 = this.zpp_inner.wrap_constraints.iterator();
		while( $it0.hasNext() ) {
			var c = $it0.next();
			lambda(c);
		}
		var $it1 = this.zpp_inner.wrap_compounds.iterator();
		while( $it1.hasNext() ) {
			var c = $it1.next();
			c.visitConstraints(lambda);
		}
	}
	,visitBodies: function(lambda) {
		if(lambda == null) throw "Error: lambda cannot be null for Space::visitBodies";
		var $it0 = this.zpp_inner.wrap_bodies.iterator();
		while( $it0.hasNext() ) {
			var b = $it0.next();
			lambda(b);
		}
		var $it1 = this.zpp_inner.wrap_compounds.iterator();
		while( $it1.hasNext() ) {
			var c = $it1.next();
			c.visitBodies(lambda);
		}
	}
	,get_liveConstraints: function() {
		return this.zpp_inner.wrap_livecon;
	}
	,get_constraints: function() {
		return this.zpp_inner.wrap_constraints;
	}
	,get_liveBodies: function() {
		return this.zpp_inner.wrap_live;
	}
	,get_bodies: function() {
		return this.zpp_inner.wrap_bodies;
	}
	,get_compounds: function() {
		return this.zpp_inner.wrap_compounds;
	}
	,set_worldLinearDrag: function(worldLinearDrag) {
		var d = worldLinearDrag;
		if(d != d) throw "Error: Space::worldLinearDrag cannot be NaN";
		this.zpp_inner.global_lin_drag = d;
		return this.zpp_inner.global_lin_drag;
	}
	,get_worldLinearDrag: function() {
		return this.zpp_inner.global_lin_drag;
	}
	,set_worldAngularDrag: function(worldAngularDrag) {
		var d = worldAngularDrag;
		if(d != d) throw "Error: Space::worldAngularDrag cannot be NaN";
		this.zpp_inner.global_ang_drag = d;
		return this.zpp_inner.global_ang_drag;
	}
	,get_worldAngularDrag: function() {
		return this.zpp_inner.global_ang_drag;
	}
	,set_sortContacts: function(sortContacts) {
		this.zpp_inner.sortcontacts = sortContacts;
		return this.zpp_inner.sortcontacts;
	}
	,get_sortContacts: function() {
		return this.zpp_inner.sortcontacts;
	}
	,get_broadphase: function() {
		return this.zpp_inner.bphase.is_sweep?(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
			return $r;
		}(this)):(function($this) {
			var $r;
			if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
				zpp_nape.util.ZPP_Flags.internal = true;
				zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
				zpp_nape.util.ZPP_Flags.internal = false;
			}
			$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
			return $r;
		}(this));
	}
	,set_gravity: function(gravity) {
		if(gravity != null && gravity.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		if(gravity == null) throw "Error: Space::gravity cannot be null";
		((function($this) {
			var $r;
			if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
			$r = $this.zpp_inner.wrap_gravity;
			return $r;
		}(this))).set(gravity);
		return (function($this) {
			var $r;
			if($this.zpp_inner.wrap_gravity == null) $this.zpp_inner.getgravity();
			$r = $this.zpp_inner.wrap_gravity;
			return $r;
		}(this));
	}
	,get_gravity: function() {
		if(this.zpp_inner.wrap_gravity == null) this.zpp_inner.getgravity();
		return this.zpp_inner.wrap_gravity;
	}
	,get_userData: function() {
		if(this.zpp_inner.userData == null) this.zpp_inner.userData = { };
		return this.zpp_inner.userData;
	}
	,__class__: nape.space.Space
}
var network = {}
network.MilkshakeNetworkManager = function(sceneManager) {
	var _g = this;
	milkshake.game.network.NetworkManager.call(this,"127.0.0.1:3000");
	this.sceneManager = sceneManager;
	this.roomHandler = new network.handlers.RoomHandler(this.socket,sceneManager);
	this.gameHandler = new network.handlers.GameHandler(this.socket,sceneManager,this.roomHandler);
	this.socket.on("connect",function(data) {
		_g.roomHandler.getRoomList();
		_g.socket.emit("getSocketID");
	});
	this.socket.on("disconnect",function(data) {
		sceneManager.changeScene("roomListScene");
	});
};
network.MilkshakeNetworkManager.__name__ = ["network","MilkshakeNetworkManager"];
network.MilkshakeNetworkManager.__super__ = milkshake.game.network.NetworkManager;
network.MilkshakeNetworkManager.prototype = $extend(milkshake.game.network.NetworkManager.prototype,{
	__class__: network.MilkshakeNetworkManager
});
network.handlers = {}
network.handlers.GameHandler = function(socket,sceneManager,roomHandler) {
	var _g = this;
	milkshake.game.network.AbstractHandler.call(this,socket);
	socket.on("socketID",function(data) {
		_g.socketID = data.socketID;
	});
	socket.on("startGame",function(data) {
		_g.gameScene = sceneManager.scenes.get("game");
		sceneManager.changeScene("game");
	});
	socket.on("gameUpdate",function(data) {
		var _g1 = 0, _g11 = data.players;
		while(_g1 < _g11.length) {
			var player = _g11[_g1];
			++_g1;
			if(player.id != _g.socketID) _g.gameScene.updateRemotePlayer(player);
		}
		socket.emit("updatePosition",{ x : _g.gameScene.tractor.get_x(), y : _g.gameScene.tractor.get_y()});
	});
	socket.on("endGame",function(data) {
		roomHandler.leaveRoom();
	});
};
network.handlers.GameHandler.__name__ = ["network","handlers","GameHandler"];
network.handlers.GameHandler.__super__ = milkshake.game.network.AbstractHandler;
network.handlers.GameHandler.prototype = $extend(milkshake.game.network.AbstractHandler.prototype,{
	__class__: network.handlers.GameHandler
});
network.handlers.RoomHandler = function(socket,sceneManager) {
	var _g = this;
	milkshake.game.network.AbstractHandler.call(this,socket);
	this.sceneManager = sceneManager;
	socket.on("joinedRoom",function(data) {
		_g.currentRoom = data;
		_g.updateLobbyRoom();
		sceneManager.changeScene("lobbyScene");
	});
	socket.on("leftRoom",function(data) {
		_g.currentRoom = null;
		sceneManager.changeScene("startMenu");
	});
	socket.on("playerJoinedRoom",function(data) {
		_g.currentRoom.currentPlayers += 1;
		_g.updateLobbyRoom();
	});
	socket.on("playerLeftRoom",function(data) {
		_g.currentRoom.currentPlayers -= 1;
		_g.updateLobbyRoom();
	});
	socket.on("refreshRoomList",function(data) {
		_g.getRoomList();
	});
};
network.handlers.RoomHandler.__name__ = ["network","handlers","RoomHandler"];
network.handlers.RoomHandler.__super__ = milkshake.game.network.AbstractHandler;
network.handlers.RoomHandler.prototype = $extend(milkshake.game.network.AbstractHandler.prototype,{
	updateLobbyRoom: function() {
		var lobbyScene = this.sceneManager.scenes.get("lobbyScene");
		lobbyScene.setRoom(this.currentRoom);
	}
	,leaveRoom: function() {
		this.socket.emit("leaveRoom",this.currentRoom.name);
	}
	,joinRoom: function(_name,_password) {
		if(_password == null) _password = "";
		var jr = { name : _name, password : _password};
		this.socket.emit("joinRoom",jr);
	}
	,createRoom: function(_name,_password,_maxPlayers) {
		if(_maxPlayers == null) _maxPlayers = 10;
		var cr = { name : _name, password : _password, maxPlayers : _maxPlayers};
		this.socket.emit("joinRoom",cr);
	}
	,getRoomList: function() {
		if(this.onRoomsLoadedCallback != null) {
			this.socket.on("roomList",this.onRoomsLoadedCallback);
			this.socket.emit("getRooms");
		}
	}
	,__class__: network.handlers.RoomHandler
});
var pixi = {}
pixi.Event = function() { }
pixi.Event.__name__ = ["pixi","Event"];
pixi.Event.prototype = {
	__class__: pixi.Event
}
pixi.IRenderer = function() { }
pixi.IRenderer.__name__ = ["pixi","IRenderer"];
pixi.IRenderer.prototype = {
	__class__: pixi.IRenderer
}
var scenes = {}
scenes.game = {}
scenes.game.GameScene = function(core,sceneManager,networkManager) {
	this.isMultiplayer = false;
	var _g = this;
	milkshake.game.scene.Scene.call(this,core,"gameScene");
	this.networkManager = networkManager;
	this.remoteTractors = new haxe.ds.StringMap();
	this.tractorIgnoreGroup = new nape.dynamics.InteractionGroup(true);
	this.space = new nape.space.Space(new nape.geom.Vec2(0,300));
	this.addLogo();
	this.tractor = new entities.Tractor(this.space,this.tractorIgnoreGroup);
	this.tractor.set_x(640.);
	this.tractor.set_y(360.);
	this.addNode(this.tractor);
	this.debug = new PixiDebug();
	this.addNode(this.debug);
	core.input.addKeyDownHandler(milkshake.input.KeyboardCode.UP,function() {
		var _g1 = _g.tractor.body;
		_g1.set_angularVel(_g1.zpp_inner.angvel + 0.05);
	});
	core.input.addKeyDownHandler(milkshake.input.KeyboardCode.RIGHT,function() {
		var _g1 = _g.tractor.backWheel;
		_g1.set_angularVel(_g1.zpp_inner.angvel + 1);
		_g.tractor.backWheel.set_torque(5);
		var _g1 = _g.tractor.frontWheel;
		_g1.set_angularVel(_g1.zpp_inner.angvel + 0.5);
		var _g1 = _g.tractor.body;
		_g1.set_angularVel(_g1.zpp_inner.angvel + 0.05);
	});
	core.input.addKeyDownHandler(milkshake.input.KeyboardCode.LEFT,function() {
		var _g1 = _g.tractor.backWheel;
		_g1.set_angularVel(_g1.zpp_inner.angvel - 1);
		var _g1 = _g.tractor.body;
		_g1.set_angularVel(_g1.zpp_inner.angvel - 0.1);
	});
	this.addNode(this.terrain = new entities.Terrain(this.space));
	var quitGameButton = new milkshake.game.ui.component.Button(250,50,"Quit Game",11138473,5831256);
	quitGameButton.set_x(375);
	quitGameButton.set_y(600);
	quitGameButton.displayObject.click = function(data) {
		if(_g.isMultiplayer) networkManager.roomHandler.leaveRoom(); else sceneManager.changeScene("startMenu");
	};
	this.addNode(quitGameButton);
};
scenes.game.GameScene.__name__ = ["scenes","game","GameScene"];
scenes.game.GameScene.__super__ = milkshake.game.scene.Scene;
scenes.game.GameScene.prototype = $extend(milkshake.game.scene.Scene.prototype,{
	updateRemotePlayer: function(data) {
		var tractor = this.remoteTractors.get(data.id);
		if(tractor == null) {
			tractor = new entities.Tractor(this.space,this.tractorIgnoreGroup,true);
			this.remoteTractors.set(data.id,tractor);
			this.addNode(tractor);
		}
		tractor.set_x(data.x);
		tractor.set_y(data.y);
	}
	,update: function(delta) {
		this.space.step(1 / 24);
		this.debug.pixiDebug.clear();
		this.debug.pixiDebug.drawBody(this.terrain.body);
		milkshake.game.scene.Scene.prototype.update.call(this,delta);
		this.set_x(-(this.tractor.get_x() * this.get_scaleX()) + 512.);
		this.set_y(-(this.tractor.get_y() * this.get_scaleX()) + 384.);
		var scaleValue = 1 - Math.abs(this.tractor.body.get_velocity().get_x()) / 1000;
		var _g = this.tractor.body;
		_g.set_angularVel(_g.zpp_inner.angvel * 0.9);
		this.tractor.backWheel.set_angularVel(helpers.MathHelper.clamp(this.tractor.backWheel.zpp_inner.angvel,-100,100));
		this.set_scaleX(this.set_scaleY(this.lerp(0.005,this.get_scaleX(),Math.max(Math.min(scaleValue,1),0.5))));
	}
	,lerp: function(amount,start,end) {
		if(start == end) return start;
		return (1 - amount) * start + amount * end;
	}
	,addLogo: function() {
		var bunnyContainer = new milkshake.core.GameObject("bunnyContainer");
		this.scene.addNode(bunnyContainer);
		this.bunny = new milkshake.core.Sprite("milkLogo.png");
		bunnyContainer.addNode(this.bunny);
	}
	,__class__: scenes.game.GameScene
});
scenes.lobby = {}
scenes.lobby.LobbyScene = function(core,networkManager) {
	milkshake.game.scene.Scene.call(this,core,"LobbyScene");
	this.lobbyText = new milkshake.core.Text("");
	this.lobbyText.set_x(300);
	this.lobbyText.set_y(300);
	this.addNode(this.lobbyText);
	var quitRoomButton = new milkshake.game.ui.component.Button(250,50,"Quit Room",11138473,5831256);
	quitRoomButton.set_x(375);
	quitRoomButton.set_y(600);
	quitRoomButton.displayObject.click = function(data) {
		networkManager.roomHandler.leaveRoom();
	};
	this.addNode(quitRoomButton);
};
scenes.lobby.LobbyScene.__name__ = ["scenes","lobby","LobbyScene"];
scenes.lobby.LobbyScene.__super__ = milkshake.game.scene.Scene;
scenes.lobby.LobbyScene.prototype = $extend(milkshake.game.scene.Scene.prototype,{
	update: function(deltaTime) {
		milkshake.game.scene.Scene.prototype.update.call(this,deltaTime);
	}
	,setRoom: function(room) {
		this.currentRoom = room;
		var waitingForPlayers = room.maxPlayers - room.currentPlayers;
		this.lobbyText.setText("You are currently in " + room.name + "!\nWaiting on " + waitingForPlayers + " more players to start...");
	}
	,__class__: scenes.lobby.LobbyScene
});
scenes.roomlist = {}
scenes.roomlist.RoomItemContainer = function(room,width,height) {
	milkshake.core.GameObject.call(this,"RoomListItem" + room.name);
	this.room = room;
	this.height = height;
	this.width = width;
	this.graphics = new PIXI.Graphics();
	this.graphics.hitArea = new PIXI.Rectangle(0,0,width,height);
	this.displayObject.addChild(this.graphics);
	this.set_selected(false);
	var nameText = new milkshake.core.Text(room.name,"nameText");
	nameText.set_x(20);
	nameText.set_y(7);
	this.addNode(nameText);
	this.playerText = new milkshake.core.Text(room.currentPlayers + " / " + room.maxPlayers,"playerText");
	this.playerText.set_x(330);
	this.playerText.set_y(7);
	this.addNode(this.playerText);
};
scenes.roomlist.RoomItemContainer.__name__ = ["scenes","roomlist","RoomItemContainer"];
scenes.roomlist.RoomItemContainer.__super__ = milkshake.core.GameObject;
scenes.roomlist.RoomItemContainer.prototype = $extend(milkshake.core.GameObject.prototype,{
	update: function(deltaTime) {
		this.drawBackground();
		milkshake.core.GameObject.prototype.update.call(this,deltaTime);
	}
	,set_selected: function(value) {
		return this.selected = value;
	}
	,drawBackground: function() {
		var color = this.selected?16711680:5811450;
		this.graphics.clear();
		this.graphics.beginFill(color);
		this.graphics.drawRect(0,0,this.width,this.height);
		this.graphics.endFill();
	}
	,__class__: scenes.roomlist.RoomItemContainer
});
scenes.roomlist.RoomListGameObject = function() {
	this.ROOM_SPRITE_GAP = 50;
	this.ROOM_SPRITE_HEIGHT = 50;
	this.ROOM_SPRITE_WIDTH = 400;
	milkshake.core.GameObject.call(this,"RoomListGameObject");
};
scenes.roomlist.RoomListGameObject.__name__ = ["scenes","roomlist","RoomListGameObject"];
scenes.roomlist.RoomListGameObject.__super__ = milkshake.core.GameObject;
scenes.roomlist.RoomListGameObject.prototype = $extend(milkshake.core.GameObject.prototype,{
	updateList: function() {
		var _g2 = this;
		var _g = 0, _g1 = this.roomList;
		while(_g < _g1.length) {
			var room = _g1[_g];
			++_g;
			var node = this.getNodeById("RoomListItem" + room.name);
			if(node != null) node.playerText.setText(room.currentPlayers + " / " + room.maxPlayers); else {
				var roomSprite = [new scenes.roomlist.RoomItemContainer(room,this.ROOM_SPRITE_WIDTH,this.ROOM_SPRITE_HEIGHT)];
				var index = Lambda.indexOf(this.roomList,room);
				this.addNode(roomSprite[0]);
				roomSprite[0].set_y((this.ROOM_SPRITE_HEIGHT + this.ROOM_SPRITE_GAP) * index);
				roomSprite[0].displayObject.setInteractive(true);
				roomSprite[0].displayObject.click = (function(roomSprite) {
					return function(data) {
						if(_g2.currentRoomSelected != null) _g2.currentRoomSelected.set_selected(false);
						_g2.currentRoomSelected = roomSprite[0];
						_g2.currentRoomSelected.set_selected(true);
					};
				})(roomSprite);
			}
		}
	}
	,setRooms: function(data) {
		this.roomList = data.rooms;
		this.updateList();
	}
	,__class__: scenes.roomlist.RoomListGameObject
});
scenes.roomlist.RoomListScene = function(game,networkManager) {
	var _g = this;
	milkshake.game.scene.Scene.call(this,game,"RoomListScene");
	this.roomHandler = networkManager.roomHandler;
	this.roomHandler.onRoomsLoadedCallback = $bind(this,this.onRoomsLoaded);
	var text = new milkshake.core.Text("Room List");
	text.set_x(400);
	text.set_y(30);
	this.addNode(text);
	this.roomListGameObject = new scenes.roomlist.RoomListGameObject();
	this.roomListGameObject.set_x(300);
	this.roomListGameObject.set_y(100);
	this.addNode(this.roomListGameObject);
	var joinRoomButton = new milkshake.game.ui.component.Button(250,50,"Join Room",11138473,5831256);
	joinRoomButton.set_x(230);
	joinRoomButton.set_y(600);
	joinRoomButton.displayObject.click = function(data) {
		_g.roomHandler.joinRoom(_g.roomListGameObject.currentRoomSelected.room.name);
	};
	this.addNode(joinRoomButton);
	var createRoomButton = new milkshake.game.ui.component.Button(250,50,"Create Room",11138473,5831256);
	createRoomButton.set_x(580);
	createRoomButton.set_y(600);
	this.addNode(createRoomButton);
	this.loadRooms();
};
scenes.roomlist.RoomListScene.__name__ = ["scenes","roomlist","RoomListScene"];
scenes.roomlist.RoomListScene.__super__ = milkshake.game.scene.Scene;
scenes.roomlist.RoomListScene.prototype = $extend(milkshake.game.scene.Scene.prototype,{
	update: function(delta) {
		milkshake.game.scene.Scene.prototype.update.call(this,delta);
	}
	,onRoomsLoaded: function(data) {
		this.roomListGameObject.setRooms(data);
	}
	,loadRooms: function() {
		this.roomHandler.getRoomList();
	}
	,__class__: scenes.roomlist.RoomListScene
});
scenes.startmenu = {}
scenes.startmenu.StartMenuScene = function(core,sceneManager) {
	milkshake.game.scene.Scene.call(this,core,"StartMenuScene");
	var singlePlayerButton = new milkshake.game.ui.component.Button(250,50,"Singleplayer",11138473,5831256);
	singlePlayerButton.set_x(375);
	singlePlayerButton.set_y(200);
	singlePlayerButton.displayObject.click = function(data) {
		var game = sceneManager.scenes.get("game");
		game.isMultiplayer = false;
		sceneManager.changeScene("game");
	};
	this.addNode(singlePlayerButton);
	var multiPlayerButton = new milkshake.game.ui.component.Button(250,50,"Multiplayer",11138473,5831256);
	multiPlayerButton.set_x(375);
	multiPlayerButton.set_y(400);
	multiPlayerButton.displayObject.click = function(data) {
		var game = sceneManager.scenes.get("game");
		game.isMultiplayer = false;
		sceneManager.changeScene("roomListScene");
	};
	this.addNode(multiPlayerButton);
};
scenes.startmenu.StartMenuScene.__name__ = ["scenes","startmenu","StartMenuScene"];
scenes.startmenu.StartMenuScene.__super__ = milkshake.game.scene.Scene;
scenes.startmenu.StartMenuScene.prototype = $extend(milkshake.game.scene.Scene.prototype,{
	update: function(delta) {
		milkshake.game.scene.Scene.prototype.update.call(this,delta);
	}
	,__class__: scenes.startmenu.StartMenuScene
});
var zpp_nape = {}
zpp_nape.ZPP_Const = function() { }
zpp_nape.ZPP_Const.__name__ = ["zpp_nape","ZPP_Const"];
zpp_nape.ZPP_Const.POSINF = function() {
	return Math.POSITIVE_INFINITY;
}
zpp_nape.ZPP_Const.NEGINF = function() {
	return Math.NEGATIVE_INFINITY;
}
zpp_nape.ZPP_ID = function() { }
zpp_nape.ZPP_ID.__name__ = ["zpp_nape","ZPP_ID"];
zpp_nape.ZPP_ID.Constraint = function() {
	return zpp_nape.ZPP_ID._Constraint++;
}
zpp_nape.ZPP_ID.Interactor = function() {
	return zpp_nape.ZPP_ID._Interactor++;
}
zpp_nape.ZPP_ID.CbType = function() {
	return zpp_nape.ZPP_ID._CbType++;
}
zpp_nape.ZPP_ID.CbSet = function() {
	return zpp_nape.ZPP_ID._CbSet++;
}
zpp_nape.ZPP_ID.Listener = function() {
	return zpp_nape.ZPP_ID._Listener++;
}
zpp_nape.ZPP_ID.ZPP_SimpleVert = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleVert++;
}
zpp_nape.ZPP_ID.ZPP_SimpleSeg = function() {
	return zpp_nape.ZPP_ID._ZPP_SimpleSeg++;
}
zpp_nape.ZPP_ID.InteractionGroup = function() {
	return zpp_nape.ZPP_ID._InteractionGroup++;
}
zpp_nape.ZPP_ID.Space = function() {
	return zpp_nape.ZPP_ID._Space++;
}
zpp_nape.callbacks = {}
zpp_nape.callbacks.ZPP_Callback = function() {
	this.constraint = null;
	this.body = null;
	this.pre_swapped = false;
	this.pre_arbiter = null;
	this.wrap_arbiters = null;
	this.set = null;
	this.int2 = null;
	this.int1 = null;
	this.length = 0;
	this.prev = null;
	this.next = null;
	this.index = 0;
	this.space = null;
	this.listener = null;
	this.event = 0;
	this.outer_int = null;
	this.outer_con = null;
	this.outer_body = null;
	this.length = 0;
};
zpp_nape.callbacks.ZPP_Callback.__name__ = ["zpp_nape","callbacks","ZPP_Callback"];
zpp_nape.callbacks.ZPP_Callback.prototype = {
	genarbs: function() {
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
	}
	,alloc: function() {
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.body = null;
		this.constraint = null;
		this.listener = null;
		if(this.wrap_arbiters != null) this.wrap_arbiters.zpp_inner.inner = null;
		this.set = null;
	}
	,rev_at: function(i) {
		var ret = this.prev;
		while(i-- != 0) ret = ret.prev;
		return ret;
	}
	,at: function(i) {
		var ret = this.next;
		while(i-- != 0) ret = ret.next;
		return ret;
	}
	,cyclePrev: function(o) {
		if(o.prev == null) return this.prev; else return o.prev;
	}
	,cycleNext: function(o) {
		if(o.next == null) return this.next; else return o.next;
	}
	,rotateR: function() {
		this.push_rev(this.pop_rev());
	}
	,rotateL: function() {
		this.push(this.pop());
	}
	,splice: function(o) {
		var ret = o.next;
		if(o.prev == null) {
			this.next = o.next;
			if(this.next != null) this.next.prev = null; else this.prev = null;
		} else {
			o.prev.next = o.next;
			if(o.next != null) o.next.prev = o.prev; else this.prev = o.prev;
		}
		this.length--;
		return ret;
	}
	,clear: function() {
		while(!this.empty()) this.pop();
	}
	,empty: function() {
		return this.next == null;
	}
	,pop_rev: function() {
		var ret = this.prev;
		this.prev = ret.prev;
		if(this.prev == null) this.next = null; else this.prev.next = null;
		this.length--;
		return ret;
	}
	,pop: function() {
		var ret = this.next;
		this.next = ret.next;
		if(this.next == null) this.prev = null; else this.next.prev = null;
		this.length--;
		return ret;
	}
	,push_rev: function(obj) {
		if(this.next != null) this.next.prev = obj; else this.prev = obj;
		obj.next = this.next;
		obj.prev = null;
		this.next = obj;
		this.length++;
	}
	,push: function(obj) {
		if(this.prev != null) this.prev.next = obj; else this.next = obj;
		obj.prev = this.prev;
		obj.next = null;
		this.prev = obj;
		this.length++;
	}
	,wrapper_int: function() {
		if(this.outer_int == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			this.outer_int = new nape.callbacks.InteractionCallback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			this.outer_int.zpp_inner = this;
		}
		if(this.wrap_arbiters == null) this.wrap_arbiters = zpp_nape.util.ZPP_ArbiterList.get(this.set.arbiters,true); else this.wrap_arbiters.zpp_inner.inner = this.set.arbiters;
		this.wrap_arbiters.zpp_inner.zip_length = true;
		this.wrap_arbiters.zpp_inner.at_ite = null;
		return this.outer_int;
	}
	,wrapper_con: function() {
		if(this.outer_con == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			this.outer_con = new nape.callbacks.ConstraintCallback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			this.outer_con.zpp_inner = this;
		}
		return this.outer_con;
	}
	,wrapper_body: function() {
		if(this.outer_body == null) {
			zpp_nape.callbacks.ZPP_Callback.internal = true;
			this.outer_body = new nape.callbacks.BodyCallback();
			zpp_nape.callbacks.ZPP_Callback.internal = false;
			this.outer_body.zpp_inner = this;
		}
		return this.outer_body;
	}
	,__class__: zpp_nape.callbacks.ZPP_Callback
}
zpp_nape.callbacks.ZPP_CbSet = function() {
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_interactors = null;
	this.interactors = null;
	this.zip_conlisteners = false;
	this.conlisteners = null;
	this.zip_bodylisteners = false;
	this.bodylisteners = null;
	this.zip_listeners = false;
	this.listeners = null;
	this.cbpairs = null;
	this.manager = null;
	this.id = 0;
	this.next = null;
	this.count = 0;
	this.cbTypes = null;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.zip_listeners = true;
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.zip_bodylisteners = true;
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.zip_conlisteners = true;
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.id = zpp_nape.ZPP_ID.CbSet();
	this.cbpairs = new zpp_nape.util.ZNPList_ZPP_CbSetPair();
};
zpp_nape.callbacks.ZPP_CbSet.__name__ = ["zpp_nape","callbacks","ZPP_CbSet"];
zpp_nape.callbacks.ZPP_CbSet.setlt = function(a,b) {
	var i = a.cbTypes.head;
	var j = b.cbTypes.head;
	while(i != null && j != null) {
		var ca = i.elt;
		var cb = j.elt;
		if(ca.id < cb.id) return true;
		if(cb.id < ca.id) return false; else {
			i = i.next;
			j = j.next;
		}
	}
	return j != null && i == null;
}
zpp_nape.callbacks.ZPP_CbSet.get = function(cbTypes) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSet(); else {
		ret = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	var ite = null;
	var cx_ite = cbTypes.head;
	while(cx_ite != null) {
		var cb = cx_ite.elt;
		ite = ret.cbTypes.insert(ite,cb);
		cb.cbsets.add(ret);
		cx_ite = cx_ite.next;
	}
	return ret;
}
zpp_nape.callbacks.ZPP_CbSet.compatible = function(i,a,b) {
	return i.options1.compatible(a.cbTypes) && i.options2.compatible(b.cbTypes) || i.options2.compatible(a.cbTypes) && i.options1.compatible(b.cbTypes);
}
zpp_nape.callbacks.ZPP_CbSet.empty_intersection = function(a,b) {
	return a.manager.pair(a,b).listeners.head == null;
}
zpp_nape.callbacks.ZPP_CbSet.single_intersection = function(a,b,i) {
	return a.manager.pair(a,b).single_intersection(i);
}
zpp_nape.callbacks.ZPP_CbSet.find_all = function(a,b,event,cb) {
	a.manager.pair(a,b).forall(event,cb);
}
zpp_nape.callbacks.ZPP_CbSet.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.listeners.clear();
		this.zip_listeners = true;
		this.bodylisteners.clear();
		this.zip_bodylisteners = true;
		this.conlisteners.clear();
		this.zip_conlisteners = true;
		while(!(this.cbTypes.head == null)) {
			var cb = this.cbTypes.pop_unsafe();
			cb.cbsets.remove(this);
		}
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,realvalidate_conlisteners: function() {
		this.conlisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.conlisteners.head;
			var cite = cb.conlisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.conlisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate_conlisteners: function() {
		if(this.zip_conlisteners) {
			this.zip_conlisteners = false;
			this.realvalidate_conlisteners();
		}
	}
	,invalidate_conlisteners: function() {
		this.zip_conlisteners = true;
	}
	,realvalidate_bodylisteners: function() {
		this.bodylisteners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.bodylisteners.head;
			var cite = cb.bodylisteners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(!cx.options.excluded(this.cbTypes) && cx.space == this.manager.space) npre = this.bodylisteners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate_bodylisteners: function() {
		if(this.zip_bodylisteners) {
			this.zip_bodylisteners = false;
			this.realvalidate_bodylisteners();
		}
	}
	,invalidate_bodylisteners: function() {
		this.zip_bodylisteners = true;
	}
	,realvalidate_listeners: function() {
		this.listeners.clear();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			var npre = null;
			var nite = this.listeners.head;
			var cite = cb.listeners.head;
			while(cite != null) {
				var cx = cite.elt;
				if(nite != null && nite.elt == cx) {
					cite = cite.next;
					npre = nite;
					nite = nite.next;
				} else if(nite == null || zpp_nape.callbacks.ZPP_Listener.setlt(cx,nite.elt)) {
					if(cx.space == this.manager.space) npre = this.listeners.inlined_insert(npre,cx);
					cite = cite.next;
				} else {
					npre = nite;
					nite = nite.next;
				}
			}
			cx_ite = cx_ite.next;
		}
	}
	,validate_listeners: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.realvalidate_listeners();
		}
	}
	,invalidate_listeners: function() {
		this.zip_listeners = true;
		this.invalidate_pairs();
	}
	,invalidate_pairs: function() {
		var cx_ite = this.cbpairs.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cx_ite = cx_ite.next;
		}
	}
	,decrement: function() {
		return --this.count == 0;
	}
	,increment: function() {
		this.count++;
	}
	,__class__: zpp_nape.callbacks.ZPP_CbSet
}
zpp_nape.callbacks.ZPP_CbSetPair = function() {
	this.listeners = null;
	this.zip_listeners = false;
	this.next = null;
	this.b = null;
	this.a = null;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
};
zpp_nape.callbacks.ZPP_CbSetPair.__name__ = ["zpp_nape","callbacks","ZPP_CbSetPair"];
zpp_nape.callbacks.ZPP_CbSetPair.get = function(a,b) {
	var ret;
	if(zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.callbacks.ZPP_CbSetPair(); else {
		ret = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.zip_listeners = true;
	if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
		ret.a = a;
		ret.b = b;
	} else {
		ret.a = b;
		ret.b = a;
	}
	return ret;
}
zpp_nape.callbacks.ZPP_CbSetPair.setlt = function(x,y) {
	return zpp_nape.callbacks.ZPP_CbSet.setlt(x.a,y.a) || x.a == y.a && zpp_nape.callbacks.ZPP_CbSet.setlt(x.b,y.b);
}
zpp_nape.callbacks.ZPP_CbSetPair.prototype = {
	forall: function(event,cb) {
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.event == event) cb(x);
			cx_ite = cx_ite.next;
		}
	}
	,single_intersection: function(i) {
		var ite = this.listeners.head;
		return ite != null && ite.elt == i && ite.next == null;
	}
	,empty_intersection: function() {
		return this.listeners.head == null;
	}
	,__validate: function() {
		this.listeners.clear();
		var aite = this.a.listeners.head;
		var bite = this.b.listeners.head;
		while(aite != null && bite != null) {
			var ax = aite.elt;
			var bx = bite.elt;
			if(ax == bx) {
				if(ax.options1.compatible(this.a.cbTypes) && ax.options2.compatible(this.b.cbTypes) || ax.options2.compatible(this.a.cbTypes) && ax.options1.compatible(this.b.cbTypes)) this.listeners.add(ax);
				aite = aite.next;
				bite = bite.next;
			} else if(ax.precedence > bx.precedence || ax.precedence == bx.precedence && ax.id > bx.id) aite = aite.next; else bite = bite.next;
		}
	}
	,validate: function() {
		if(this.zip_listeners) {
			this.zip_listeners = false;
			this.__validate();
		}
	}
	,invalidate: function() {
		this.zip_listeners = true;
	}
	,compatible: function(i) {
		return i.options1.compatible(this.a.cbTypes) && i.options2.compatible(this.b.cbTypes) || i.options2.compatible(this.a.cbTypes) && i.options1.compatible(this.b.cbTypes);
	}
	,alloc: function() {
		this.zip_listeners = true;
	}
	,free: function() {
		this.a = this.b = null;
		this.listeners.clear();
	}
	,__class__: zpp_nape.callbacks.ZPP_CbSetPair
}
zpp_nape.util = {}
zpp_nape.util.ZNPList_ZPP_InteractionListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionListener"];
zpp_nape.util.ZNPList_ZPP_InteractionListener.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionListener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_InteractionListener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_InteractionListener
}
zpp_nape.util.ZNPList_ZPP_BodyListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_BodyListener"];
zpp_nape.util.ZNPList_ZPP_BodyListener.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_BodyListener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_BodyListener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_BodyListener
}
zpp_nape.util.ZNPList_ZPP_ConstraintListener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPList_ZPP_ConstraintListener"];
zpp_nape.util.ZNPList_ZPP_ConstraintListener.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ConstraintListener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ConstraintListener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ConstraintListener
}
zpp_nape.util.ZNPList_ZPP_Constraint = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPList_ZPP_Constraint"];
zpp_nape.util.ZNPList_ZPP_Constraint.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Constraint(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Constraint.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Constraint
}
zpp_nape.util.ZNPList_ZPP_Interactor = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPList_ZPP_Interactor"];
zpp_nape.util.ZNPList_ZPP_Interactor.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Interactor(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Interactor.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Interactor
}
zpp_nape.util.ZNPList_ZPP_CbSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSet"];
zpp_nape.util.ZNPList_ZPP_CbSet.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSet(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CbSet.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbSet
}
zpp_nape.callbacks.ZPP_CbType = function() {
	this.conlisteners = null;
	this.bodylisteners = null;
	this.listeners = null;
	this.cbsets = null;
	this.id = 0;
	this.userData = null;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.CbType();
	this.listeners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.bodylisteners = new zpp_nape.util.ZNPList_ZPP_BodyListener();
	this.conlisteners = new zpp_nape.util.ZNPList_ZPP_ConstraintListener();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CbSet();
};
zpp_nape.callbacks.ZPP_CbType.__name__ = ["zpp_nape","callbacks","ZPP_CbType"];
zpp_nape.callbacks.ZPP_CbType.setlt = function(a,b) {
	return a.id < b.id;
}
zpp_nape.callbacks.ZPP_CbType.prototype = {
	invalidateconstraint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_conlisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,removeconstraint: function(x) {
		this.conlisteners.remove(x);
		this.invalidateconstraint();
	}
	,addconstraint: function(x) {
		var pre = null;
		var cx_ite = this.conlisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.conlisteners.inlined_insert(pre,x);
		this.invalidateconstraint();
	}
	,invalidatebody: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_bodylisteners = true;
			cx_ite = cx_ite.next;
		}
	}
	,removebody: function(x) {
		this.bodylisteners.remove(x);
		this.invalidatebody();
	}
	,addbody: function(x) {
		var pre = null;
		var cx_ite = this.bodylisteners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bodylisteners.inlined_insert(pre,x);
		this.invalidatebody();
	}
	,invalidateint: function() {
		var cx_ite = this.cbsets.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.zip_listeners = true;
			cb.invalidate_pairs();
			cx_ite = cx_ite.next;
		}
	}
	,removeint: function(x) {
		this.listeners.remove(x);
		this.invalidateint();
	}
	,addint: function(x) {
		var pre = null;
		var cx_ite = this.listeners.head;
		while(cx_ite != null) {
			var j = cx_ite.elt;
			if(x.precedence > j.precedence || x.precedence == j.precedence && x.id > j.id) break;
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.listeners.inlined_insert(pre,x);
		this.invalidateint();
	}
	,remInteractor: function(intx) {
		this.interactors.remove(intx);
	}
	,remConstraint: function(con) {
		this.constraints.remove(con);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,addConstraint: function(con) {
		this.constraints.add(con);
	}
	,__class__: zpp_nape.callbacks.ZPP_CbType
}
zpp_nape.util.ZPP_Flags = function() { }
zpp_nape.util.ZPP_Flags.__name__ = ["zpp_nape","util","ZPP_Flags"];
zpp_nape.callbacks.ZPP_Listener = function() {
	this.space = null;
	this.interaction = null;
	this.constraint = null;
	this.body = null;
	this.precedence = 0;
	this.event = 0;
	this.type = 0;
	this.id = 0;
	this.outer = null;
	this.id = zpp_nape.ZPP_ID.Listener();
};
zpp_nape.callbacks.ZPP_Listener.__name__ = ["zpp_nape","callbacks","ZPP_Listener"];
zpp_nape.callbacks.ZPP_Listener.setlt = function(a,b) {
	return a.precedence > b.precedence || a.precedence == b.precedence && a.id > b.id;
}
zpp_nape.callbacks.ZPP_Listener.prototype = {
	removedFromSpace: function() {
	}
	,addedToSpace: function() {
	}
	,invalidate_precedence: function() {
	}
	,swapEvent: function(event) {
	}
	,__class__: zpp_nape.callbacks.ZPP_Listener
}
zpp_nape.callbacks.ZPP_BodyListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.body = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_BODY;
	this.options = options.zpp_inner;
};
zpp_nape.callbacks.ZPP_BodyListener.__name__ = ["zpp_nape","callbacks","ZPP_BodyListener"];
zpp_nape.callbacks.ZPP_BodyListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_BodyListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	swapEvent: function(newev) {
		if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) throw "Error: BodyListener event must be either WAKE or SLEEP only";
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.bodylisteners.remove(this);
			cb.invalidatebody();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addbody(this);
			cx_ite = cx_ite.next;
		}
	}
	,immutable_options: function() {
		if(this.space != null && this.space.midstep) throw "Error: Cannot change listener type options during space.step()";
	}
	,__class__: zpp_nape.callbacks.ZPP_BodyListener
});
zpp_nape.callbacks.ZPP_ConstraintListener = function(options,event,handler) {
	this.handler = null;
	this.options = null;
	this.outer_zn = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.event = event;
	this.handler = handler;
	this.constraint = this;
	this.type = zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT;
	this.options = options.zpp_inner;
};
zpp_nape.callbacks.ZPP_ConstraintListener.__name__ = ["zpp_nape","callbacks","ZPP_ConstraintListener"];
zpp_nape.callbacks.ZPP_ConstraintListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_ConstraintListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	swapEvent: function(newev) {
		if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) throw "Error: ConstraintListener event must be either WAKE or SLEEP only";
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,invalidate_precedence: function() {
		if(this.space != null) {
			this.removedFromSpace();
			this.addedToSpace();
		}
	}
	,cbtype_change: function(cb,included,added) {
		this.removedFromSpace();
		this.options.effect_change(cb,included,added);
		this.addedToSpace();
	}
	,removedFromSpace: function() {
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.conlisteners.remove(this);
			cb.invalidateconstraint();
			cx_ite = cx_ite.next;
		}
		this.options.handler = null;
	}
	,addedToSpace: function() {
		this.options.handler = $bind(this,this.cbtype_change);
		var cx_ite = this.options.includes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.addconstraint(this);
			cx_ite = cx_ite.next;
		}
	}
	,immutable_options: function() {
		if(this.space != null && this.space.midstep) throw "Error: Cannot change listener type options during space.step()";
	}
	,__class__: zpp_nape.callbacks.ZPP_ConstraintListener
});
zpp_nape.util.ZNPList_ZPP_CbType = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbType"];
zpp_nape.util.ZNPList_ZPP_CbType.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbType(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CbType.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbType
}
zpp_nape.callbacks.ZPP_InteractionListener = function(options1,options2,event,type) {
	this.handlerp = null;
	this.pure = false;
	this.allowSleepingCallbacks = false;
	this.handleri = null;
	this.options2 = null;
	this.options1 = null;
	this.itype = 0;
	this.outer_znp = null;
	this.outer_zni = null;
	zpp_nape.callbacks.ZPP_Listener.call(this);
	this.type = type;
	this.interaction = this;
	this.event = event;
	this.options1 = options1.zpp_inner;
	this.options2 = options2.zpp_inner;
	this.allowSleepingCallbacks = false;
};
zpp_nape.callbacks.ZPP_InteractionListener.__name__ = ["zpp_nape","callbacks","ZPP_InteractionListener"];
zpp_nape.callbacks.ZPP_InteractionListener.__super__ = zpp_nape.callbacks.ZPP_Listener;
zpp_nape.callbacks.ZPP_InteractionListener.prototype = $extend(zpp_nape.callbacks.ZPP_Listener.prototype,{
	swapEvent: function(newev) {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE) throw "Error: PreListener event can only be PRE"; else if(newev != zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_END && newev != zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING) throw "Error: InteractionListener event must be either BEGIN, END, ONGOING";
		this.removedFromSpace();
		this.event = newev;
		this.addedToSpace();
	}
	,cbtype_change: function(options,cb,included,added) {
		this.removedFromSpace();
		options.effect_change(cb,included,added);
		this.addedToSpace();
		null;
	}
	,cbtype_change2: function(cb,included,added) {
		this.cbtype_change(this.options2,cb,included,added);
	}
	,cbtype_change1: function(cb,included,added) {
		this.cbtype_change(this.options1,cb,included,added);
	}
	,invalidate_precedence: function() {
		var _g = this;
		if(this.space != null) {
			var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
			this.with_union(function(cb) {
				cb.listeners.remove(_g);
				cb.invalidateint();
				cb.addint(_g);
				if(pre) {
					var cx_ite = cb.interactors.head;
					while(cx_ite != null) {
						var i = cx_ite.elt;
						i.wake();
						cx_ite = cx_ite.next;
					}
				}
			});
		}
	}
	,removedFromSpace: function() {
		var _g = this;
		this.with_uniquesets(false);
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.listeners.remove(_g);
			cb.invalidateint();
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = null;
		this.options2.handler = null;
	}
	,addedToSpace: function() {
		var _g = this;
		var pre = this.type == zpp_nape.util.ZPP_Flags.id_ListenerType_PRE;
		this.with_union(function(cb) {
			cb.addint(_g);
			if(pre) {
				var cx_ite = cb.interactors.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					i.wake();
					cx_ite = cx_ite.next;
				}
			}
		});
		this.options1.handler = $bind(this,this.cbtype_change1);
		this.options2.handler = $bind(this,this.cbtype_change2);
		this.with_uniquesets(true);
	}
	,with_union: function(lambda) {
		var ite1 = this.options1.includes.head;
		var ite2 = this.options2.includes.head;
		while(ite1 != null && ite2 != null) {
			var cb1 = ite1.elt;
			var cb2 = ite2.elt;
			if(cb1 == cb2) {
				lambda(cb1);
				ite1 = ite1.next;
				ite2 = ite2.next;
			} else if(cb1.id < cb2.id) {
				lambda(cb1);
				ite1 = ite1.next;
			} else {
				lambda(cb2);
				ite2 = ite2.next;
			}
		}
		while(ite1 != null) {
			lambda(ite1.elt);
			ite1 = ite1.next;
		}
		while(ite2 != null) {
			lambda(ite2.elt);
			ite2 = ite2.next;
		}
	}
	,with_uniquesets: function(fresh) {
		var _g = this;
		var set;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) set = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			set = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = set.next;
			set.next = null;
		}
		null;
		set.lt = zpp_nape.callbacks.ZPP_CbSetPair.setlt;
		this.CbTypeset(this.options1.includes,this.options2.includes,function(a,b) {
			_g.CbSetset(a.cbsets,b.cbsets,function(a1,b1) {
				a1.validate();
				b1.validate();
				if(zpp_nape.callbacks.ZPP_CbSet.single_intersection(a1,b1,_g)) set.try_insert(zpp_nape.callbacks.ZPP_CbSetPair.get(a1,b1));
			});
		});
		set.clear_with(function(pair) {
			if(fresh) _g.space.freshListenerType(pair.a,pair.b); else _g.space.nullListenerType(pair.a,pair.b);
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
		});
		var o = set;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
	}
	,CbTypeset: function(A,B,lambda) {
		var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbType;
		var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbType;
		var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbType;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(a.id < b.id) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x = V.pop_unsafe();
			var cx_ite = W.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(W.head == null)) {
			var x = W.pop_unsafe();
			lambda(x,x);
			var cx_ite = W.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
	}
	,CbSetset: function(A,B,lambda) {
		var U = zpp_nape.callbacks.ZPP_InteractionListener.UCbSet;
		var V = zpp_nape.callbacks.ZPP_InteractionListener.VCbSet;
		var W = zpp_nape.callbacks.ZPP_InteractionListener.WCbSet;
		var aite = A.head;
		var bite = B.head;
		while(aite != null && bite != null) {
			var a = aite.elt;
			var b = bite.elt;
			if(a == b) {
				W.inlined_add(a);
				aite = aite.next;
				bite = bite.next;
			} else if(zpp_nape.callbacks.ZPP_CbSet.setlt(a,b)) {
				U.inlined_add(a);
				aite = aite.next;
			} else {
				V.inlined_add(b);
				bite = bite.next;
			}
		}
		while(aite != null) {
			U.inlined_add(aite.elt);
			aite = aite.next;
		}
		while(bite != null) {
			V.inlined_add(bite.elt);
			bite = bite.next;
		}
		while(!(U.head == null)) {
			var x = U.pop_unsafe();
			var cx_ite = B.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(V.head == null)) {
			var x = V.pop_unsafe();
			var cx_ite = W.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
		while(!(W.head == null)) {
			var x = W.pop_unsafe();
			lambda(x,x);
			var cx_ite = W.head;
			while(cx_ite != null) {
				var y = cx_ite.elt;
				lambda(x,y);
				cx_ite = cx_ite.next;
			}
		}
	}
	,wake: function() {
		this.with_union(function(cb) {
			var cx_ite = cb.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				i.wake();
				cx_ite = cx_ite.next;
			}
		});
	}
	,setInteractionType: function(itype) {
		this.itype = itype;
	}
	,__class__: zpp_nape.callbacks.ZPP_InteractionListener
});
zpp_nape.callbacks.ZPP_OptionType = function() {
	this.wrap_excludes = null;
	this.wrap_includes = null;
	this.excludes = null;
	this.includes = null;
	this.handler = null;
	this.outer = null;
	this.includes = new zpp_nape.util.ZNPList_ZPP_CbType();
	this.excludes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.callbacks.ZPP_OptionType.__name__ = ["zpp_nape","callbacks","ZPP_OptionType"];
zpp_nape.callbacks.ZPP_OptionType.argument = function(val) {
	return val == null?new nape.callbacks.OptionType():js.Boot.__instanceof(val,nape.callbacks.OptionType)?val:new nape.callbacks.OptionType().including(val);
}
zpp_nape.callbacks.ZPP_OptionType.prototype = {
	append: function(list,val) {
		if(val == null) throw "Error: Cannot append null, only CbType and CbType list values";
		if(js.Boot.__instanceof(val,nape.callbacks.CbType)) {
			var cb = val;
			this.append_type(list,cb.zpp_inner);
		} else if(js.Boot.__instanceof(val,nape.callbacks.CbTypeList)) {
			var cbs = val;
			var $it0 = (function($this) {
				var $r;
				cbs.zpp_inner.valmod();
				$r = nape.callbacks.CbTypeIterator.get(cbs);
				return $r;
			}(this));
			while( $it0.hasNext() ) {
				var cb = $it0.next();
				this.append_type(list,cb.zpp_inner);
			}
		} else if(js.Boot.__instanceof(val,Array)) {
			var cbs = val;
			var _g = 0;
			while(_g < cbs.length) {
				var cb = cbs[_g];
				++_g;
				if(!js.Boot.__instanceof(cb,nape.callbacks.CbType)) throw "Error: Cannot append non-CbType or CbType list value";
				var cbx = cb;
				this.append_type(list,cbx.zpp_inner);
			}
		} else throw "Error: Cannot append non-CbType or CbType list value";
	}
	,set: function(options) {
		if(options != this) {
			while(!(this.includes.head == null)) this.append_type(this.excludes,this.includes.head.elt);
			while(!(this.excludes.head == null)) this.append_type(this.includes,this.excludes.head.elt);
			var cx_ite = options.excludes.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				this.append_type(this.excludes,i);
				cx_ite = cx_ite.next;
			}
			var cx_ite = options.includes.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				this.append_type(this.includes,i);
				cx_ite = cx_ite.next;
			}
		}
		return this;
	}
	,append_type: function(list,val) {
		if(list == this.includes) {
			if(!this.includes.has(val)) {
				if(!this.excludes.has(val)) {
					if(this.handler != null) this.handler(val,true,true); else this.effect_change(val,true,true);
				} else if(this.handler != null) this.handler(val,false,false); else this.effect_change(val,false,false);
			}
		} else if(!this.excludes.has(val)) {
			if(!this.includes.has(val)) {
				if(this.handler != null) this.handler(val,false,true); else this.effect_change(val,false,true);
			} else if(this.handler != null) this.handler(val,true,false); else this.effect_change(val,true,false);
		}
	}
	,effect_change: function(val,included,added) {
		if(included) {
			if(added) {
				var pre = null;
				var cx_ite = this.includes.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if(val.id < j.id) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				this.includes.inlined_insert(pre,val);
			} else this.includes.remove(val);
		} else if(added) {
			var pre = null;
			var cx_ite = this.excludes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(val.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.excludes.inlined_insert(pre,val);
		} else this.excludes.remove(val);
	}
	,nonemptyintersection: function(xs,ys) {
		var ret = false;
		var xite = xs.head;
		var eite = ys.head;
		while(eite != null && xite != null) {
			var ex = eite.elt;
			var xi = xite.elt;
			if(ex == xi) {
				ret = true;
				break;
			} else if(ex.id < xi.id) eite = eite.next; else xite = xite.next;
		}
		return ret;
	}
	,compatible: function(xs) {
		return this.nonemptyintersection(xs,this.includes) && !this.nonemptyintersection(xs,this.excludes);
	}
	,included: function(xs) {
		return this.nonemptyintersection(xs,this.includes);
	}
	,excluded: function(xs) {
		return this.nonemptyintersection(xs,this.excludes);
	}
	,setup_excludes: function() {
		this.wrap_excludes = zpp_nape.util.ZPP_CbTypeList.get(this.excludes,true);
	}
	,setup_includes: function() {
		this.wrap_includes = zpp_nape.util.ZPP_CbTypeList.get(this.includes,true);
	}
	,__class__: zpp_nape.callbacks.ZPP_OptionType
}
zpp_nape.constraint = {}
zpp_nape.constraint.ZPP_Constraint = function() {
	this.pre_dt = 0.0;
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.__velocity = false;
	this.ignore = false;
	this.component = null;
	this.removeOnBreak = false;
	this.breakUnderError = false;
	this.breakUnderForce = false;
	this.maxError = 0.0;
	this.maxForce = 0.0;
	this.damping = 0.0;
	this.frequency = 0.0;
	this.stiff = false;
	this.active = false;
	this.space = null;
	this.compound = null;
	this.userData = null;
	this.id = 0;
	this.outer = null;
	this.__velocity = false;
	this.id = zpp_nape.ZPP_ID.Constraint();
	this.stiff = true;
	this.active = true;
	this.ignore = false;
	this.frequency = 10;
	this.damping = 1;
	this.maxForce = Math.POSITIVE_INFINITY;
	this.maxError = Math.POSITIVE_INFINITY;
	this.breakUnderForce = false;
	this.removeOnBreak = true;
	this.pre_dt = -1.0;
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.constraint.ZPP_Constraint.__name__ = ["zpp_nape","constraint","ZPP_Constraint"];
zpp_nape.constraint.ZPP_Constraint.prototype = {
	copyto: function(ret) {
		var me = this.outer;
		var $it0 = ((function($this) {
			var $r;
			if(me.zpp_inner.wrap_cbTypes == null) me.zpp_inner.setupcbTypes();
			$r = me.zpp_inner.wrap_cbTypes;
			return $r;
		}(this))).iterator();
		while( $it0.hasNext() ) {
			var cb = $it0.next();
			((function($this) {
				var $r;
				if(ret.zpp_inner.wrap_cbTypes == null) ret.zpp_inner.setupcbTypes();
				$r = ret.zpp_inner.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		ret.zpp_inner.removeOnBreak = me.zpp_inner.removeOnBreak;
		ret.zpp_inner.removeOnBreak;
		ret.set_breakUnderError(me.zpp_inner.breakUnderError);
		ret.set_breakUnderForce(me.zpp_inner.breakUnderForce);
		ret.set_maxError(me.zpp_inner.maxError);
		ret.set_maxForce(me.zpp_inner.maxForce);
		ret.set_damping(me.zpp_inner.damping);
		ret.set_frequency(me.zpp_inner.frequency);
		ret.set_stiff(me.zpp_inner.stiff);
		ret.set_ignore(me.zpp_inner.ignore);
		ret.set_active(me.zpp_inner.active);
	}
	,copy: function(dict,todo) {
		return null;
	}
	,draw: function(g) {
	}
	,wake: function() {
		if(this.space != null) this.space.wake_constraint(this);
	}
	,applyImpulsePos: function() {
		return false;
	}
	,applyImpulseVel: function() {
		return false;
	}
	,preStep: function(dt) {
		return false;
	}
	,warmStart: function() {
	}
	,broken: function() {
	}
	,pair_exists: function(id,di) {
		return false;
	}
	,forest: function() {
	}
	,wake_connected: function() {
	}
	,validate: function() {
	}
	,clearcache: function() {
	}
	,inactiveBodies: function() {
	}
	,activeBodies: function() {
	}
	,inactiveOrOutSpace: function() {
		this.dealloc_cbSet();
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = o;
		this.component = null;
	}
	,activeInSpace: function() {
		this.alloc_cbSet();
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
			this.component = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = false;
		this.component.constraint = this;
	}
	,removedFromSpace: function() {
		if(this.active) this.inactiveOrOutSpace();
		this.inactiveBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.remove(this);
			cx_ite = cx_ite.next;
		}
	}
	,addedToSpace: function() {
		if(this.active) this.activeInSpace();
		this.activeBodies();
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.constraints.add(this);
			cx_ite = cx_ite.next;
		}
	}
	,deactivate: function() {
		if(this.space != null) this.inactiveOrOutSpace();
	}
	,activate: function() {
		if(this.space != null) this.activeInSpace();
	}
	,dealloc_cbSet: function() {
		if(this.cbSet != null) {
			this.cbSet.constraints.remove(this);
			if(--this.cbSet.count == 0) {
				this.space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
				zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,alloc_cbSet: function() {
		if((this.cbSet = this.space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.constraints.add(this);
		}
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			if(this.space != null) {
				this.dealloc_cbSet();
				cb.constraints.remove(this);
			}
			this.cbTypes.remove(cb);
			if(this.space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Constraint::cbTypes");
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw "Error: Constraint::" + name + " cannot be set during space step()";
	}
	,clear: function() {
	}
	,__class__: zpp_nape.constraint.ZPP_Constraint
}
zpp_nape.constraint.ZPP_AngleJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.scale = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.ratio = 1;
	this.jAcc = 0;
	this.slack = false;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
zpp_nape.constraint.ZPP_AngleJoint.__name__ = ["zpp_nape","constraint","ZPP_AngleJoint"];
zpp_nape.constraint.ZPP_AngleJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_AngleJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var slack;
		E = (function($this) {
			var $r;
			var C = $this.ratio * $this.b2.rot - $this.b1.rot;
			if($this.equal) {
				C -= $this.jointMax;
				slack = false;
				$this.scale = 1.0;
			} else if(C < $this.jointMin) {
				C = $this.jointMin - C;
				$this.scale = -1.0;
				slack = false;
			} else if(C > $this.jointMax) {
				C -= $this.jointMax;
				$this.scale = 1.0;
				slack = false;
			} else {
				$this.scale = 0.0;
				C = 0;
				slack = true;
			}
			$r = C;
			return $r;
		}(this));
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			E *= 0.5;
			j = -E * this.kMass;
			if(this.equal || j < 0) {
				this.b1.delta_rot(-this.scale * j * this.b1.iinertia);
				this.b2.delta_rot(this.ratio * this.scale * j * this.b2.iinertia);
			}
		}
		return false;
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.scale * (this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel);
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && (this.jAcc > this.jMax || this.jAcc < -this.jMax)) return true;
		if(!this.stiff) {
			if(this.jAcc > this.jMax) this.jAcc = this.jMax; else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		this.b1.angvel -= this.scale * this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * j;
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			this.b1.angvel -= this.scale * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.ratio * this.scale * this.b2.iinertia * this.jAcc;
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		var C = (function($this) {
			var $r;
			var C1 = $this.ratio * $this.b2.rot - $this.b1.rot;
			if($this.equal) {
				C1 -= $this.jointMax;
				$this.slack = false;
				$this.scale = 1.0;
			} else if(C1 < $this.jointMin) {
				C1 = $this.jointMin - C1;
				$this.scale = -1.0;
				$this.slack = false;
			} else if(C1 > $this.jointMax) {
				C1 -= $this.jointMax;
				$this.scale = 1.0;
				$this.slack = false;
			} else {
				$this.scale = 0.0;
				C1 = 0;
				$this.slack = true;
			}
			$r = C1;
			return $r;
		}(this));
		if(!this.slack) {
			this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				this.kMass *= (function($this) {
					var $r;
					var omega = 2 * Math.PI * $this.frequency;
					$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
					var ig = 1 / (1 + $this.gamma);
					biasCoef = dt * omega * omega * $this.gamma;
					$this.gamma *= ig;
					$r = ig;
					return $r;
				}(this));
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
		this.slack = false;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: AngleJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: AngleJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.AngleJoint(null,null,this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.scale * this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.scale * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,is_slack: function() {
		var slack;
		var C = this.ratio * this.b2.rot - this.b1.rot;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
			this.scale = 1.0;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			this.scale = -1.0;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			this.scale = 1.0;
			slack = false;
		} else {
			this.scale = 0.0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,__class__: zpp_nape.constraint.ZPP_AngleJoint
});
zpp_nape.constraint.ZPP_CopyHelper = function() {
	this.cb = null;
	this.bc = null;
	this.id = 0;
};
zpp_nape.constraint.ZPP_CopyHelper.__name__ = ["zpp_nape","constraint","ZPP_CopyHelper"];
zpp_nape.constraint.ZPP_CopyHelper.dict = function(id,bc) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.bc = bc;
	return ret;
}
zpp_nape.constraint.ZPP_CopyHelper.todo = function(id,cb) {
	var ret = new zpp_nape.constraint.ZPP_CopyHelper();
	ret.id = id;
	ret.cb = cb;
	return ret;
}
zpp_nape.constraint.ZPP_CopyHelper.prototype = {
	__class__: zpp_nape.constraint.ZPP_CopyHelper
}
zpp_nape.constraint.ZPP_DistanceJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = 0;
};
zpp_nape.constraint.ZPP_DistanceJoint.__name__ = ["zpp_nape","constraint","ZPP_DistanceJoint"];
zpp_nape.constraint.ZPP_DistanceJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_DistanceJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var slack;
		var nx = 0.0;
		var ny = 0.0;
		E = (function($this) {
			var $r;
			nx = $this.b2.posx + r2x - ($this.b1.posx + r1x);
			ny = $this.b2.posy + r2y - ($this.b1.posy + r1y);
			var C = nx * nx + ny * ny;
			if(C < nape.Config.epsilon) {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			} else {
				C = Math.sqrt(C);
				var t = 1.0 / C;
				nx *= t;
				ny *= t;
				if($this.equal) {
					C -= $this.jointMax;
					slack = false;
				} else if(C < $this.jointMin) {
					C = $this.jointMin - C;
					nx = -nx;
					ny = -ny;
					slack = false;
				} else if(C > $this.jointMax) {
					C -= $this.jointMax;
					slack = false;
				} else {
					nx = 0;
					ny = 0;
					C = 0;
					slack = true;
				}
			}
			$r = C;
			return $r;
		}(this));
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape.Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t = j * this.b1.imass;
						this.b1.posx -= nx * t;
						this.b1.posy -= ny * t;
						var t = j * this.b2.imass;
						this.b2.posx += nx * t;
						this.b2.posy += ny * t;
						E = (function($this) {
							var $r;
							nx = $this.b2.posx + r2x - ($this.b1.posx + r1x);
							ny = $this.b2.posy + r2y - ($this.b1.posy + r1y);
							var C = nx * nx + ny * ny;
							if(C < nape.Config.epsilon) {
								nx = 0;
								ny = 0;
								C = 0;
								slack = true;
							} else {
								C = Math.sqrt(C);
								var t = 1.0 / C;
								nx *= t;
								ny *= t;
								if($this.equal) {
									C -= $this.jointMax;
									slack = false;
								} else if(C < $this.jointMin) {
									C = $this.jointMin - C;
									nx = -nx;
									ny = -ny;
									slack = false;
								} else if(C > $this.jointMax) {
									C -= $this.jointMax;
									slack = false;
								} else {
									nx = 0;
									ny = 0;
									C = 0;
									slack = true;
								}
							}
							$r = C;
							return $r;
						}(this));
						E *= 0.5;
					}
				}
			}
			var cx1, cx2;
			var k = (function($this) {
				var $r;
				cx1 = ny * r1x - nx * r1y;
				cx2 = ny * r2x - nx * r2y;
				$r = $this.b1.smass + $this.b2.smass + cx1 * cx1 * $this.b1.sinertia + cx2 * cx2 * $this.b2.sinertia;
				return $r;
			}(this));
			if(k != 0) k = 1 / k;
			j = -E * k;
			if(this.equal || j < 0) {
				var t = this.b1.imass * j;
				this.b1.posx -= nx * t;
				this.b1.posy -= ny * t;
				var t = this.b2.imass * j;
				this.b2.posx += nx * t;
				this.b2.posy += ny * t;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
			}
		}
		return false;
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.nx * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.ny * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.nx * t;
		this.b1.vely -= this.ny * t;
		var t = this.b2.imass * j;
		this.b2.velx += this.nx * t;
		this.b2.vely += this.ny * t;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.nx * t;
			this.b1.vely -= this.ny * t;
			var t = this.b2.imass * this.jAcc;
			this.b2.velx += this.nx * t;
			this.b2.vely += this.ny * t;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var C = (function($this) {
			var $r;
			$this.nx = $this.b2.posx + $this.a2relx - ($this.b1.posx + $this.a1relx);
			$this.ny = $this.b2.posy + $this.a2rely - ($this.b1.posy + $this.a1rely);
			var C1 = $this.nx * $this.nx + $this.ny * $this.ny;
			if(C1 < nape.Config.epsilon) {
				$this.nx = 0;
				$this.ny = 0;
				C1 = 0;
				$this.slack = true;
			} else {
				C1 = Math.sqrt(C1);
				var t = 1.0 / C1;
				$this.nx *= t;
				$this.ny *= t;
				if($this.equal) {
					C1 -= $this.jointMax;
					$this.slack = false;
				} else if(C1 < $this.jointMin) {
					C1 = $this.jointMin - C1;
					$this.nx = -$this.nx;
					$this.ny = -$this.ny;
					$this.slack = false;
				} else if(C1 > $this.jointMax) {
					C1 -= $this.jointMax;
					$this.slack = false;
				} else {
					$this.nx = 0;
					$this.ny = 0;
					C1 = 0;
					$this.slack = true;
				}
			}
			$r = C1;
			return $r;
		}(this));
		if(!this.slack) {
			this.kMass = (function($this) {
				var $r;
				$this.cx1 = $this.ny * $this.a1relx - $this.nx * $this.a1rely;
				$this.cx2 = $this.ny * $this.a2relx - $this.nx * $this.a2rely;
				$r = $this.b1.smass + $this.b2.smass + $this.cx1 * $this.cx1 * $this.b1.sinertia + $this.cx2 * $this.cx2 * $this.b2.sinertia;
				return $r;
			}(this));
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				this.kMass *= (function($this) {
					var $r;
					var omega = 2 * Math.PI * $this.frequency;
					$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
					var ig = 1 / (1 + $this.gamma);
					biasCoef = dt * omega * omega * $this.gamma;
					$this.gamma *= ig;
					$r = ig;
					return $r;
				}(this));
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: DistanceJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.DistanceJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAcc * this.nx,-this.jAcc * this.ny,-this.cx1 * this.jAcc); else return nape.geom.Vec3.get(this.jAcc * this.nx,this.jAcc * this.ny,this.cx2 * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		ny = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		var C = nx * nx + ny * ny;
		if(C < nape.Config.epsilon) {
			nx = 0;
			ny = 0;
			C = 0;
			slack = true;
		} else {
			C = Math.sqrt(C);
			var t = 1.0 / C;
			nx *= t;
			ny *= t;
			if(this.equal) {
				C -= this.jointMax;
				slack = false;
			} else if(C < this.jointMin) {
				C = this.jointMin - C;
				nx = -nx;
				ny = -ny;
				slack = false;
			} else if(C > this.jointMax) {
				C -= this.jointMax;
				slack = false;
			} else {
				nx = 0;
				ny = 0;
				C = 0;
				slack = true;
			}
		}
		C;
		return slack;
	}
	,__class__: zpp_nape.constraint.ZPP_DistanceJoint
});
zpp_nape.constraint.ZPP_LineJoint = function() {
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_n = null;
	this.nrely = 0.0;
	this.nrelx = 0.0;
	this.nlocaly = 0.0;
	this.nlocalx = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.dot2 = 0.0;
	this.dot1 = 0.0;
	this.equal = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.scale = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.nlocalx = 0;
	this.nlocaly = 0;
	this.nrelx = 0;
	this.nrely = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.jointMin = Math.NEGATIVE_INFINITY;
	this.jointMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
};
zpp_nape.constraint.ZPP_LineJoint.__name__ = ["zpp_nape","constraint","ZPP_LineJoint"];
zpp_nape.constraint.ZPP_LineJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_LineJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
	}
	,applyImpulsePos: function() {
		var nx = 0.0;
		var ny = 0.0;
		nx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		ny = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var scale;
		var Ex = 0.0;
		var Ey = 0.0;
		dx = this.b2.posx + r2x - this.b1.posx - r1x;
		dy = this.b2.posy + r2y - this.b1.posy - r1y;
		Ex = dy * nx - dx * ny;
		Ey = nx * dx + ny * dy;
		if(this.equal) {
			Ey -= this.jointMin;
			scale = 1.0;
		} else if(Ey > this.jointMax) {
			Ey -= this.jointMax;
			scale = 1.0;
		} else if(Ey < this.jointMin) {
			Ey = this.jointMin - Ey;
			scale = -1.0;
		} else {
			Ey = 0;
			scale = 0;
		}
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var Jx = 0.0;
		var Jy = 0.0;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.8 / k;
				var Jx1 = k * (ny * Ex - scale * nx * Ey);
				var Jy1 = k * (nx * Ex * scale - ny * Ex);
				var t = this.b1.imass;
				this.b1.posx -= Jx1 * t;
				this.b1.posy -= Jy1 * t;
				var t = this.b2.imass;
				this.b2.posx += Jx1 * t;
				this.b2.posy += Jy1 * t;
				dx = this.b2.posx + r2x - this.b1.posx - r1x;
				dy = this.b2.posy + r2y - this.b1.posy - r1y;
				Ex = dy * nx - dx * ny;
				Ey = nx * dx + ny * dy;
				if(this.equal) {
					Ey -= this.jointMin;
					scale = 1.0;
				} else if(Ey > this.jointMax) {
					Ey -= this.jointMax;
					scale = 1.0;
				} else if(Ey < this.jointMin) {
					Ey = this.jointMin - Ey;
					scale = -1.0;
				} else {
					Ey = 0;
					scale = 0;
				}
				var t = 0.5;
				Ex *= t;
				Ey *= t;
			}
		}
		var dot1, dot2, cx1, cx2;
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + r1x;
		dry = dy + r1y;
		dot1 = nx * drx + ny * dry;
		cx1 = dry * nx - drx * ny;
		dot2 = nx * r2x + ny * r2y;
		cx2 = r2y * nx - r2x * ny;
		Ka = this.b1.smass + this.b2.smass + dot1 * dot1 * this.b1.sinertia + dot2 * dot2 * this.b2.sinertia;
		Kb = -scale * (dot1 * cx1 * this.b1.sinertia + dot2 * cx2 * this.b2.sinertia);
		Kc = scale * scale * (this.b1.smass + this.b2.smass + cx1 * cx1 * this.b1.sinertia + cx2 * cx2 * this.b2.sinertia);
		Jx = -Ex;
		Jy = -Ey;
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t;
		}
		if(Jy > 0) Jy = 0;
		var J2x = scale * nx * Jy - ny * Jx;
		var J2y = nx * Jx + scale * ny * Jy;
		var t = this.b1.imass;
		this.b1.posx -= J2x * t;
		this.b1.posy -= J2y * t;
		var t = this.b2.imass;
		this.b2.posx += J2x * t;
		this.b2.posy += J2y * t;
		this.b1.delta_rot((scale * cx1 * Jy - dot1 * Jx) * this.b1.iinertia);
		this.b2.delta_rot((dot2 * Jx - scale * cx2 * Jy) * this.b2.iinertia);
		return false;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var dvx = 0.0;
		var dvy = 0.0;
		dvx = this.b2.velx - this.b1.velx;
		dvy = this.b2.vely - this.b1.vely;
		dvx += this.b2.kinvelx - this.b1.kinvelx;
		dvy += this.b2.kinvely - this.b1.kinvely;
		Ex = dvy * this.nrelx - dvx * this.nrely + (this.b2.angvel + this.b2.kinangvel) * this.dot2 - (this.b1.angvel + this.b1.kinangvel) * this.dot1;
		Ey = this.scale * (this.nrelx * dvx + this.nrely * dvy - (this.b2.angvel + this.b2.kinangvel) * this.cx2 + (this.b1.angvel + this.b1.kinangvel) * this.cx1);
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t = this.gamma;
		Jx -= this.jAccx * t;
		Jy -= this.jAccy * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t = 1.0;
		this.jAccx += Jx * t;
		this.jAccy += Jy * t;
		if(this.jAccy > 0) this.jAccy = 0;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.jAccx *= t1;
				this.jAccy *= t1;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var J2x = this.scale * this.nrelx * Jy - this.nrely * Jx;
		var J2y = this.nrelx * Jx + this.scale * this.nrely * Jy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t = this.b2.imass;
		this.b2.velx += J2x * t;
		this.b2.vely += J2y * t;
		this.b1.angvel += (this.scale * this.cx1 * Jy - this.dot1 * Jx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * Jx - this.scale * this.cx2 * Jy) * this.b2.iinertia;
		return false;
	}
	,warmStart: function() {
		var J2x = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
		var J2y = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
		var t = this.b1.imass;
		this.b1.velx -= J2x * t;
		this.b1.vely -= J2y * t;
		var t = this.b2.imass;
		this.b2.velx += J2x * t;
		this.b2.vely += J2y * t;
		this.b1.angvel += (this.scale * this.cx1 * this.jAccy - this.dot1 * this.jAccx) * this.b1.iinertia;
		this.b2.angvel += (this.dot2 * this.jAccx - this.scale * this.cx2 * this.jAccy) * this.b2.iinertia;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.equal = this.jointMin == this.jointMax;
		this.stepped = true;
		this.validate_norm();
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.nrelx = this.b1.axisy * this.nlocalx - this.b1.axisx * this.nlocaly;
		this.nrely = this.nlocalx * this.b1.axisx + this.nlocaly * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var dx = 0.0;
		var dy = 0.0;
		var Cx = 0.0;
		var Cy = 0.0;
		dx = this.b2.posx + this.a2relx - this.b1.posx - this.a1relx;
		dy = this.b2.posy + this.a2rely - this.b1.posy - this.a1rely;
		Cx = dy * this.nrelx - dx * this.nrely;
		Cy = this.nrelx * dx + this.nrely * dy;
		if(this.equal) {
			Cy -= this.jointMin;
			this.scale = 1.0;
		} else if(Cy > this.jointMax) {
			Cy -= this.jointMax;
			this.scale = 1.0;
		} else if(Cy < this.jointMin) {
			Cy = this.jointMin - Cy;
			this.scale = -1.0;
		} else {
			Cy = 0;
			this.scale = 0;
		}
		var drx = 0.0;
		var dry = 0.0;
		drx = dx + this.a1relx;
		dry = dy + this.a1rely;
		this.dot1 = this.nrelx * drx + this.nrely * dry;
		this.cx1 = dry * this.nrelx - drx * this.nrely;
		this.dot2 = this.nrelx * this.a2relx + this.nrely * this.a2rely;
		this.cx2 = this.a2rely * this.nrelx - this.a2relx * this.nrely;
		this.kMassa = this.b1.smass + this.b2.smass + this.dot1 * this.dot1 * this.b1.sinertia + this.dot2 * this.dot2 * this.b2.sinertia;
		this.kMassb = -this.scale * (this.dot1 * this.cx1 * this.b1.sinertia + this.dot2 * this.cx2 * this.b2.sinertia);
		this.kMassc = this.scale * this.scale * (this.b1.smass + this.b2.smass + this.cx1 * this.cx1 * this.b1.sinertia + this.cx2 * this.cx2 * this.b2.sinertia);
		var flag = (function($this) {
			var $r;
			var det = $this.kMassa * $this.kMassc - $this.kMassb * $this.kMassb;
			$r = det != det?(function($this) {
				var $r;
				$this.kMassa = $this.kMassb = $this.kMassc = 0;
				$r = 3;
				return $r;
			}($this)):det == 0?(function($this) {
				var $r;
				var flag1 = 0;
				if($this.kMassa != 0) $this.kMassa = 1 / $this.kMassa; else {
					$this.kMassa = 0;
					flag1 |= 1;
				}
				if($this.kMassc != 0) $this.kMassc = 1 / $this.kMassc; else {
					$this.kMassc = 0;
					flag1 |= 2;
				}
				$this.kMassb = 0;
				$r = flag1;
				return $r;
			}($this)):(function($this) {
				var $r;
				det = 1 / det;
				var t = $this.kMassc * det;
				$this.kMassc = $this.kMassa * det;
				$this.kMassa = t;
				$this.kMassb *= -det;
				$r = 0;
				return $r;
			}($this));
			return $r;
		}(this));
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			if(this.breakUnderError && Cx * Cx + Cy * Cy > this.maxError * this.maxError) return true;
			var biasCoef;
			var X = (function($this) {
				var $r;
				var omega = 2 * Math.PI * $this.frequency;
				$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
				var ig = 1 / (1 + $this.gamma);
				biasCoef = dt * omega * omega * $this.gamma;
				$this.gamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = Cx;
			this.biasy = Cy;
			var t = -biasCoef;
			this.biasx *= t;
			this.biasy *= t;
			var t = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.biasx *= t1;
				this.biasy *= t1;
			}
		} else {
			this.gamma = 0;
			this.biasx = 0;
			this.biasy = 0;
		}
		var t = dtratio;
		this.jAccx *= t;
		this.jAccy *= t;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: DistanceJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: DistanceJoint must have jointMin <= jointMax";
		if(this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly < nape.Config.epsilon) throw "Error: DistanceJoint direction must be non-degenerate";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.LineJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_direction(),this.jointMin,this.jointMax);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,validate_norm: function() {
		if(this.zip_n) {
			this.zip_n = false;
			var d = this.nlocalx * this.nlocalx + this.nlocaly * this.nlocaly;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.nlocalx *= t;
			this.nlocaly *= t;
		}
	}
	,setup_n: function() {
		this.wrap_n = nape.geom.Vec2.get(this.nlocalx,this.nlocaly,null);
		this.wrap_n.zpp_inner._inuse = true;
		this.wrap_n.zpp_inner._validate = $bind(this,this.validate_n);
		this.wrap_n.zpp_inner._invalidate = $bind(this,this.invalidate_n);
	}
	,invalidate_n: function(x) {
		this.immutable_midstep("Constraint::" + "n");
		this.nlocalx = x.x;
		this.nlocaly = x.y;
		this.zip_n = true;
		this.wake();
	}
	,validate_n: function() {
		this.wrap_n.zpp_inner.x = this.nlocalx;
		this.wrap_n.zpp_inner.y = this.nlocaly;
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var jx = this.scale * this.nrelx * this.jAccy - this.nrely * this.jAccx;
			var jy = this.nrelx * this.jAccx + this.scale * this.nrely * this.jAccy;
			if(b == this.b1) return nape.geom.Vec3.get(-jx,-jy,this.scale * this.cx1 * jy - this.dot1 * jx); else return nape.geom.Vec3.get(jx,jy,this.scale * this.cx1 * jy - this.dot1 * jx);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,__class__: zpp_nape.constraint.ZPP_LineJoint
});
zpp_nape.constraint.ZPP_MotorJoint = function() {
	this.stepped = false;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.b2 = null;
	this.b1 = null;
	this.rate = 0.0;
	this.ratio = 0.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.jAcc = 0;
	this.stepped = false;
	this.__velocity = true;
};
zpp_nape.constraint.ZPP_MotorJoint.__name__ = ["zpp_nape","constraint","ZPP_MotorJoint"];
zpp_nape.constraint.ZPP_MotorJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_MotorJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	applyImpulsePos: function() {
		return false;
	}
	,applyImpulseVel: function() {
		var E = this.ratio * (this.b2.angvel + this.b2.kinangvel) - this.b1.angvel - this.b1.kinangvel - this.rate;
		var j = -this.kMass * E;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(this.breakUnderForce) {
			if(this.jAcc > this.jMax || this.jAcc < -this.jMax) return true;
		} else if(this.jAcc < -this.jMax) this.jAcc = -this.jMax; else if(this.jAcc > this.jMax) this.jAcc = this.jMax;
		j = this.jAcc - jOld;
		this.b1.angvel -= this.b1.iinertia * j;
		this.b2.angvel += this.ratio * this.b2.iinertia * j;
		return false;
	}
	,warmStart: function() {
		this.b1.angvel -= this.b1.iinertia * this.jAcc;
		this.b2.angvel += this.ratio * this.b2.iinertia * this.jAcc;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.kMass = this.b1.sinertia + this.ratio * this.ratio * this.b2.sinertia;
		this.kMass = 1.0 / this.kMass;
		this.jAcc *= dtratio;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: MotorJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.MotorJoint(null,null,this.rate,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(0,0,-this.jAcc); else return nape.geom.Vec3.get(0,0,this.ratio * this.jAcc);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,__class__: zpp_nape.constraint.ZPP_MotorJoint
});
zpp_nape.constraint.ZPP_PivotJoint = function() {
	this.stepped = false;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.stepped = false;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_nape.constraint.ZPP_PivotJoint.__name__ = ["zpp_nape","constraint","ZPP_PivotJoint"];
zpp_nape.constraint.ZPP_PivotJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_PivotJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		if(this.breakUnderError && Ex * Ex + Ey * Ey > this.maxError * this.maxError) return true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var t = 0.5;
		Ex *= t;
		Ey *= t;
		var Jx = 0.0;
		var Jy = 0.0;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t * t) {
					var t1 = t * (1.0 / Math.sqrt(ls));
					Jx *= t1;
					Jy *= t1;
				}
				var t = this.b1.imass;
				this.b1.posx -= Jx * t;
				this.b1.posy -= Jy * t;
				var t = this.b2.imass;
				this.b2.posx += Jx * t;
				this.b2.posy += Jy * t;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				var t = 0.5;
				Ex *= t;
				Ey *= t;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kc = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kc = m;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kc += X * r1x;
		}
		if(this.b2.sinertia != 0) {
			var X = r2x * this.b2.sinertia;
			var Y = r2y * this.b2.sinertia;
			Ka += Y * r2y;
			Kb += -Y * r2x;
			Kc += X * r2x;
		}
		Jx = -Ex;
		Jy = -Ey;
		var t = 6;
		var ls = Jx * Jx + Jy * Jy;
		if(ls > t * t) {
			var t1 = t * (1.0 / Math.sqrt(ls));
			Jx *= t1;
			Jy *= t1;
		}
		var det = Ka * Kc - Kb * Kb;
		if(det != det) Jx = Jy = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kc != 0) Jy /= Kc; else Jy = 0;
		} else {
			det = 1 / det;
			var t = det * (Kc * Jx - Kb * Jy);
			Jy = det * (Ka * Jy - Kb * Jx);
			Jx = t;
		}
		var t = this.b1.imass;
		this.b1.posx -= Jx * t;
		this.b1.posy -= Jy * t;
		var t = this.b2.imass;
		this.b2.posx += Jx * t;
		this.b2.posy += Jy * t;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y) * this.b2.iinertia);
		return false;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		var Jx = 0.0;
		var Jy = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		var t = this.kMassa * Jx + this.kMassb * Jy;
		Jy = this.kMassb * Jx + this.kMassc * Jy;
		Jx = t;
		var t = this.gamma;
		Jx -= this.jAccx * t;
		Jy -= this.jAccy * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		var t = 1.0;
		this.jAccx += Jx * t;
		this.jAccy += Jy * t;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.jAccx *= t1;
				this.jAccy *= t1;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		var t = this.b1.imass;
		this.b1.velx -= Jx * t;
		this.b1.vely -= Jy * t;
		var t = this.b2.imass;
		this.b2.velx += Jx * t;
		this.b2.vely += Jy * t;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely) * this.b2.iinertia;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t = this.b2.imass;
		this.b2.velx += this.jAccx * t;
		this.b2.vely += this.jAccy * t;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely) * this.b2.iinertia;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassc = m;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassc += X * this.a1relx;
		}
		if(this.b2.sinertia != 0) {
			var X = this.a2relx * this.b2.sinertia;
			var Y = this.a2rely * this.b2.sinertia;
			this.kMassa += Y * this.a2rely;
			this.kMassb += -Y * this.a2relx;
			this.kMassc += X * this.a2relx;
		}
		var flag = (function($this) {
			var $r;
			var det = $this.kMassa * $this.kMassc - $this.kMassb * $this.kMassb;
			$r = det != det?(function($this) {
				var $r;
				$this.kMassa = $this.kMassb = $this.kMassc = 0;
				$r = 3;
				return $r;
			}($this)):det == 0?(function($this) {
				var $r;
				var flag1 = 0;
				if($this.kMassa != 0) $this.kMassa = 1 / $this.kMassa; else {
					$this.kMassa = 0;
					flag1 |= 1;
				}
				if($this.kMassc != 0) $this.kMassc = 1 / $this.kMassc; else {
					$this.kMassc = 0;
					flag1 |= 2;
				}
				$this.kMassb = 0;
				$r = flag1;
				return $r;
			}($this)):(function($this) {
				var $r;
				det = 1 / det;
				var t = $this.kMassc * det;
				$this.kMassc = $this.kMassa * det;
				$this.kMassa = t;
				$this.kMassb *= -det;
				$r = 0;
				return $r;
			}($this));
			return $r;
		}(this));
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if(!this.stiff) {
			var biasCoef;
			var X = (function($this) {
				var $r;
				var omega = 2 * Math.PI * $this.frequency;
				$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
				var ig = 1 / (1 + $this.gamma);
				biasCoef = dt * omega * omega * $this.gamma;
				$this.gamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassc *= X;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy > this.maxError * this.maxError) return true;
			var t = -biasCoef;
			this.biasx *= t;
			this.biasy *= t;
			var t = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				this.biasx *= t1;
				this.biasy *= t1;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.gamma = 0;
		}
		var t = dtratio;
		this.jAccx *= t;
		this.jAccy *= t;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.pre_dt = -1.0;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: PivotJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: PivotJoint cannot be simulated with body1 == body2 (body1=body2=" + this.b1.outer.toString() + ")";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic (body1=" + this.b1.outer.toString() + ", body2=" + this.b2.outer.toString() + ")";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,__class__: zpp_nape.constraint.ZPP_PivotJoint
});
zpp_nape.constraint.ZPP_PulleyJoint = function() {
	this.stepped = false;
	this.bias = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAcc = 0.0;
	this.kMass = 0.0;
	this.wrap_a4 = null;
	this.a4rely = 0.0;
	this.a4relx = 0.0;
	this.a4localy = 0.0;
	this.a4localx = 0.0;
	this.b4 = null;
	this.wrap_a3 = null;
	this.a3rely = 0.0;
	this.a3relx = 0.0;
	this.a3localy = 0.0;
	this.a3localx = 0.0;
	this.b3 = null;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.cx4 = 0.0;
	this.cx3 = 0.0;
	this.cx2 = 0.0;
	this.cx1 = 0.0;
	this.n34y = 0.0;
	this.n34x = 0.0;
	this.n12y = 0.0;
	this.n12x = 0.0;
	this.equal = false;
	this.slack = false;
	this.jointMax = 0.0;
	this.jointMin = 0.0;
	this.ratio = 1.0;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
	this.a3localx = 0;
	this.a3localy = 0;
	this.a3relx = 0;
	this.a3rely = 0;
	this.a4localx = 0;
	this.a4localy = 0;
	this.a4relx = 0;
	this.a4rely = 0;
	this.n12x = 1;
	this.n12y = 0;
	this.n34x = 1;
	this.n34y = 0;
	this.jAcc = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.cx1 = this.cx2 = this.cx3 = this.cx4 = 0;
};
zpp_nape.constraint.ZPP_PulleyJoint.__name__ = ["zpp_nape","constraint","ZPP_PulleyJoint"];
zpp_nape.constraint.ZPP_PulleyJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_PulleyJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
	}
	,applyImpulsePos: function() {
		var E;
		var j;
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var r3x = 0.0;
		var r3y = 0.0;
		r3x = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		r3y = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		var r4x = 0.0;
		var r4y = 0.0;
		r4x = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		r4y = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var slack;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		n12x = this.n12x;
		n12y = this.n12y;
		n34x = this.n34x;
		n34y = this.n34y;
		E = (function($this) {
			var $r;
			var t12x = 0.0;
			var t12y = 0.0;
			var t34x = 0.0;
			var t34y = 0.0;
			t12x = $this.b2.posx + r2x - ($this.b1.posx + r1x);
			t12y = $this.b2.posy + r2y - ($this.b1.posy + r1y);
			t34x = $this.b4.posx + r4x - ($this.b3.posx + r3x);
			t34y = $this.b4.posy + r4y - ($this.b3.posy + r3y);
			var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
			var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
			if(C12 != 0) {
				var t = 1.0 / C12;
				n12x = t12x * t;
				n12y = t12y * t;
			}
			if(C34 != 0) {
				var t = 1.0 / C34;
				n34x = t34x * t;
				n34y = t34y * t;
				var t = $this.ratio;
				n34x *= t;
				n34y *= t;
			} else {
				var t = $this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
				n34x *= t;
				n34y *= t;
			}
			var C = C12 + $this.ratio * C34;
			if($this.equal) {
				C -= $this.jointMax;
				slack = false;
			} else if(C < $this.jointMin) {
				C = $this.jointMin - C;
				n12x = -n12x;
				n12y = -n12y;
				n34x = -n34x;
				n34y = -n34y;
				slack = false;
			} else if(C > $this.jointMax) {
				C -= $this.jointMax;
				slack = false;
			} else {
				n12x = 0;
				n12y = 0;
				n34x = 0;
				n34y = 0;
				C = 0;
				slack = true;
			}
			$r = C;
			return $r;
		}(this));
		if(!slack) {
			if(this.breakUnderError && E * E > this.maxError * this.maxError) return true;
			if(E * E < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
			E *= 0.5;
			if(E * E > 6) {
				var k = this.b1.smass + this.b2.smass;
				if(k > nape.Config.epsilon) {
					k = 0.75 / k;
					j = -E * k;
					if(this.equal || j < 0) {
						var t = j * this.b1.imass;
						this.b1.posx -= n12x * t;
						this.b1.posy -= n12y * t;
						var t = j * this.b2.imass;
						this.b2.posx += n12x * t;
						this.b2.posy += n12y * t;
						var t = j * this.b3.imass;
						this.b3.posx -= n34x * t;
						this.b3.posy -= n34y * t;
						var t = j * this.b4.imass;
						this.b4.posx += n34x * t;
						this.b4.posy += n34y * t;
						E = (function($this) {
							var $r;
							var t12x = 0.0;
							var t12y = 0.0;
							var t34x = 0.0;
							var t34y = 0.0;
							t12x = $this.b2.posx + r2x - ($this.b1.posx + r1x);
							t12y = $this.b2.posy + r2y - ($this.b1.posy + r1y);
							t34x = $this.b4.posx + r4x - ($this.b3.posx + r3x);
							t34y = $this.b4.posy + r4y - ($this.b3.posy + r3y);
							var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
							var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
							if(C12 != 0) {
								var t = 1.0 / C12;
								n12x = t12x * t;
								n12y = t12y * t;
							}
							if(C34 != 0) {
								var t = 1.0 / C34;
								n34x = t34x * t;
								n34y = t34y * t;
								var t = $this.ratio;
								n34x *= t;
								n34y *= t;
							} else {
								var t = $this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
								n34x *= t;
								n34y *= t;
							}
							var C = C12 + $this.ratio * C34;
							if($this.equal) {
								C -= $this.jointMax;
								slack = false;
							} else if(C < $this.jointMin) {
								C = $this.jointMin - C;
								n12x = -n12x;
								n12y = -n12y;
								n34x = -n34x;
								n34y = -n34y;
								slack = false;
							} else if(C > $this.jointMax) {
								C -= $this.jointMax;
								slack = false;
							} else {
								n12x = 0;
								n12y = 0;
								n34x = 0;
								n34y = 0;
								C = 0;
								slack = true;
							}
							$r = C;
							return $r;
						}(this));
						E *= 0.5;
					}
				}
			}
			var cx1, cx2, cx3, cx4;
			var k = (function($this) {
				var $r;
				cx1 = n12y * r1x - n12x * r1y;
				cx2 = n12y * r2x - n12x * r2y;
				cx3 = n34y * r3x - n34x * r3y;
				cx4 = n34y * r4x - n34x * r4y;
				var ratioSq = $this.ratio * $this.ratio;
				var K = $this.b1.smass + $this.b2.smass + ratioSq * ($this.b3.smass + $this.b4.smass) + $this.b1.sinertia * cx1 * cx1 + $this.b2.sinertia * cx2 * cx2 + $this.b3.sinertia * cx3 * cx3 + $this.b4.sinertia * cx4 * cx4;
				if($this.b1 == $this.b4) K -= 2 * ((n12x * n34x + n12y * n34y) * $this.b1.smass + cx1 * cx4 * $this.b1.sinertia);
				if($this.b1 == $this.b3) K += 2 * ((n12x * n34x + n12y * n34y) * $this.b1.smass + cx1 * cx3 * $this.b1.sinertia);
				if($this.b2 == $this.b3) K -= 2 * ((n12x * n34x + n12y * n34y) * $this.b2.smass + cx2 * cx3 * $this.b2.sinertia);
				if($this.b2 == $this.b4) K += 2 * ((n12x * n34x + n12y * n34y) * $this.b2.smass + cx2 * cx4 * $this.b2.sinertia);
				$r = K;
				return $r;
			}(this));
			if(k != 0) k = 1 / k;
			j = -E * k;
			if(this.equal || j < 0) {
				var t = this.b1.imass * j;
				this.b1.posx -= n12x * t;
				this.b1.posy -= n12y * t;
				var t = this.b2.imass * j;
				this.b2.posx += n12x * t;
				this.b2.posy += n12y * t;
				var t = this.b3.imass * j;
				this.b3.posx -= n34x * t;
				this.b3.posy -= n34y * t;
				var t = this.b4.imass * j;
				this.b4.posx += n34x * t;
				this.b4.posy += n34y * t;
				this.b1.delta_rot(-cx1 * this.b1.iinertia * j);
				this.b2.delta_rot(cx2 * this.b2.iinertia * j);
				this.b3.delta_rot(-cx3 * this.b3.iinertia * j);
				this.b4.delta_rot(cx4 * this.b4.iinertia * j);
			}
		}
		return false;
	}
	,applyImpulseVel: function() {
		if(this.slack) return false;
		var E = this.n12x * (this.b2.velx + this.b2.kinvelx - this.b1.velx - this.b1.kinvelx) + this.n12y * (this.b2.vely + this.b2.kinvely - this.b1.vely - this.b1.kinvely) + this.n34x * (this.b4.velx + this.b4.kinvelx - this.b3.velx - this.b3.kinvelx) + this.n34y * (this.b4.vely + this.b4.kinvely - this.b3.vely - this.b3.kinvely) + (this.b2.angvel + this.b2.kinangvel) * this.cx2 - (this.b1.angvel + this.b1.kinangvel) * this.cx1 + (this.b4.angvel + this.b4.kinangvel) * this.cx4 - (this.b3.angvel + this.b3.kinangvel) * this.cx3;
		var j = this.kMass * (this.bias - E) - this.jAcc * this.gamma;
		var jOld = this.jAcc;
		this.jAcc += j;
		if(!this.equal && this.jAcc > 0) this.jAcc = 0;
		if(this.breakUnderForce && this.jAcc < -this.jMax) return true;
		if(!this.stiff) {
			if(this.jAcc < -this.jMax) this.jAcc = -this.jMax;
		}
		j = this.jAcc - jOld;
		var t = this.b1.imass * j;
		this.b1.velx -= this.n12x * t;
		this.b1.vely -= this.n12y * t;
		var t = this.b2.imass * j;
		this.b2.velx += this.n12x * t;
		this.b2.vely += this.n12y * t;
		var t = this.b3.imass * j;
		this.b3.velx -= this.n34x * t;
		this.b3.vely -= this.n34y * t;
		var t = this.b4.imass * j;
		this.b4.velx += this.n34x * t;
		this.b4.vely += this.n34y * t;
		this.b1.angvel -= this.cx1 * this.b1.iinertia * j;
		this.b2.angvel += this.cx2 * this.b2.iinertia * j;
		this.b3.angvel -= this.cx3 * this.b3.iinertia * j;
		this.b4.angvel += this.cx4 * this.b4.iinertia * j;
		return false;
	}
	,warmStart: function() {
		if(!this.slack) {
			var t = this.b1.imass * this.jAcc;
			this.b1.velx -= this.n12x * t;
			this.b1.vely -= this.n12y * t;
			var t = this.b2.imass * this.jAcc;
			this.b2.velx += this.n12x * t;
			this.b2.vely += this.n12y * t;
			var t = this.b3.imass * this.jAcc;
			this.b3.velx -= this.n34x * t;
			this.b3.vely -= this.n34y * t;
			var t = this.b4.imass * this.jAcc;
			this.b4.velx += this.n34x * t;
			this.b4.vely += this.n34y * t;
			this.b1.angvel -= this.cx1 * this.b1.iinertia * this.jAcc;
			this.b2.angvel += this.cx2 * this.b2.iinertia * this.jAcc;
			this.b3.angvel -= this.cx3 * this.b3.iinertia * this.jAcc;
			this.b4.angvel += this.cx4 * this.b4.iinertia * this.jAcc;
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.equal = this.jointMin == this.jointMax;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var C = (function($this) {
			var $r;
			var t12x = 0.0;
			var t12y = 0.0;
			var t34x = 0.0;
			var t34y = 0.0;
			t12x = $this.b2.posx + $this.a2relx - ($this.b1.posx + $this.a1relx);
			t12y = $this.b2.posy + $this.a2rely - ($this.b1.posy + $this.a1rely);
			t34x = $this.b4.posx + $this.a4relx - ($this.b3.posx + $this.a3relx);
			t34y = $this.b4.posy + $this.a4rely - ($this.b3.posy + $this.a3rely);
			var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
			var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
			if(C12 != 0) {
				var t = 1.0 / C12;
				$this.n12x = t12x * t;
				$this.n12y = t12y * t;
			}
			if(C34 != 0) {
				var t = 1.0 / C34;
				$this.n34x = t34x * t;
				$this.n34y = t34y * t;
				var t = $this.ratio;
				$this.n34x *= t;
				$this.n34y *= t;
			} else {
				var t = $this.ratio / Math.sqrt($this.n34x * $this.n34x + $this.n34y * $this.n34y);
				$this.n34x *= t;
				$this.n34y *= t;
			}
			var C1 = C12 + $this.ratio * C34;
			if($this.equal) {
				C1 -= $this.jointMax;
				$this.slack = false;
			} else if(C1 < $this.jointMin) {
				C1 = $this.jointMin - C1;
				$this.n12x = -$this.n12x;
				$this.n12y = -$this.n12y;
				$this.n34x = -$this.n34x;
				$this.n34y = -$this.n34y;
				$this.slack = false;
			} else if(C1 > $this.jointMax) {
				C1 -= $this.jointMax;
				$this.slack = false;
			} else {
				$this.n12x = 0;
				$this.n12y = 0;
				$this.n34x = 0;
				$this.n34y = 0;
				C1 = 0;
				$this.slack = true;
			}
			$r = C1;
			return $r;
		}(this));
		if(!this.slack) {
			this.kMass = (function($this) {
				var $r;
				$this.cx1 = $this.n12y * $this.a1relx - $this.n12x * $this.a1rely;
				$this.cx2 = $this.n12y * $this.a2relx - $this.n12x * $this.a2rely;
				$this.cx3 = $this.n34y * $this.a3relx - $this.n34x * $this.a3rely;
				$this.cx4 = $this.n34y * $this.a4relx - $this.n34x * $this.a4rely;
				var ratioSq = $this.ratio * $this.ratio;
				var K = $this.b1.smass + $this.b2.smass + ratioSq * ($this.b3.smass + $this.b4.smass) + $this.b1.sinertia * $this.cx1 * $this.cx1 + $this.b2.sinertia * $this.cx2 * $this.cx2 + $this.b3.sinertia * $this.cx3 * $this.cx3 + $this.b4.sinertia * $this.cx4 * $this.cx4;
				if($this.b1 == $this.b4) K -= 2 * (($this.n12x * $this.n34x + $this.n12y * $this.n34y) * $this.b1.smass + $this.cx1 * $this.cx4 * $this.b1.sinertia);
				if($this.b1 == $this.b3) K += 2 * (($this.n12x * $this.n34x + $this.n12y * $this.n34y) * $this.b1.smass + $this.cx1 * $this.cx3 * $this.b1.sinertia);
				if($this.b2 == $this.b3) K -= 2 * (($this.n12x * $this.n34x + $this.n12y * $this.n34y) * $this.b2.smass + $this.cx2 * $this.cx3 * $this.b2.sinertia);
				if($this.b2 == $this.b4) K += 2 * (($this.n12x * $this.n34x + $this.n12y * $this.n34y) * $this.b2.smass + $this.cx2 * $this.cx4 * $this.b2.sinertia);
				$r = K;
				return $r;
			}(this));
			if(this.kMass != 0) this.kMass = 1 / this.kMass; else this.jAcc = 0;
			if(!this.stiff) {
				if(this.breakUnderError && C * C > this.maxError * this.maxError) return true;
				var biasCoef;
				this.kMass *= (function($this) {
					var $r;
					var omega = 2 * Math.PI * $this.frequency;
					$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
					var ig = 1 / (1 + $this.gamma);
					biasCoef = dt * omega * omega * $this.gamma;
					$this.gamma *= ig;
					$r = ig;
					return $r;
				}(this));
				this.bias = -C * biasCoef;
				if(this.bias < -this.maxError) this.bias = -this.maxError; else if(this.bias > this.maxError) this.bias = this.maxError;
			} else {
				this.bias = 0;
				this.gamma = 0;
			}
			this.jAcc *= dtratio;
			this.jMax = this.maxForce * dt;
		}
		return false;
	}
	,clearcache: function() {
		this.jAcc = 0;
		this.pre_dt = -1.0;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && (this.b2.id == di || this.b3.id == di || this.b4.id == di) || this.b2.id == id && (this.b3.id == di || this.b4.id == di || this.b1.id == di) || this.b3.id == id && (this.b4.id == di || this.b1.id == di || this.b2.id == di) || this.b4.id == id && (this.b1.id == di || this.b2.id == di || this.b3.id == di);
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b3.component == this.b3.component.parent?this.b3.component:(function($this) {
				var $r;
				var obj = $this.b3.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b4.component == this.b4.component.parent?this.b4.component:(function($this) {
				var $r;
				var obj = $this.b4.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
		if(this.b3 != null && this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b3.wake();
		if(this.b4 != null && this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b4.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null || this.b3 == null || this.b4 == null) throw "Error: PulleyJoint cannot be simulated with null bodies";
		if(this.b1 == this.b2 || this.b3 == this.b4) throw "Error: PulleyJoint cannot have body1==body2 or body3==body4";
		if(this.b1.space != this.space || this.b2.space != this.space || this.b3.space != this.space || this.b4.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(this.jointMin > this.jointMax) throw "Error: PulleyJoint must have jointMin <= jointMax";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
		if(!(this.b3.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b4.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: PulleyJoint cannot have both bodies in a linked pair non-dynamic";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PulleyJoint(null,null,null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2(),this.outer_zn.get_anchor3(),this.outer_zn.get_anchor4(),this.jointMin,this.jointMax,this.ratio);
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b3 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b3.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b3 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b3.id,function(b1) {
				ret.zpp_inner_zn.b3 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b4 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b4.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b4 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b4.id,function(b1) {
				ret.zpp_inner_zn.b4 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,setup_a4: function() {
		this.wrap_a4 = nape.geom.Vec2.get(this.a4localx,this.a4localy,null);
		this.wrap_a4.zpp_inner._inuse = true;
		this.wrap_a4.zpp_inner._validate = $bind(this,this.validate_a4);
		this.wrap_a4.zpp_inner._invalidate = $bind(this,this.invalidate_a4);
	}
	,invalidate_a4: function(x) {
		this.immutable_midstep("Constraint::" + "a4");
		this.a4localx = x.x;
		this.a4localy = x.y;
		this.wake();
	}
	,validate_a4: function() {
		this.wrap_a4.zpp_inner.x = this.a4localx;
		this.wrap_a4.zpp_inner.y = this.a4localy;
	}
	,setup_a3: function() {
		this.wrap_a3 = nape.geom.Vec2.get(this.a3localx,this.a3localy,null);
		this.wrap_a3.zpp_inner._inuse = true;
		this.wrap_a3.zpp_inner._validate = $bind(this,this.validate_a3);
		this.wrap_a3.zpp_inner._invalidate = $bind(this,this.invalidate_a3);
	}
	,invalidate_a3: function(x) {
		this.immutable_midstep("Constraint::" + "a3");
		this.a3localx = x.x;
		this.a3localy = x.y;
		this.wake();
	}
	,validate_a3: function() {
		this.wrap_a3.zpp_inner.x = this.a3localx;
		this.wrap_a3.zpp_inner.y = this.a3localy;
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.remove(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
		if(this.b3 != this.b1 && this.b3 != this.b2) {
			if(this.b3 != null) this.b3.constraints.add(this);
		}
		if(this.b4 != this.b1 && this.b4 != this.b2 && this.b4 != this.b3) {
			if(this.b4 != null) this.b4.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			var ret = nape.geom.Vec3.get();
			if(b == this.b1) {
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.x = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n12x;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.x;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.y = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n12y;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.y;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.z = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.z;
					return $r;
				}(this)) - this.cx1 * this.jAcc;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.z;
			}
			if(b == this.b2) {
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.x = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n12x;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.x;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.y = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n12y;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.y;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.z = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.z;
					return $r;
				}(this)) + this.cx2 * this.jAcc;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.z;
			}
			if(b == this.b3) {
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.x = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) - this.jAcc * this.n34x;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.x;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.y = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.y;
					return $r;
				}(this)) - this.jAcc * this.n34y;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.y;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.z = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.z;
					return $r;
				}(this)) - this.cx3 * this.jAcc;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.z;
			}
			if(b == this.b4) {
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.x = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.x;
					return $r;
				}(this)) + this.jAcc * this.n34x;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.x;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.y = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.y;
					return $r;
				}(this)) + this.jAcc * this.n34y;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.y;
				var _g = ret;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				if(_g.zpp_inner.immutable) throw "Error: Vec3 is immutable";
				_g.zpp_inner.z = (function($this) {
					var $r;
					if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
					_g.zpp_inner.validate();
					$r = _g.zpp_inner.z;
					return $r;
				}(this)) + this.cx4 * this.jAcc;
				if(_g != null && _g.zpp_disp) throw "Error: " + "Vec3" + " has been disposed and cannot be used!";
				_g.zpp_inner.validate();
				_g.zpp_inner.z;
			}
			return ret;
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,is_slack: function() {
		var slack;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		this.a3relx = this.b3.axisy * this.a3localx - this.b3.axisx * this.a3localy;
		this.a3rely = this.a3localx * this.b3.axisx + this.a3localy * this.b3.axisy;
		this.a4relx = this.b4.axisy * this.a4localx - this.b4.axisx * this.a4localy;
		this.a4rely = this.a4localx * this.b4.axisx + this.a4localy * this.b4.axisy;
		var n12x = 0.0;
		var n12y = 0.0;
		var n34x = 0.0;
		var n34y = 0.0;
		var t12x = 0.0;
		var t12y = 0.0;
		var t34x = 0.0;
		var t34y = 0.0;
		t12x = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
		t12y = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
		t34x = this.b4.posx + this.a4relx - (this.b3.posx + this.a3relx);
		t34y = this.b4.posy + this.a4rely - (this.b3.posy + this.a3rely);
		var C12 = Math.sqrt(t12x * t12x + t12y * t12y);
		var C34 = Math.sqrt(t34x * t34x + t34y * t34y);
		if(C12 != 0) {
			var t = 1.0 / C12;
			n12x = t12x * t;
			n12y = t12y * t;
		}
		if(C34 != 0) {
			var t = 1.0 / C34;
			n34x = t34x * t;
			n34y = t34y * t;
			var t = this.ratio;
			n34x *= t;
			n34y *= t;
		} else {
			var t = this.ratio / Math.sqrt(n34x * n34x + n34y * n34y);
			n34x *= t;
			n34y *= t;
		}
		var C = C12 + this.ratio * C34;
		if(this.equal) {
			C -= this.jointMax;
			slack = false;
		} else if(C < this.jointMin) {
			C = this.jointMin - C;
			n12x = -n12x;
			n12y = -n12y;
			n34x = -n34x;
			n34y = -n34y;
			slack = false;
		} else if(C > this.jointMax) {
			C -= this.jointMax;
			slack = false;
		} else {
			n12x = 0;
			n12y = 0;
			n34x = 0;
			n34y = 0;
			C = 0;
			slack = true;
		}
		C;
		return slack;
	}
	,__class__: zpp_nape.constraint.ZPP_PulleyJoint
});
zpp_nape.constraint.ZPP_UserConstraint = function(dim,velonly) {
	this.jOld = null;
	this.J = null;
	this.vec3 = null;
	this.Keff = null;
	this.jMax = 0.0;
	this.velonly = false;
	this.gamma = 0.0;
	this.soft = 0.0;
	this.y = null;
	this.L = null;
	this.stepped = false;
	this.bias = null;
	this.jAcc = null;
	this.dim = 0;
	this.bodies = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.bodies = new Array();
	this.dim = dim;
	this.velonly = velonly;
	this.jAcc = new Array();
	this.bias = new Array();
	this.L = new Array();
	this.J = new Array();
	this.jOld = new Array();
	this.y = new Array();
	this.Keff = new Array();
	this.vec3 = nape.geom.Vec3.get(0,0,0);
	var _g = 0;
	while(_g < dim) {
		var i = _g++;
		this.jAcc[i] = this.bias[i] = this.J[i] = this.jOld[i] = this.y[i] = 0.0;
		var _g1 = 0;
		while(_g1 < dim) {
			var j = _g1++;
			this.L[i * dim + j] = 0.0;
		}
	}
	this.stepped = false;
};
zpp_nape.constraint.ZPP_UserConstraint.__name__ = ["zpp_nape","constraint","ZPP_UserConstraint"];
zpp_nape.constraint.ZPP_UserConstraint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_UserConstraint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
		this.outer_zn.__draw(g);
	}
	,applyImpulsePos: function() {
		if(this.velonly) return false;
		this.outer_zn.__prepare();
		this.outer_zn.__position(this.J);
		var lj = this.lsq(this.J);
		if(this.breakUnderError && lj > this.maxError * this.maxError) return true; else if(lj < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) return false;
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] *= -1;
		}
		this.outer_zn.__eff_mass(this.Keff);
		this.transform(this.solve(this.Keff),this.J);
		this.outer_zn.__clamp(this.J);
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.posx += this.vec3.get_x() * t;
			b.posy += this.vec3.get_y() * t;
			b.delta_rot(this.vec3.get_z() * b.iinertia);
		}
		return false;
	}
	,applyImpulseVel: function() {
		this.outer_zn.__velocity(this.J);
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.bias[i] - this.J[i];
		}
		this.transform(this.L,this.J);
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jOld[i] = this.jAcc[i];
			this.jAcc[i] += this.J[i] = this.J[i] * this.soft - this.jAcc[i] * this.gamma;
		}
		this.outer_zn.__clamp(this.jAcc);
		if((this.breakUnderForce || !this.stiff) && this.lsq(this.jAcc) > this.jMax * this.jMax) {
			if(this.breakUnderForce) return true; else if(!this.stiff) this._clamp(this.jAcc,this.jMax);
		}
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i] - this.jOld[i];
		}
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.J,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
		return false;
	}
	,warmStart: function() {
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var bs = _g1[_g];
			++_g;
			var b = bs.body;
			this.outer_zn.__impulse(this.jAcc,b.outer,this.vec3);
			var t = b.imass;
			b.velx += this.vec3.get_x() * t;
			b.vely += this.vec3.get_y() * t;
			b.angvel += this.vec3.get_z() * b.iinertia;
		}
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.outer_zn.__prepare();
		this.outer_zn.__eff_mass(this.Keff);
		this.L = this.solve(this.Keff);
		if(!this.stiff && !this.velonly) {
			var biasCoef;
			this.soft = (function($this) {
				var $r;
				var omega = 2 * Math.PI * $this.frequency;
				$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
				var ig = 1 / (1 + $this.gamma);
				biasCoef = dt * omega * omega * $this.gamma;
				$this.gamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.outer_zn.__position(this.bias);
			if(this.breakUnderError && this.lsq(this.bias) > this.maxError * this.maxError) return true;
			var _g1 = 0, _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] *= -biasCoef;
			}
			this._clamp(this.bias,this.maxError);
		} else {
			var _g1 = 0, _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				this.bias[i] = 0.0;
			}
			this.gamma = 0.0;
			this.soft = 1.0;
		}
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] *= dtratio;
		}
		this.jMax = this.maxForce * dt;
		return false;
	}
	,transform: function(L,x) {
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			var sum = x[i];
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var _g2 = 0;
				while(_g2 < i) {
					var k = _g2++;
					sum -= L[i * this.dim + k] * this.y[k];
				}
				this.y[i] = sum / lii;
			} else this.y[i] = 0.0;
		}
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var ix = _g1++;
			var i = this.dim - 1 - ix;
			var lii = L[i * this.dim + i];
			if(lii != 0) {
				var sum = this.y[i];
				var _g3 = i + 1, _g2 = this.dim;
				while(_g3 < _g2) {
					var k = _g3++;
					sum -= L[k * this.dim + i] * x[k];
				}
				x[i] = sum / lii;
			} else x[i] = 0.0;
		}
	}
	,solve: function(m) {
		var ind = 0;
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var j = _g1++;
			var sum = 0.0;
			var _g3 = 0, _g2 = j - 1;
			while(_g3 < _g2) {
				var k = _g3++;
				sum += this.L[j * this.dim + k] * this.L[j * this.dim + k];
			}
			var rec = Math.sqrt(m[ind++] - sum);
			this.L[j * this.dim + j] = rec;
			if(rec != 0) {
				rec = 1.0 / rec;
				var _g3 = j + 1, _g2 = this.dim;
				while(_g3 < _g2) {
					var i = _g3++;
					var sum1 = 0.0;
					var _g5 = 0, _g4 = j - 1;
					while(_g5 < _g4) {
						var k = _g5++;
						sum1 += this.L[i * this.dim + k] * this.L[j * this.dim + k];
					}
					this.L[i * this.dim + j] = rec * (m[ind++] - sum1);
				}
			} else {
				var _g3 = j + 1, _g2 = this.dim;
				while(_g3 < _g2) {
					var i = _g3++;
					this.L[i * this.dim + j] = 0.0;
				}
				ind += this.dim - j - 1;
			}
		}
		return this.L;
	}
	,_clamp: function(v,max) {
		var x = this.lsq(v);
		if(x > max * max) {
			var scale = max / Math.sqrt(x);
			var _g1 = 0, _g = this.dim;
			while(_g1 < _g) {
				var i = _g1++;
				v[i] *= scale;
			}
		}
	}
	,lsq: function(v) {
		var sum = 0.0;
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			sum += v[i] * v[i];
		}
		return sum;
	}
	,clearcache: function() {
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.jAcc[i] = 0.0;
		}
		this.pre_dt = -1.0;
	}
	,broken: function() {
		this.outer_zn.__broken();
	}
	,pair_exists: function(id,di) {
		var ret = false;
		var bl = this.bodies.length | 0;
		var _g = 0;
		while(_g < bl) {
			var bi = _g++;
			var b = this.bodies[bi].body;
			var _g1 = bi + 1;
			while(_g1 < bl) {
				var ci = _g1++;
				var c = this.bodies[ci].body;
				if(b.id == id && c.id == di || b.id == di && c.id == id) {
					ret = true;
					break;
				}
			}
			if(ret) break;
		}
		return ret;
	}
	,forest: function() {
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
				var xr = b.body.component == b.body.component.parent?b.body.component:(function($this) {
					var $r;
					var obj = b.body.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				var yr = this.component == this.component.parent?this.component:(function($this) {
					var $r;
					var obj = $this.component;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
			}
		}
	}
	,wake_connected: function() {
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) b.body.wake();
		}
	}
	,validate: function() {
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body.space != this.space) throw "Error: Constraints must have each body within the same sapce to which the constraint has been assigned";
		}
		this.outer_zn.__validate();
	}
	,copy: function(dict,todo) {
		var ret = this.outer_zn.__copy();
		this.copyto(ret);
		throw "not done yet";
		return ret;
	}
	,inactiveBodies: function() {
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.body != null) b.body.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		var _g1 = 0, _g = this.dim;
		while(_g1 < _g) {
			var i = _g1++;
			this.J[i] = this.jAcc[i];
		}
		var ret = nape.geom.Vec3.get(0,0,0);
		if(this.stepped) this.outer_zn.__impulse(this.J,b.outer,ret);
		return ret;
	}
	,remBody: function(b) {
		var match = null;
		var bl = this.bodies.length | 0;
		var i = 0;
		while(i < bl) {
			var x = this.bodies[i];
			if(x.body == b) {
				x.cnt--;
				if(x.cnt == 0) {
					if(bl > 0) this.bodies[i] = this.bodies[bl - 1];
					this.bodies.pop();
					if(this.active && this.space != null) {
						if(b != null) b.constraints.remove(this);
					}
				}
				match = x;
				break;
			}
			i++;
		}
		return match != null;
	}
	,addBody: function(b) {
		var match = null;
		var _g = 0, _g1 = this.bodies;
		while(_g < _g1.length) {
			var x = _g1[_g];
			++_g;
			if(x.body == b) {
				match = x;
				break;
			}
		}
		if(match == null) {
			this.bodies.push(new zpp_nape.constraint.ZPP_UserBody(1,b));
			if(this.active && this.space != null) {
				if(b != null) b.constraints.add(this);
			}
		} else match.cnt++;
	}
	,bindVec2_invalidate: function(_) {
		this.outer_zn.__invalidate();
	}
	,__class__: zpp_nape.constraint.ZPP_UserConstraint
});
zpp_nape.constraint.ZPP_UserBody = function(cnt,body) {
	this.body = null;
	this.cnt = 0;
	this.cnt = cnt;
	this.body = body;
};
zpp_nape.constraint.ZPP_UserBody.__name__ = ["zpp_nape","constraint","ZPP_UserBody"];
zpp_nape.constraint.ZPP_UserBody.prototype = {
	__class__: zpp_nape.constraint.ZPP_UserBody
}
zpp_nape.constraint.ZPP_WeldJoint = function() {
	this.stepped = false;
	this.biasz = 0.0;
	this.biasy = 0.0;
	this.biasx = 0.0;
	this.gamma = 0.0;
	this.jMax = 0.0;
	this.jAccz = 0.0;
	this.jAccy = 0.0;
	this.jAccx = 0.0;
	this.kMassf = 0.0;
	this.kMasse = 0.0;
	this.kMassc = 0.0;
	this.kMassd = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.phase = 0.0;
	this.wrap_a2 = null;
	this.a2rely = 0.0;
	this.a2relx = 0.0;
	this.a2localy = 0.0;
	this.a2localx = 0.0;
	this.b2 = null;
	this.wrap_a1 = null;
	this.a1rely = 0.0;
	this.a1relx = 0.0;
	this.a1localy = 0.0;
	this.a1localx = 0.0;
	this.b1 = null;
	this.outer_zn = null;
	zpp_nape.constraint.ZPP_Constraint.call(this);
	this.phase = 0;
	this.jAccx = 0;
	this.jAccy = 0;
	this.jAccz = 0;
	this.jMax = Math.POSITIVE_INFINITY;
	this.stepped = false;
	this.a1localx = 0;
	this.a1localy = 0;
	this.a1relx = 0;
	this.a1rely = 0;
	this.a2localx = 0;
	this.a2localy = 0;
	this.a2relx = 0;
	this.a2rely = 0;
};
zpp_nape.constraint.ZPP_WeldJoint.__name__ = ["zpp_nape","constraint","ZPP_WeldJoint"];
zpp_nape.constraint.ZPP_WeldJoint.__super__ = zpp_nape.constraint.ZPP_Constraint;
zpp_nape.constraint.ZPP_WeldJoint.prototype = $extend(zpp_nape.constraint.ZPP_Constraint.prototype,{
	draw: function(g) {
	}
	,applyImpulsePos: function() {
		var r1x = 0.0;
		var r1y = 0.0;
		r1x = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		r1y = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		var r2x = 0.0;
		var r2y = 0.0;
		r2x = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		r2y = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
		Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
		Ez = this.b2.rot - this.b1.rot - this.phase;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		if(this.breakUnderError && Ex * Ex + Ey * Ey + Ez * Ez > this.maxError * this.maxError) return true;
		var cont = true;
		if(Ex * Ex + Ey * Ey < nape.Config.constraintLinearSlop * nape.Config.constraintLinearSlop) {
			cont = false;
			Ex = 0;
			Ey = 0;
		}
		if(Ez * Ez < zpp_nape.util.ZPP_Math.sqr(nape.Config.constraintAngularSlop)) {
			if(!cont) return false; else Ez = 0;
		}
		var t = 0.5;
		var t1 = t;
		Ex *= t1;
		Ey *= t1;
		Ez *= t;
		if(Ex * Ex + Ey * Ey > 6) {
			var k = this.b1.smass + this.b2.smass;
			if(k > nape.Config.epsilon) {
				k = 0.75 / k;
				Jx = -Ex * k;
				Jy = -Ey * k;
				var t = 20;
				var ls = Jx * Jx + Jy * Jy;
				if(ls > t * t) {
					var t1 = t * (1.0 / Math.sqrt(ls));
					Jx *= t1;
					Jy *= t1;
				}
				var t = this.b1.imass;
				this.b1.posx -= Jx * t;
				this.b1.posy -= Jy * t;
				var t = this.b2.imass;
				this.b2.posx += Jx * t;
				this.b2.posy += Jy * t;
				Ex = this.b2.posx + r2x - (this.b1.posx + r1x);
				Ey = this.b2.posy + r2y - (this.b1.posy + r1y);
				Ez = this.b2.rot - this.b1.rot - this.phase;
				var t = 0.5;
				var t1 = t;
				Ex *= t1;
				Ey *= t1;
				Ez *= t;
			}
		}
		var Ka = 0.0;
		var Kb = 0.0;
		var Kd = 0.0;
		var Kc = 0.0;
		var Ke = 0.0;
		var Kf = 0.0;
		var m = this.b1.smass + this.b2.smass;
		Ka = m;
		Kb = 0;
		Kd = m;
		Kc = 0;
		Ke = 0;
		Kf = 0;
		if(this.b1.sinertia != 0) {
			var X = r1x * this.b1.sinertia;
			var Y = r1y * this.b1.sinertia;
			Ka += Y * r1y;
			Kb += -Y * r1x;
			Kd += X * r1x;
			Kc += -Y;
			Ke += X;
			Kf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X = r2x * this.b2.sinertia;
			var Y = r2y * this.b2.sinertia;
			Ka += Y * r2y;
			Kb += -Y * r2x;
			Kd += X * r2x;
			Kc += -Y;
			Ke += X;
			Kf += this.b2.sinertia;
		}
		Jx = -Ex;
		Jy = -Ey;
		Jz = -Ez;
		var t = 6;
		var ls = Jx * Jx + Jy * Jy;
		if(ls > t * t) {
			var t1 = t * (1.0 / Math.sqrt(ls));
			Jx *= t1;
			Jy *= t1;
		}
		zpp_nape.util.ZPP_Math.clamp(Jz,-0.25,0.25);
		var det = Ka * (Kd * Kf - Ke * Ke) + Kb * (Kc * Ke - Kb * Kf) + Kc * (Kb * Ke - Kc * Kd);
		if(det != det) Jx = Jy = Jz = 0; else if(det == 0) {
			if(Ka != 0) Jx /= Ka; else Jx = 0;
			if(Kd != 0) Jy /= Kd; else Jy = 0;
			if(Kf != 0) Jz /= Kf; else Jz = 0;
		} else {
			det = 1 / det;
			var B = Ke * Kc - Kb * Kf;
			var C = Kb * Ke - Kc * Kd;
			var E = Kb * Kc - Ka * Ke;
			var X = det * (Jx * (Kd * Kf - Ke * Ke) + Jy * B + Jz * C);
			var Y = det * (Jx * B + Jy * (Ka * Kf - Kc * Kc) + Jz * E);
			Jz = det * (Jx * C + Jy * E + Jz * (Ka * Kd - Kb * Kb));
			Jx = X;
			Jy = Y;
		}
		var t = this.b1.imass;
		this.b1.posx -= Jx * t;
		this.b1.posy -= Jy * t;
		var t = this.b2.imass;
		this.b2.posx += Jx * t;
		this.b2.posy += Jy * t;
		this.b1.delta_rot(-(Jy * r1x - Jx * r1y + Jz) * this.b1.iinertia);
		this.b2.delta_rot((Jy * r2x - Jx * r2y + Jz) * this.b2.iinertia);
		return false;
	}
	,applyImpulseVel: function() {
		var Ex = 0.0;
		var Ey = 0.0;
		var Ez = 0.0;
		Ex = this.b2.velx + this.b2.kinvelx - this.a2rely * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.a1rely * (this.b1.angvel + this.b1.kinangvel));
		Ey = this.b2.vely + this.b2.kinvely + this.a2relx * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.a1relx * (this.b1.angvel + this.b1.kinangvel));
		Ez = this.b2.angvel + this.b2.kinangvel - this.b1.angvel - this.b1.kinangvel;
		var Jx = 0.0;
		var Jy = 0.0;
		var Jz = 0.0;
		Jx = this.biasx - Ex;
		Jy = this.biasy - Ey;
		Jz = this.biasz - Ez;
		var X = this.kMassa * Jx + this.kMassb * Jy + this.kMassc * Jz;
		var Y = this.kMassb * Jx + this.kMassd * Jy + this.kMasse * Jz;
		Jz = this.kMassc * Jx + this.kMasse * Jy + this.kMassf * Jz;
		Jx = X;
		Jy = Y;
		var t = this.gamma;
		var t1 = t;
		Jx -= this.jAccx * t1;
		Jy -= this.jAccy * t1;
		Jz -= this.jAccz * t;
		var jOldx = 0.0;
		var jOldy = 0.0;
		var jOldz = 0.0;
		jOldx = this.jAccx;
		jOldy = this.jAccy;
		jOldz = this.jAccz;
		var t = 1;
		var t1 = t;
		this.jAccx += Jx * t1;
		this.jAccy += Jy * t1;
		this.jAccz += Jz * t;
		if(this.breakUnderForce) {
			if(this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz > this.jMax * this.jMax) return true;
		} else if(!this.stiff) {
			var t = this.jMax;
			var ls = this.jAccx * this.jAccx + this.jAccy * this.jAccy + this.jAccz * this.jAccz;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				var t2 = t1;
				this.jAccx *= t2;
				this.jAccy *= t2;
				this.jAccz *= t1;
			}
		}
		Jx = this.jAccx - jOldx;
		Jy = this.jAccy - jOldy;
		Jz = this.jAccz - jOldz;
		var t = this.b1.imass;
		this.b1.velx -= Jx * t;
		this.b1.vely -= Jy * t;
		var t = this.b2.imass;
		this.b2.velx += Jx * t;
		this.b2.vely += Jy * t;
		this.b1.angvel -= (Jy * this.a1relx - Jx * this.a1rely + Jz) * this.b1.iinertia;
		this.b2.angvel += (Jy * this.a2relx - Jx * this.a2rely + Jz) * this.b2.iinertia;
		return false;
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.jAccx * t;
		this.b1.vely -= this.jAccy * t;
		var t = this.b2.imass;
		this.b2.velx += this.jAccx * t;
		this.b2.vely += this.jAccy * t;
		this.b1.angvel -= (this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz) * this.b1.iinertia;
		this.b2.angvel += (this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz) * this.b2.iinertia;
	}
	,preStep: function(dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.stepped = true;
		this.a1relx = this.b1.axisy * this.a1localx - this.b1.axisx * this.a1localy;
		this.a1rely = this.a1localx * this.b1.axisx + this.a1localy * this.b1.axisy;
		this.a2relx = this.b2.axisy * this.a2localx - this.b2.axisx * this.a2localy;
		this.a2rely = this.a2localx * this.b2.axisx + this.a2localy * this.b2.axisy;
		var m = this.b1.smass + this.b2.smass;
		this.kMassa = m;
		this.kMassb = 0;
		this.kMassd = m;
		this.kMassc = 0;
		this.kMasse = 0;
		this.kMassf = 0;
		if(this.b1.sinertia != 0) {
			var X = this.a1relx * this.b1.sinertia;
			var Y = this.a1rely * this.b1.sinertia;
			this.kMassa += Y * this.a1rely;
			this.kMassb += -Y * this.a1relx;
			this.kMassd += X * this.a1relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b1.sinertia;
		}
		if(this.b2.sinertia != 0) {
			var X = this.a2relx * this.b2.sinertia;
			var Y = this.a2rely * this.b2.sinertia;
			this.kMassa += Y * this.a2rely;
			this.kMassb += -Y * this.a2relx;
			this.kMassd += X * this.a2relx;
			this.kMassc += -Y;
			this.kMasse += X;
			this.kMassf += this.b2.sinertia;
		}
		var flag = (function($this) {
			var $r;
			var det = $this.kMassa * ($this.kMassd * $this.kMassf - $this.kMasse * $this.kMasse) + $this.kMassb * ($this.kMassc * $this.kMasse - $this.kMassb * $this.kMassf) + $this.kMassc * ($this.kMassb * $this.kMasse - $this.kMassc * $this.kMassd);
			$r = det != det?(function($this) {
				var $r;
				{
					$this.kMassa = 0;
					$this.kMassb = 0;
					$this.kMassd = 0;
					$this.kMassc = 0;
					$this.kMasse = 0;
					$this.kMassf = 0;
				}
				$r = 7;
				return $r;
			}($this)):det == 0?(function($this) {
				var $r;
				var flag1 = 0;
				if($this.kMassa != 0) $this.kMassa = 1 / $this.kMassa; else {
					$this.kMassa = 0;
					flag1 |= 1;
				}
				if($this.kMassd != 0) $this.kMassd = 1 / $this.kMassd; else {
					$this.kMassd = 0;
					flag1 |= 2;
				}
				if($this.kMassf != 0) $this.kMassf = 1 / $this.kMassf; else {
					$this.kMassf = 0;
					flag1 |= 4;
				}
				$this.kMassb = $this.kMassc = $this.kMasse = 0.0;
				$r = flag1;
				return $r;
			}($this)):(function($this) {
				var $r;
				det = 1 / det;
				var A = det * ($this.kMassd * $this.kMassf - $this.kMasse * $this.kMasse);
				var B = det * ($this.kMasse * $this.kMassc - $this.kMassb * $this.kMassf);
				var D = det * ($this.kMassa * $this.kMassf - $this.kMassc * $this.kMassc);
				var C = det * ($this.kMassb * $this.kMasse - $this.kMassc * $this.kMassd);
				var E = det * ($this.kMassb * $this.kMassc - $this.kMassa * $this.kMasse);
				var F = det * ($this.kMassa * $this.kMassd - $this.kMassb * $this.kMassb);
				{
					$this.kMassa = A;
					$this.kMassb = B;
					$this.kMassd = D;
					$this.kMassc = C;
					$this.kMasse = E;
					$this.kMassf = F;
				}
				$r = 0;
				return $r;
			}($this));
			return $r;
		}(this));
		if((flag & 1) != 0) this.jAccx = 0;
		if((flag & 2) != 0) this.jAccy = 0;
		if((flag & 4) != 0) this.jAccz = 0;
		if(!this.stiff) {
			var biasCoef;
			var X = (function($this) {
				var $r;
				var omega = 2 * Math.PI * $this.frequency;
				$this.gamma = 1 / (dt * omega * (2 * $this.damping + omega * dt));
				var ig = 1 / (1 + $this.gamma);
				biasCoef = dt * omega * omega * $this.gamma;
				$this.gamma *= ig;
				$r = ig;
				return $r;
			}(this));
			this.kMassa *= X;
			this.kMassb *= X;
			this.kMassd *= X;
			this.kMassc *= X;
			this.kMasse *= X;
			this.kMassf *= X;
			this.biasx = this.b2.posx + this.a2relx - (this.b1.posx + this.a1relx);
			this.biasy = this.b2.posy + this.a2rely - (this.b1.posy + this.a1rely);
			this.biasz = this.b2.rot - this.b1.rot - this.phase;
			if(this.breakUnderError && this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz > this.maxError * this.maxError) return true;
			var t = -biasCoef;
			var t1 = t;
			this.biasx *= t1;
			this.biasy *= t1;
			this.biasz *= t;
			var t = this.maxError;
			var ls = this.biasx * this.biasx + this.biasy * this.biasy + this.biasz * this.biasz;
			if(ls > t * t) {
				var t1 = t * (1.0 / Math.sqrt(ls));
				var t2 = t1;
				this.biasx *= t2;
				this.biasy *= t2;
				this.biasz *= t1;
			}
		} else {
			this.biasx = 0;
			this.biasy = 0;
			this.biasz = 0;
			this.gamma = 0;
		}
		var t = dtratio;
		var t1 = t;
		this.jAccx *= t1;
		this.jAccy *= t1;
		this.jAccz *= t;
		this.jMax = this.maxForce * dt;
		return false;
	}
	,clearcache: function() {
		this.jAccx = 0;
		this.jAccy = 0;
		this.jAccz = 0;
		this.pre_dt = -1.0;
	}
	,pair_exists: function(id,di) {
		return this.b1.id == id && this.b2.id == di || this.b1.id == di && this.b2.id == id;
	}
	,forest: function() {
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b1.component == this.b1.component.parent?this.b1.component:(function($this) {
				var $r;
				var obj = $this.b1.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var xr = this.b2.component == this.b2.component.parent?this.b2.component:(function($this) {
				var $r;
				var obj = $this.b2.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = this.component == this.component.parent?this.component:(function($this) {
				var $r;
				var obj = $this.component;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
	}
	,wake_connected: function() {
		if(this.b1 != null && this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b1.wake();
		if(this.b2 != null && this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.b2.wake();
	}
	,validate: function() {
		if(this.b1 == null || this.b2 == null) throw "Error: AngleJoint cannot be simulated null bodies";
		if(this.b1 == this.b2) throw "Error: WeldJoint cannot be simulated with body1 == body2";
		if(this.b1.space != this.space || this.b2.space != this.space) throw "Error: Constraints must have each body within the same space to which the constraint has been assigned";
		if(!(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) && !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Constraints cannot have both bodies non-dynamic";
	}
	,copy: function(dict,todo) {
		var ret = new nape.constraint.PivotJoint(null,null,this.outer_zn.get_anchor1(),this.outer_zn.get_anchor2());
		this.copyto(ret);
		if(dict != null && this.b1 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b1.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b1 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b1.id,function(b1) {
				ret.zpp_inner_zn.b1 = b1.zpp_inner;
			}));
		}
		if(dict != null && this.b2 != null) {
			var b = null;
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == this.b2.id) {
					b = idc.bc;
					break;
				}
			}
			if(b != null) ret.zpp_inner_zn.b2 = b.zpp_inner; else todo.push(zpp_nape.constraint.ZPP_CopyHelper.todo(this.b2.id,function(b1) {
				ret.zpp_inner_zn.b2 = b1.zpp_inner;
			}));
		}
		return ret;
	}
	,setup_a2: function() {
		this.wrap_a2 = nape.geom.Vec2.get(this.a2localx,this.a2localy,null);
		this.wrap_a2.zpp_inner._inuse = true;
		this.wrap_a2.zpp_inner._validate = $bind(this,this.validate_a2);
		this.wrap_a2.zpp_inner._invalidate = $bind(this,this.invalidate_a2);
	}
	,invalidate_a2: function(x) {
		this.immutable_midstep("Constraint::" + "a2");
		this.a2localx = x.x;
		this.a2localy = x.y;
		this.wake();
	}
	,validate_a2: function() {
		this.wrap_a2.zpp_inner.x = this.a2localx;
		this.wrap_a2.zpp_inner.y = this.a2localy;
	}
	,setup_a1: function() {
		this.wrap_a1 = nape.geom.Vec2.get(this.a1localx,this.a1localy,null);
		this.wrap_a1.zpp_inner._inuse = true;
		this.wrap_a1.zpp_inner._validate = $bind(this,this.validate_a1);
		this.wrap_a1.zpp_inner._invalidate = $bind(this,this.invalidate_a1);
	}
	,invalidate_a1: function(x) {
		this.immutable_midstep("Constraint::" + "a1");
		this.a1localx = x.x;
		this.a1localy = x.y;
		this.wake();
	}
	,validate_a1: function() {
		this.wrap_a1.zpp_inner.x = this.a1localx;
		this.wrap_a1.zpp_inner.y = this.a1localy;
	}
	,inactiveBodies: function() {
		if(this.b1 != null) this.b1.constraints.remove(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.remove(this);
		}
	}
	,activeBodies: function() {
		if(this.b1 != null) this.b1.constraints.add(this);
		if(this.b2 != this.b1) {
			if(this.b2 != null) this.b2.constraints.add(this);
		}
	}
	,bodyImpulse: function(b) {
		if(this.stepped) {
			if(b == this.b1) return nape.geom.Vec3.get(-this.jAccx,-this.jAccy,-(this.jAccy * this.a1relx - this.jAccx * this.a1rely + this.jAccz)); else return nape.geom.Vec3.get(this.jAccx,this.jAccy,this.jAccy * this.a2relx - this.jAccx * this.a2rely + this.jAccz);
		} else return nape.geom.Vec3.get(0,0,0);
	}
	,__class__: zpp_nape.constraint.ZPP_WeldJoint
});
zpp_nape.dynamics = {}
zpp_nape.dynamics.ZPP_Arbiter = function() {
	this.sensorarb = null;
	this.fluidarb = null;
	this.colarb = null;
	this.type = 0;
	this.pair = null;
	this.ws2 = null;
	this.ws1 = null;
	this.b2 = null;
	this.b1 = null;
	this.invalidated = false;
	this.immState = 0;
	this.fresh = false;
	this.continuous = false;
	this.presentable = false;
	this.intchange = false;
	this.present = 0;
	this.sleeping = false;
	this.cleared = false;
	this.active = false;
	this.endGenerated = 0;
	this.sleep_stamp = 0;
	this.up_stamp = 0;
	this.stamp = 0;
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.outer = null;
};
zpp_nape.dynamics.ZPP_Arbiter.__name__ = ["zpp_nape","dynamics","ZPP_Arbiter"];
zpp_nape.dynamics.ZPP_Arbiter.prototype = {
	sup_retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
	}
	,sup_assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,lazyRetire: function(s,b) {
		this.cleared = true;
		if(b == null || this.b2 == b) this.b1.arbiters.inlined_try_remove(this);
		if(b == null || this.b1 == b) this.b2.arbiters.inlined_try_remove(this);
		if(this.pair != null) {
			this.pair.arb = null;
			this.pair = null;
		}
		this.active = false;
		s.f_arbiters.modified = true;
	}
	,swap_features: function() {
		var t = this.b1;
		this.b1 = this.b2;
		this.b2 = t;
		var t = this.ws1;
		this.ws1 = this.ws2;
		this.ws2 = t;
		var t = this.colarb.s1;
		this.colarb.s1 = this.colarb.s2;
		this.colarb.s2 = t;
	}
	,acting: function() {
		return this.active && (this.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0;
	}
	,inactiveme: function() {
		return !this.active;
	}
	,wrapper: function() {
		if(this.outer == null) {
			zpp_nape.dynamics.ZPP_Arbiter.internal = true;
			if(this.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
				this.colarb.outer_zn = new nape.dynamics.CollisionArbiter();
				this.outer = this.colarb.outer_zn;
			} else if(this.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) {
				this.fluidarb.outer_zn = new nape.dynamics.FluidArbiter();
				this.outer = this.fluidarb.outer_zn;
			} else this.outer = new nape.dynamics.Arbiter();
			this.outer.zpp_inner = this;
			zpp_nape.dynamics.ZPP_Arbiter.internal = false;
		}
		return this.outer;
	}
	,__class__: zpp_nape.dynamics.ZPP_Arbiter
}
zpp_nape.dynamics.ZPP_SensorArbiter = function() {
	this.next = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.SENSOR;
	this.sensorarb = this;
};
zpp_nape.dynamics.ZPP_SensorArbiter.__name__ = ["zpp_nape","dynamics","ZPP_SensorArbiter"];
zpp_nape.dynamics.ZPP_SensorArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_SensorArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	makeimmutable: function() {
	}
	,makemutable: function() {
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
	}
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.dynamics.ZPP_SensorArbiter
});
zpp_nape.dynamics.ZPP_FluidArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.wrap_position = null;
	this.buoyy = 0.0;
	this.buoyx = 0.0;
	this.ny = 0.0;
	this.nx = 0.0;
	this.lgamma = 0.0;
	this.dampy = 0.0;
	this.dampx = 0.0;
	this.vMassc = 0.0;
	this.vMassb = 0.0;
	this.vMassa = 0.0;
	this.agamma = 0.0;
	this.adamp = 0.0;
	this.wMass = 0.0;
	this.nodrag = false;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
	this.overlap = 0.0;
	this.centroidy = 0.0;
	this.centroidx = 0.0;
	this.next = null;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.type = zpp_nape.dynamics.ZPP_Arbiter.FLUID;
	this.fluidarb = this;
	this.buoyx = 0;
	this.buoyy = 0;
	this.pre_dt = -1.0;
};
zpp_nape.dynamics.ZPP_FluidArbiter.__name__ = ["zpp_nape","dynamics","ZPP_FluidArbiter"];
zpp_nape.dynamics.ZPP_FluidArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_FluidArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	applyImpulseVel: function() {
		if(!this.nodrag) {
			var w1 = this.b1.angvel + this.b1.kinangvel;
			var w2 = this.b2.angvel + this.b2.kinangvel;
			var jx = this.b1.velx + this.b1.kinvelx - this.r1y * w1 - (this.b2.velx + this.b2.kinvelx - this.r2y * w2);
			var jy = this.b1.vely + this.b1.kinvely + this.r1x * w1 - (this.b2.vely + this.b2.kinvely + this.r2x * w2);
			var t = this.vMassa * jx + this.vMassb * jy;
			jy = this.vMassb * jx + this.vMassc * jy;
			jx = t;
			var t = this.lgamma;
			jx -= this.dampx * t;
			jy -= this.dampy * t;
			var t = 1.0;
			this.dampx += jx * t;
			this.dampy += jy * t;
			var t = this.b1.imass;
			this.b1.velx -= jx * t;
			this.b1.vely -= jy * t;
			var t = this.b2.imass;
			this.b2.velx += jx * t;
			this.b2.vely += jy * t;
			this.b1.angvel -= this.b1.iinertia * (jy * this.r1x - jx * this.r1y);
			this.b2.angvel += this.b2.iinertia * (jy * this.r2x - jx * this.r2y);
			var j_damp = (w1 - w2) * this.wMass - this.adamp * this.agamma;
			this.adamp += j_damp;
			this.b1.angvel -= j_damp * this.b1.iinertia;
			this.b2.angvel += j_damp * this.b2.iinertia;
		}
	}
	,warmStart: function() {
		var t = this.b1.imass;
		this.b1.velx -= this.dampx * t;
		this.b1.vely -= this.dampy * t;
		var t = this.b2.imass;
		this.b2.velx += this.dampx * t;
		this.b2.vely += this.dampy * t;
		this.b1.angvel -= this.b1.iinertia * (this.dampy * this.r1x - this.dampx * this.r1y);
		this.b2.angvel += this.b2.iinertia * (this.dampy * this.r2x - this.dampx * this.r2y);
		this.b1.angvel -= this.adamp * this.b1.iinertia;
		this.b2.angvel += this.adamp * this.b2.iinertia;
	}
	,preStep: function(s,dt) {
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		this.r1x = this.centroidx - this.b1.posx;
		this.r1y = this.centroidy - this.b1.posy;
		this.r2x = this.centroidx - this.b2.posx;
		this.r2y = this.centroidy - this.b2.posy;
		var g1x = 0.0;
		var g1y = 0.0;
		if(this.ws1.fluidEnabled && this.ws1.fluidProperties.wrap_gravity != null) {
			g1x = this.ws1.fluidProperties.gravityx;
			g1y = this.ws1.fluidProperties.gravityy;
		} else {
			g1x = s.gravityx;
			g1y = s.gravityy;
		}
		var g2x = 0.0;
		var g2y = 0.0;
		if(this.ws2.fluidEnabled && this.ws2.fluidProperties.wrap_gravity != null) {
			g2x = this.ws2.fluidProperties.gravityx;
			g2y = this.ws2.fluidProperties.gravityy;
		} else {
			g2x = s.gravityx;
			g2y = s.gravityy;
		}
		var buoyx = 0;
		var buoyy = 0;
		if(this.ws1.fluidEnabled && this.ws2.fluidEnabled) {
			var mass1 = this.overlap * this.ws1.fluidProperties.density;
			var mass2 = this.overlap * this.ws2.fluidProperties.density;
			if(mass1 > mass2) {
				var t = mass1 + mass2;
				buoyx -= g1x * t;
				buoyy -= g1y * t;
			} else if(mass1 < mass2) {
				var t = mass1 + mass2;
				buoyx += g2x * t;
				buoyy += g2y * t;
			} else {
				var gx = 0.0;
				var gy = 0.0;
				gx = g1x + g2x;
				gy = g1y + g2y;
				var t = 0.5;
				gx *= t;
				gy *= t;
				if(this.ws1.worldCOMx * gx + this.ws1.worldCOMy * gy > this.ws2.worldCOMx * gx + this.ws2.worldCOMy * gy) {
					var t = mass1 + mass2;
					buoyx -= gx * t;
					buoyy -= gy * t;
				} else {
					var t = mass1 + mass2;
					buoyx += gx * t;
					buoyy += gy * t;
				}
			}
		} else if(this.ws1.fluidEnabled) {
			var mass = this.overlap * this.ws1.fluidProperties.density;
			var t = mass;
			buoyx -= g1x * t;
			buoyy -= g1y * t;
		} else if(this.ws2.fluidEnabled) {
			var mass = this.overlap * this.ws2.fluidProperties.density;
			var t = mass;
			buoyx += g2x * t;
			buoyy += g2y * t;
		}
		var t = dt;
		buoyx *= t;
		buoyy *= t;
		this.buoyx = buoyx;
		this.buoyy = buoyy;
		if(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var t = this.b1.imass;
			this.b1.velx -= buoyx * t;
			this.b1.vely -= buoyy * t;
			this.b1.angvel -= (buoyy * this.r1x - buoyx * this.r1y) * this.b1.iinertia;
		}
		if(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var t = this.b2.imass;
			this.b2.velx += buoyx * t;
			this.b2.vely += buoyy * t;
			this.b2.angvel += (buoyy * this.r2x - buoyx * this.r2y) * this.b2.iinertia;
		}
		if((!this.ws1.fluidEnabled || this.ws1.fluidProperties.viscosity == 0) && (!this.ws2.fluidEnabled || this.ws2.fluidProperties.viscosity == 0)) {
			this.nodrag = true;
			this.dampx = 0;
			this.dampy = 0;
			this.adamp = 0;
		} else {
			this.nodrag = false;
			var tViscosity = 0.0;
			if(this.ws1.fluidEnabled) {
				this.ws2.validate_angDrag();
				tViscosity += this.ws1.fluidProperties.viscosity * this.ws2.angDrag * this.overlap / this.ws2.area;
			}
			if(this.ws2.fluidEnabled) {
				this.ws1.validate_angDrag();
				tViscosity += this.ws2.fluidProperties.viscosity * this.ws1.angDrag * this.overlap / this.ws1.area;
			}
			if(tViscosity != 0) {
				var iSum = this.b1.sinertia + this.b2.sinertia;
				if(iSum != 0) this.wMass = 1 / iSum; else this.wMass = 0.0;
				var biasCoef;
				tViscosity *= 0.0004;
				this.wMass *= (function($this) {
					var $r;
					var omega = 2 * Math.PI * tViscosity;
					$this.agamma = 1 / (dt * omega * (2 + omega * dt));
					var ig = 1 / (1 + $this.agamma);
					biasCoef = dt * omega * omega * $this.agamma;
					$this.agamma *= ig;
					$r = ig;
					return $r;
				}(this));
			} else {
				this.wMass = 0.0;
				this.agamma = 0.0;
			}
			var vrnx = this.b2.velx + this.b2.kinvelx - this.r2y * (this.b2.angvel + this.b2.kinangvel) - (this.b1.velx + this.b1.kinvelx - this.r1y * (this.b2.angvel + this.b2.kinangvel));
			var vrny = this.b2.vely + this.b2.kinvely + this.r2x * (this.b2.angvel + this.b2.kinangvel) - (this.b1.vely + this.b1.kinvely + this.r1x * (this.b1.angvel + this.b1.kinangvel));
			if(vrnx * vrnx + vrny * vrny < nape.Config.epsilon * nape.Config.epsilon) {
			} else {
				var d = vrnx * vrnx + vrny * vrny;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				vrnx *= t;
				vrny *= t;
				this.nx = vrnx;
				this.ny = vrny;
			}
			var tViscosity1 = 0.0;
			if(this.ws1.fluidEnabled) {
				var f = -this.ws1.fluidProperties.viscosity * this.overlap / this.ws2.area;
				if(this.ws2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws2.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws2.circle.radius * Math.PI); else {
					var poly = this.ws2.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.head;
					while(cx_ite != null) {
						var ex = cx_ite.elt;
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) fact = fact *= -nape.Config.fluidVacuumDrag;
						acc -= fact * 0.5 * nape.Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(this.ws2.fluidEnabled) {
				var f = -this.ws2.fluidProperties.viscosity * this.overlap / this.ws1.area;
				if(this.ws1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) tViscosity1 -= f * this.ws1.circle.radius * nape.Config.fluidLinearDrag / (2 * this.ws1.circle.radius * Math.PI); else {
					var poly = this.ws1.polygon;
					var bord = 0.0;
					var acc = 0.0;
					var cx_ite = poly.edges.head;
					while(cx_ite != null) {
						var ex = cx_ite.elt;
						bord += ex.length;
						var fact = f * ex.length * (ex.gnormx * this.nx + ex.gnormy * this.ny);
						if(fact > 0) fact = fact *= -nape.Config.fluidVacuumDrag;
						acc -= fact * 0.5 * nape.Config.fluidLinearDrag;
						cx_ite = cx_ite.next;
					}
					tViscosity1 += acc / bord;
				}
			}
			if(tViscosity1 != 0) {
				var m = this.b1.smass + this.b2.smass;
				var Ka = 0.0;
				var Kb = 0.0;
				var Kc = 0.0;
				Ka = m;
				Kb = 0;
				Kc = m;
				if(this.b1.sinertia != 0) {
					var X = this.r1x * this.b1.sinertia;
					var Y = this.r1y * this.b1.sinertia;
					Ka += Y * this.r1y;
					Kb += -Y * this.r1x;
					Kc += X * this.r1x;
				}
				if(this.b2.sinertia != 0) {
					var X = this.r2x * this.b2.sinertia;
					var Y = this.r2y * this.b2.sinertia;
					Ka += Y * this.r2y;
					Kb += -Y * this.r2x;
					Kc += X * this.r2x;
				}
				var det = Ka * Kc - Kb * Kb;
				if(det != det) {
					Ka = Kb = Kc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(Ka != 0) Ka = 1 / Ka; else {
						Ka = 0;
						flag |= 1;
					}
					if(Kc != 0) Kc = 1 / Kc; else {
						Kc = 0;
						flag |= 2;
					}
					Kb = 0;
					flag;
				} else {
					det = 1 / det;
					var t = Kc * det;
					Kc = Ka * det;
					Ka = t;
					Kb *= -det;
					0;
				}
				this.vMassa = Ka;
				this.vMassb = Kb;
				this.vMassc = Kc;
				var biasCoef;
				var X = (function($this) {
					var $r;
					var omega = 2 * Math.PI * tViscosity1;
					$this.lgamma = 1 / (dt * omega * (2 + omega * dt));
					var ig = 1 / (1 + $this.lgamma);
					biasCoef = dt * omega * omega * $this.lgamma;
					$this.lgamma *= ig;
					$r = ig;
					return $r;
				}(this));
				this.vMassa *= X;
				this.vMassb *= X;
				this.vMassc *= X;
			} else {
				this.vMassa = 0;
				this.vMassb = 0;
				this.vMassc = 0;
				this.lgamma = 0.0;
			}
		}
		var t = dtratio;
		this.dampx *= t;
		this.dampy *= t;
		this.adamp *= dtratio;
	}
	,inject: function(area,cx,cy) {
		this.overlap = area;
		this.centroidx = cx;
		this.centroidy = cy;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = true;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_position != null) this.wrap_position.zpp_inner._immutable = false;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		var o = this;
		o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.nx = 0;
		this.ny = 1;
		this.dampx = 0;
		this.dampy = 0;
		this.adamp = 0.0;
	}
	,getposition: function() {
		this.wrap_position = nape.geom.Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = !this.mutable;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
		this.wrap_position.zpp_inner._invalidate = $bind(this,this.position_invalidate);
	}
	,position_invalidate: function(x) {
		this.centroidx = x.x;
		this.centroidy = x.y;
	}
	,position_validate: function() {
		if(!this.active) throw "Error: Arbiter not currently in use";
		this.wrap_position.zpp_inner.x = this.centroidx;
		this.wrap_position.zpp_inner.y = this.centroidy;
	}
	,free: function() {
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.dynamics.ZPP_FluidArbiter
});
zpp_nape.dynamics.ZPP_ColArbiter = function() {
	this.pre_dt = 0.0;
	this.mutable = false;
	this.stat = false;
	this.next = null;
	this.hpc2 = false;
	this.hc2 = false;
	this.oc2 = null;
	this.c2 = null;
	this.oc1 = null;
	this.c1 = null;
	this.__ref_vertex = 0;
	this.__ref_edge2 = null;
	this.__ref_edge1 = null;
	this.biasCoef = 0.0;
	this.rev = false;
	this.radius = 0.0;
	this.lproj = 0.0;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.surfacey = 0.0;
	this.surfacex = 0.0;
	this.k2y = 0.0;
	this.k2x = 0.0;
	this.k1y = 0.0;
	this.k1x = 0.0;
	this.rt2b = 0.0;
	this.rn2b = 0.0;
	this.rt2a = 0.0;
	this.rn2a = 0.0;
	this.rt1b = 0.0;
	this.rn1b = 0.0;
	this.rt1a = 0.0;
	this.rn1a = 0.0;
	this.jrAcc = 0.0;
	this.rMass = 0.0;
	this.Kc = 0.0;
	this.Kb = 0.0;
	this.Ka = 0.0;
	this.kMassc = 0.0;
	this.kMassb = 0.0;
	this.kMassa = 0.0;
	this.wrap_normal = null;
	this.ny = 0.0;
	this.nx = 0.0;
	this.innards = null;
	this.wrap_contacts = null;
	this.contacts = null;
	this.s2 = null;
	this.s1 = null;
	this.userdef_rfric = false;
	this.userdef_restitution = false;
	this.userdef_stat_fric = false;
	this.userdef_dyn_fric = false;
	this.rfric = 0.0;
	this.restitution = 0.0;
	this.stat_fric = 0.0;
	this.dyn_fric = 0.0;
	this.outer_zn = null;
	zpp_nape.dynamics.ZPP_Arbiter.call(this);
	this.pre_dt = -1.0;
	this.contacts = new zpp_nape.dynamics.ZPP_Contact();
	this.innards = new zpp_nape.dynamics.ZPP_IContact();
	this.type = zpp_nape.dynamics.ZPP_Arbiter.COL;
	this.colarb = this;
};
zpp_nape.dynamics.ZPP_ColArbiter.__name__ = ["zpp_nape","dynamics","ZPP_ColArbiter"];
zpp_nape.dynamics.ZPP_ColArbiter.__super__ = zpp_nape.dynamics.ZPP_Arbiter;
zpp_nape.dynamics.ZPP_ColArbiter.prototype = $extend(zpp_nape.dynamics.ZPP_Arbiter.prototype,{
	applyImpulsePos: function() {
		if(this.ptype == 2) {
			var c = this.c1;
			var dx = 0.0;
			var dy = 0.0;
			var r2x = 0.0;
			var r2y = 0.0;
			r2x = this.b2.axisy * c.lr2x - this.b2.axisx * c.lr2y;
			r2y = c.lr2x * this.b2.axisx + c.lr2y * this.b2.axisy;
			var t = 1.0;
			r2x += this.b2.posx * t;
			r2y += this.b2.posy * t;
			var r1x = 0.0;
			var r1y = 0.0;
			r1x = this.b1.axisy * c.lr1x - this.b1.axisx * c.lr1y;
			r1y = c.lr1x * this.b1.axisx + c.lr1y * this.b1.axisy;
			var t = 1.0;
			r1x += this.b1.posx * t;
			r1y += this.b1.posy * t;
			var dx1 = 0.0;
			var dy1 = 0.0;
			dx1 = r2x - r1x;
			dy1 = r2y - r1y;
			var dl = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			var r = this.radius - nape.Config.collisionSlop;
			var err = dl - r;
			if(dx1 * this.nx + dy1 * this.ny < 0) {
				dx1 = -dx1;
				dy1 = -dy1;
				err -= this.radius;
			}
			if(err < 0) {
				if(dl < nape.Config.epsilon) {
					if(this.b1.smass != 0.0) this.b1.posx += nape.Config.epsilon * 10; else this.b2.posx += nape.Config.epsilon * 10;
				} else {
					var t = 1.0 / dl;
					dx1 *= t;
					dy1 *= t;
					var px = 0.5 * (r1x + r2x);
					var py = 0.5 * (r1y + r2y);
					var pen = dl - r;
					r1x = px - this.b1.posx;
					r1y = py - this.b1.posy;
					r2x = px - this.b2.posx;
					r2y = py - this.b2.posy;
					var rn1 = dy1 * r1x - dx1 * r1y;
					var rn2 = dy1 * r2x - dx1 * r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * pen / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t = jn;
						Jx = dx1 * t;
						Jy = dy1 * t;
						var t = this.b1.imass;
						this.b1.posx -= Jx * t;
						this.b1.posy -= Jy * t;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t = this.b2.imass;
						this.b2.posx += Jx * t;
						this.b2.posy += Jy * t;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		} else {
			var gnormx = 0.0;
			var gnormy = 0.0;
			var gproj;
			var clip1x = 0.0;
			var clip1y = 0.0;
			var clip2x = 0;
			var clip2y = 0;
			if(this.ptype == 0) {
				gnormx = this.b1.axisy * this.lnormx - this.b1.axisx * this.lnormy;
				gnormy = this.lnormx * this.b1.axisx + this.lnormy * this.b1.axisy;
				gproj = this.lproj + (gnormx * this.b1.posx + gnormy * this.b1.posy);
				clip1x = this.b2.axisy * this.c1.lr1x - this.b2.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b2.axisx + this.c1.lr1y * this.b2.axisy;
				var t = 1.0;
				clip1x += this.b2.posx * t;
				clip1y += this.b2.posy * t;
				if(this.hpc2) {
					clip2x = this.b2.axisy * this.c2.lr1x - this.b2.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b2.axisx + this.c2.lr1y * this.b2.axisy;
					var t = 1.0;
					clip2x += this.b2.posx * t;
					clip2y += this.b2.posy * t;
				}
			} else {
				gnormx = this.b2.axisy * this.lnormx - this.b2.axisx * this.lnormy;
				gnormy = this.lnormx * this.b2.axisx + this.lnormy * this.b2.axisy;
				gproj = this.lproj + (gnormx * this.b2.posx + gnormy * this.b2.posy);
				clip1x = this.b1.axisy * this.c1.lr1x - this.b1.axisx * this.c1.lr1y;
				clip1y = this.c1.lr1x * this.b1.axisx + this.c1.lr1y * this.b1.axisy;
				var t = 1.0;
				clip1x += this.b1.posx * t;
				clip1y += this.b1.posy * t;
				if(this.hpc2) {
					clip2x = this.b1.axisy * this.c2.lr1x - this.b1.axisx * this.c2.lr1y;
					clip2y = this.c2.lr1x * this.b1.axisx + this.c2.lr1y * this.b1.axisy;
					var t = 1.0;
					clip2x += this.b1.posx * t;
					clip2y += this.b1.posy * t;
				}
			}
			var err1 = clip1x * gnormx + clip1y * gnormy - gproj - this.radius;
			err1 += nape.Config.collisionSlop;
			var err2 = 0.0;
			if(this.hpc2) {
				err2 = clip2x * gnormx + clip2y * gnormy - gproj - this.radius;
				err2 += nape.Config.collisionSlop;
			}
			if(err1 < 0 || err2 < 0) {
				if(this.rev) {
					gnormx = -gnormx;
					gnormy = -gnormy;
				}
				var c1r1x = 0.0;
				var c1r1y = 0.0;
				c1r1x = clip1x - this.b1.posx;
				c1r1y = clip1y - this.b1.posy;
				var c1r2x = 0.0;
				var c1r2y = 0.0;
				c1r2x = clip1x - this.b2.posx;
				c1r2y = clip1y - this.b2.posy;
				var c2r1x = 0;
				var c2r1y = 0;
				var c2r2x = 0;
				var c2r2y = 0;
				if(this.hpc2) {
					c2r1x = clip2x - this.b1.posx;
					c2r1y = clip2y - this.b1.posy;
					c2r2x = clip2x - this.b2.posx;
					c2r2y = clip2y - this.b2.posy;
					var rn1a = gnormy * c1r1x - gnormx * c1r1y;
					var rn1b = gnormy * c1r2x - gnormx * c1r2y;
					var rn2a = gnormy * c2r1x - gnormx * c2r1y;
					var rn2b = gnormy * c2r2x - gnormx * c2r2y;
					var mass_sum = this.b1.smass + this.b2.smass;
					this.kMassa = mass_sum + this.b1.sinertia * rn1a * rn1a + this.b2.sinertia * rn1b * rn1b;
					this.kMassb = mass_sum + this.b1.sinertia * rn1a * rn2a + this.b2.sinertia * rn1b * rn2b;
					this.kMassc = mass_sum + this.b1.sinertia * rn2a * rn2a + this.b2.sinertia * rn2b * rn2b;
					var Ka = 0.0;
					var Kb = 0.0;
					var Kc = 0.0;
					Ka = this.kMassa;
					Kb = this.kMassb;
					Kc = this.kMassc;
					var bx = err1 * this.biasCoef;
					var by = err2 * this.biasCoef;
					do {
						var xx = 0.0;
						var xy = 0.0;
						xx = bx;
						xy = by;
						xx = -xx;
						xy = -xy;
						var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
						if(det != det) xx = xy = 0; else if(det == 0) {
							if(this.kMassa != 0) xx /= this.kMassa; else xx = 0;
							if(this.kMassc != 0) xy /= this.kMassc; else xy = 0;
						} else {
							det = 1 / det;
							var t = det * (this.kMassc * xx - this.kMassb * xy);
							xy = det * (this.kMassa * xy - this.kMassb * xx);
							xx = t;
						}
						if(xx >= 0 && xy >= 0) {
							var t = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t;
							this.b1.posy -= gnormy * t;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t;
							this.b2.posy += gnormy * t;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = -bx / Ka;
						xy = 0;
						var vn2 = Kb * xx + by;
						if(xx >= 0 && vn2 >= 0) {
							var t = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t;
							this.b1.posy -= gnormy * t;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t;
							this.b2.posy += gnormy * t;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
						xx = 0;
						xy = -by / Kc;
						var vn1 = Kb * xy + bx;
						if(xy >= 0 && vn1 >= 0) {
							var t = (xx + xy) * this.b1.imass;
							this.b1.posx -= gnormx * t;
							this.b1.posy -= gnormy * t;
							this.b1.delta_rot(-this.b1.iinertia * (rn1a * xx + rn2a * xy));
							var t = (xx + xy) * this.b2.imass;
							this.b2.posx += gnormx * t;
							this.b2.posy += gnormy * t;
							this.b2.delta_rot(this.b2.iinertia * (rn1b * xx + rn2b * xy));
							break;
						}
					} while(false);
				} else {
					var rn1 = gnormy * c1r1x - gnormx * c1r1y;
					var rn2 = gnormy * c1r2x - gnormx * c1r2y;
					var K = this.b2.smass + rn2 * rn2 * this.b2.sinertia + this.b1.smass + rn1 * rn1 * this.b1.sinertia;
					if(K != 0) {
						var jn = -this.biasCoef * err1 / K;
						var Jx = 0.0;
						var Jy = 0.0;
						var t = jn;
						Jx = gnormx * t;
						Jy = gnormy * t;
						var t = this.b1.imass;
						this.b1.posx -= Jx * t;
						this.b1.posy -= Jy * t;
						this.b1.delta_rot(-rn1 * this.b1.iinertia * jn);
						var t = this.b2.imass;
						this.b2.posx += Jx * t;
						this.b2.posy += Jy * t;
						this.b2.delta_rot(rn2 * this.b2.iinertia * jn);
					}
				}
			}
		}
	}
	,applyImpulseVel: function() {
		var jx;
		var jy;
		var j;
		var jMax;
		var jOld;
		var cjAcc;
		var v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
		var v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
		j = (v1y * this.nx - v1x * this.ny + this.surfacex) * this.c1.tMass;
		jMax = this.c1.friction * this.c1.jnAcc;
		jOld = this.c1.jtAcc;
		cjAcc = jOld - j;
		if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
		j = cjAcc - jOld;
		this.c1.jtAcc = cjAcc;
		jx = -this.ny * j;
		jy = this.nx * j;
		this.b2.velx += jx * this.b2.imass;
		this.b2.vely += jy * this.b2.imass;
		this.b1.velx -= jx * this.b1.imass;
		this.b1.vely -= jy * this.b1.imass;
		this.b2.angvel += this.rt1b * j * this.b2.iinertia;
		this.b1.angvel -= this.rt1a * j * this.b1.iinertia;
		if(this.hc2) {
			var v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			var v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			j = (v2y * this.nx - v2x * this.ny + this.surfacex) * this.c2.tMass;
			jMax = this.c2.friction * this.c2.jnAcc;
			jOld = this.c2.jtAcc;
			cjAcc = jOld - j;
			if(cjAcc > jMax) cjAcc = jMax; else if(cjAcc < -jMax) cjAcc = -jMax;
			j = cjAcc - jOld;
			this.c2.jtAcc = cjAcc;
			jx = -this.ny * j;
			jy = this.nx * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rt2b * j * this.b2.iinertia;
			this.b1.angvel -= this.rt2a * j * this.b1.iinertia;
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			v2x = this.k2x + this.b2.velx - this.c2.r2y * this.b2.angvel - (this.b1.velx - this.c2.r1y * this.b1.angvel);
			v2y = this.k2y + this.b2.vely + this.c2.r2x * this.b2.angvel - (this.b1.vely + this.c2.r1x * this.b1.angvel);
			var ax = this.c1.jnAcc;
			var ay = this.c2.jnAcc;
			var jnx = v1x * this.nx + v1y * this.ny + this.surfacey + this.c1.bounce - (this.Ka * ax + this.Kb * ay);
			var jny = v2x * this.nx + v2y * this.ny + this.surfacey + this.c2.bounce - (this.Kb * ax + this.Kc * ay);
			var xx = -(this.kMassa * jnx + this.kMassb * jny);
			var xy = -(this.kMassb * jnx + this.kMassc * jny);
			if(xx >= 0 && xy >= 0) {
				jnx = xx - ax;
				jny = xy - ay;
				this.c1.jnAcc = xx;
				this.c2.jnAcc = xy;
			} else {
				xx = -this.c1.nMass * jnx;
				if(xx >= 0 && this.Kb * xx + jny >= 0) {
					jnx = xx - ax;
					jny = -ay;
					this.c1.jnAcc = xx;
					this.c2.jnAcc = 0;
				} else {
					xy = -this.c2.nMass * jny;
					if(xy >= 0 && this.Kb * xy + jnx >= 0) {
						jnx = -ax;
						jny = xy - ay;
						this.c1.jnAcc = 0;
						this.c2.jnAcc = xy;
					} else if(jnx >= 0 && jny >= 0) {
						jnx = -ax;
						jny = -ay;
						this.c1.jnAcc = this.c2.jnAcc = 0;
					} else {
						jnx = 0;
						jny = 0;
					}
				}
			}
			j = jnx + jny;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += (this.rn1b * jnx + this.rn2b * jny) * this.b2.iinertia;
			this.b1.angvel -= (this.rn1a * jnx + this.rn2a * jny) * this.b1.iinertia;
		} else {
			if(this.radius != 0.0) {
				var dw = this.b2.angvel - this.b1.angvel;
				j = dw * this.rMass;
				jMax = this.rfric * this.c1.jnAcc;
				jOld = this.jrAcc;
				this.jrAcc -= j;
				if(this.jrAcc > jMax) this.jrAcc = jMax; else if(this.jrAcc < -jMax) this.jrAcc = -jMax;
				j = this.jrAcc - jOld;
				this.b2.angvel += j * this.b2.iinertia;
				this.b1.angvel -= j * this.b1.iinertia;
			}
			v1x = this.k1x + this.b2.velx - this.c1.r2y * this.b2.angvel - (this.b1.velx - this.c1.r1y * this.b1.angvel);
			v1y = this.k1y + this.b2.vely + this.c1.r2x * this.b2.angvel - (this.b1.vely + this.c1.r1x * this.b1.angvel);
			j = (this.c1.bounce + (this.nx * v1x + this.ny * v1y) + this.surfacey) * this.c1.nMass;
			jOld = this.c1.jnAcc;
			cjAcc = jOld - j;
			if(cjAcc < 0.0) cjAcc = 0.0;
			j = cjAcc - jOld;
			this.c1.jnAcc = cjAcc;
			jx = this.nx * j;
			jy = this.ny * j;
			this.b2.velx += jx * this.b2.imass;
			this.b2.vely += jy * this.b2.imass;
			this.b1.velx -= jx * this.b1.imass;
			this.b1.vely -= jy * this.b1.imass;
			this.b2.angvel += this.rn1b * j * this.b2.iinertia;
			this.b1.angvel -= this.rn1a * j * this.b1.iinertia;
		}
	}
	,warmStart: function() {
		var jx = this.nx * this.c1.jnAcc - this.ny * this.c1.jtAcc;
		var jy = this.ny * this.c1.jnAcc + this.nx * this.c1.jtAcc;
		var t = this.b1.imass;
		this.b1.velx -= jx * t;
		this.b1.vely -= jy * t;
		this.b1.angvel -= this.b1.iinertia * (jy * this.c1.r1x - jx * this.c1.r1y);
		var t = this.b2.imass;
		this.b2.velx += jx * t;
		this.b2.vely += jy * t;
		this.b2.angvel += this.b2.iinertia * (jy * this.c1.r2x - jx * this.c1.r2y);
		if(this.hc2) {
			var jx = this.nx * this.c2.jnAcc - this.ny * this.c2.jtAcc;
			var jy = this.ny * this.c2.jnAcc + this.nx * this.c2.jtAcc;
			var t = this.b1.imass;
			this.b1.velx -= jx * t;
			this.b1.vely -= jy * t;
			this.b1.angvel -= this.b1.iinertia * (jy * this.c2.r1x - jx * this.c2.r1y);
			var t = this.b2.imass;
			this.b2.velx += jx * t;
			this.b2.vely += jy * t;
			this.b2.angvel += this.b2.iinertia * (jy * this.c2.r2x - jx * this.c2.r2y);
		}
		this.b2.angvel += this.jrAcc * this.b2.iinertia;
		this.b1.angvel -= this.jrAcc * this.b1.iinertia;
	}
	,preStep: function(dt) {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
		if(this.pre_dt == -1.0) this.pre_dt = dt;
		var dtratio = dt / this.pre_dt;
		this.pre_dt = dt;
		var mass_sum = this.b1.smass + this.b2.smass;
		this.hc2 = false;
		var fst = true;
		var statType = !(this.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(this.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC);
		var bias = statType?this.continuous?nape.Config.contactContinuousStaticBiasCoef:nape.Config.contactStaticBiasCoef:this.continuous?nape.Config.contactContinuousBiasCoef:nape.Config.contactBiasCoef;
		this.biasCoef = bias;
		this.continuous = false;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
				ci.r2x = c.px - this.b2.posx;
				ci.r2y = c.py - this.b2.posy;
				ci.r1x = c.px - this.b1.posx;
				ci.r1y = c.py - this.b1.posy;
				var kt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r2x * this.nx + ci.r2y * this.ny);
				kt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(ci.r1x * this.nx + ci.r1y * this.ny);
				ci.tMass = kt < nape.Config.epsilon * nape.Config.epsilon?0:1.0 / kt;
				var nt = mass_sum + this.b2.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r2x - this.nx * ci.r2y);
				nt += this.b1.sinertia * zpp_nape.util.ZPP_Math.sqr(this.ny * ci.r1x - this.nx * ci.r1y);
				ci.nMass = nt < nape.Config.epsilon * nape.Config.epsilon?0:1.0 / nt;
				var vrx = 0.0;
				var vry = 0.0;
				var ang = this.b2.angvel + this.b2.kinangvel;
				vrx = this.b2.velx + this.b2.kinvelx - ci.r2y * ang;
				vry = this.b2.vely + this.b2.kinvely + ci.r2x * ang;
				ang = this.b1.angvel + this.b1.kinangvel;
				vrx -= this.b1.velx + this.b1.kinvelx - ci.r1y * ang;
				vry -= this.b1.vely + this.b1.kinvely + ci.r1x * ang;
				var vdot = this.nx * vrx + this.ny * vry;
				c.elasticity = this.restitution;
				ci.bounce = vdot * c.elasticity;
				if(ci.bounce > -nape.Config.elasticThreshold) ci.bounce = 0;
				vdot = vry * this.nx - vrx * this.ny;
				var thr = nape.Config.staticFrictionThreshold;
				if(vdot * vdot > thr * thr) ci.friction = this.dyn_fric; else ci.friction = this.stat_fric;
				ci.jnAcc *= dtratio;
				ci.jtAcc *= dtratio;
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		this.jrAcc *= dtratio;
		if(!fst) {
			this.rn1a = this.ny * this.c1.r1x - this.nx * this.c1.r1y;
			this.rt1a = this.c1.r1x * this.nx + this.c1.r1y * this.ny;
			this.rn1b = this.ny * this.c1.r2x - this.nx * this.c1.r2y;
			this.rt1b = this.c1.r2x * this.nx + this.c1.r2y * this.ny;
			this.k1x = this.b2.kinvelx - this.c1.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c1.r1y * this.b1.kinangvel);
			this.k1y = this.b2.kinvely + this.c1.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c1.r1x * this.b1.kinangvel);
		}
		if(this.hc2) {
			this.rn2a = this.ny * this.c2.r1x - this.nx * this.c2.r1y;
			this.rt2a = this.c2.r1x * this.nx + this.c2.r1y * this.ny;
			this.rn2b = this.ny * this.c2.r2x - this.nx * this.c2.r2y;
			this.rt2b = this.c2.r2x * this.nx + this.c2.r2y * this.ny;
			this.k2x = this.b2.kinvelx - this.c2.r2y * this.b2.kinangvel - (this.b1.kinvelx - this.c2.r1y * this.b1.kinangvel);
			this.k2y = this.b2.kinvely + this.c2.r2x * this.b2.kinangvel - (this.b1.kinvely + this.c2.r1x * this.b1.kinangvel);
			this.kMassa = mass_sum + this.b1.sinertia * this.rn1a * this.rn1a + this.b2.sinertia * this.rn1b * this.rn1b;
			this.kMassb = mass_sum + this.b1.sinertia * this.rn1a * this.rn2a + this.b2.sinertia * this.rn1b * this.rn2b;
			this.kMassc = mass_sum + this.b1.sinertia * this.rn2a * this.rn2a + this.b2.sinertia * this.rn2b * this.rn2b;
			var norm = this.kMassa * this.kMassa + 2 * this.kMassb * this.kMassb + this.kMassc * this.kMassc;
			if(norm < nape.Config.illConditionedThreshold * (this.kMassa * this.kMassc - this.kMassb * this.kMassb)) {
				this.Ka = this.kMassa;
				this.Kb = this.kMassb;
				this.Kc = this.kMassc;
				var det = this.kMassa * this.kMassc - this.kMassb * this.kMassb;
				if(det != det) {
					this.kMassa = this.kMassb = this.kMassc = 0;
					3;
				} else if(det == 0) {
					var flag = 0;
					if(this.kMassa != 0) this.kMassa = 1 / this.kMassa; else {
						this.kMassa = 0;
						flag |= 1;
					}
					if(this.kMassc != 0) this.kMassc = 1 / this.kMassc; else {
						this.kMassc = 0;
						flag |= 2;
					}
					this.kMassb = 0;
					flag;
				} else {
					det = 1 / det;
					var t = this.kMassc * det;
					this.kMassc = this.kMassa * det;
					this.kMassa = t;
					this.kMassb *= -det;
					0;
				}
			} else {
				this.hc2 = false;
				if(this.oc2.dist < this.oc1.dist) {
					var t = this.c1;
					this.c1 = this.c2;
					this.c2 = t;
				}
				this.oc2.active = false;
				this.contacts.modified = true;
			}
		}
		this.surfacex = this.b2.svelx;
		this.surfacey = this.b2.svely;
		var t = 1.0;
		this.surfacex += this.b1.svelx * t;
		this.surfacey += this.b1.svely * t;
		this.surfacex = -this.surfacex;
		this.surfacey = -this.surfacey;
		this.rMass = this.b1.sinertia + this.b2.sinertia;
		if(this.rMass != 0) this.rMass = 1 / this.rMass;
		return fst;
	}
	,cleanupContacts: function() {
		var fst = true;
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		this.hc2 = false;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c.stamp + nape.Config.arbiterExpirationDelay < this.stamp) {
				cx_ite = this.contacts.inlined_erase(pre);
				cx_itei = this.innards.inlined_erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				continue;
			}
			var ci = c.inner;
			var pact = c.active;
			c.active = c.stamp == this.stamp;
			if(c.active) {
				if(fst) {
					fst = false;
					this.c1 = ci;
					this.oc1 = c;
				} else {
					this.hc2 = true;
					this.c2 = ci;
					this.oc2 = c;
				}
			}
			if(pact != c.active) this.contacts.modified = true;
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
		if(this.hc2) {
			this.hpc2 = true;
			if(this.oc1.posOnly) {
				var tmp = this.c1;
				this.c1 = this.c2;
				this.c2 = tmp;
				var tmp2 = this.oc1;
				this.oc1 = this.oc2;
				this.oc2 = tmp2;
				this.hc2 = false;
			} else if(this.oc2.posOnly) this.hc2 = false;
			if(this.oc1.posOnly) fst = true;
		} else this.hpc2 = false;
		return fst;
	}
	,setupcontacts: function() {
		this.wrap_contacts = zpp_nape.util.ZPP_ContactList.get(this.contacts,true);
		this.wrap_contacts.zpp_inner.immutable = !this.mutable;
		this.wrap_contacts.zpp_inner.adder = $bind(this,this.contacts_adder);
		this.wrap_contacts.zpp_inner.dontremove = true;
		this.wrap_contacts.zpp_inner.subber = $bind(this,this.contacts_subber);
	}
	,contacts_subber: function(x) {
		var pre = null;
		var prei = null;
		var cx_itei = this.innards.next;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var c = cx_ite;
			if(c == x.zpp_inner) {
				this.contacts.erase(pre);
				this.innards.erase(prei);
				var o = c;
				o.arbiter = null;
				o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
				break;
			}
			pre = cx_ite;
			prei = cx_itei;
			cx_itei = cx_itei.next;
			cx_ite = cx_ite.next;
		}
	}
	,contacts_adder: function(x) {
		throw "Error: Cannot add new contacts, information required is far too specific and detailed :)";
		return false;
	}
	,makeimmutable: function() {
		this.mutable = false;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = true;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = true;
	}
	,makemutable: function() {
		this.mutable = true;
		if(this.wrap_normal != null) this.wrap_normal.zpp_inner._immutable = false;
		if(this.wrap_contacts != null) this.wrap_contacts.zpp_inner.immutable = false;
	}
	,retire: function() {
		if(!this.cleared) {
			this.b1.arbiters.inlined_try_remove(this);
			this.b2.arbiters.inlined_try_remove(this);
			if(this.pair != null) {
				this.pair.arb = null;
				this.pair = null;
			}
		}
		this.b1 = this.b2 = null;
		this.active = false;
		this.intchange = false;
		while(!(this.contacts.next == null)) {
			var o = this.contacts.inlined_pop_unsafe();
			o.arbiter = null;
			o.next = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
			zpp_nape.dynamics.ZPP_Contact.zpp_pool = o;
			this.innards.inlined_pop();
		}
		var o = this;
		o.userdef_dyn_fric = false;
		o.userdef_stat_fric = false;
		o.userdef_restitution = false;
		o.userdef_rfric = false;
		o.__ref_edge1 = o.__ref_edge2 = null;
		o.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
		zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o;
		this.pre_dt = -1.0;
	}
	,validate_props: function() {
		if(this.invalidated) {
			this.invalidated = false;
			if(!this.userdef_restitution) {
				if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
				if(this.restitution < 0) this.restitution = 0;
				if(this.restitution > 1) this.restitution = 1;
			}
			if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
			if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
			if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
		}
	}
	,calcProperties: function() {
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,assign: function(s1,s2,id,di) {
		this.b1 = s1.body;
		this.ws1 = s1;
		this.b2 = s2.body;
		this.ws2 = s2;
		this.id = id;
		this.di = di;
		this.b1.arbiters.inlined_add(this);
		this.b2.arbiters.inlined_add(this);
		this.active = true;
		this.present = 0;
		this.cleared = false;
		this.sleeping = false;
		this.fresh = false;
		this.presentable = false;
		this.s1 = s1;
		this.s2 = s2;
		if(!this.userdef_restitution) {
			if(this.s1.material.elasticity <= Math.NEGATIVE_INFINITY || this.s2.material.elasticity <= Math.NEGATIVE_INFINITY) this.restitution = 0; else if(this.s1.material.elasticity >= Math.POSITIVE_INFINITY || this.s2.material.elasticity >= Math.POSITIVE_INFINITY) this.restitution = 1; else this.restitution = (this.s1.material.elasticity + this.s2.material.elasticity) / 2;
			if(this.restitution < 0) this.restitution = 0;
			if(this.restitution > 1) this.restitution = 1;
		}
		if(!this.userdef_dyn_fric) this.dyn_fric = Math.sqrt(this.s1.material.dynamicFriction * this.s2.material.dynamicFriction);
		if(!this.userdef_stat_fric) this.stat_fric = Math.sqrt(this.s1.material.staticFriction * this.s2.material.staticFriction);
		if(!this.userdef_rfric) this.rfric = Math.sqrt(this.s1.material.rollingFriction * this.s2.material.rollingFriction);
	}
	,injectContact: function(px,py,nx,ny,dist,hash,posOnly) {
		if(posOnly == null) posOnly = false;
		var c = null;
		var cx_ite = this.contacts.next;
		while(cx_ite != null) {
			var cur = cx_ite;
			if(hash == cur.hash) {
				c = cur;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(c == null) {
			if(zpp_nape.dynamics.ZPP_Contact.zpp_pool == null) c = new zpp_nape.dynamics.ZPP_Contact(); else {
				c = zpp_nape.dynamics.ZPP_Contact.zpp_pool;
				zpp_nape.dynamics.ZPP_Contact.zpp_pool = c.next;
				c.next = null;
			}
			null;
			var ci = c.inner;
			ci.jnAcc = ci.jtAcc = 0;
			c.hash = hash;
			c.fresh = true;
			c.arbiter = this;
			this.jrAcc = 0;
			this.contacts.inlined_add(c);
			this.innards.add(ci);
		} else c.fresh = false;
		c.px = px;
		c.py = py;
		this.nx = nx;
		this.ny = ny;
		c.dist = dist;
		c.stamp = this.stamp;
		c.posOnly = posOnly;
		return c;
	}
	,free: function() {
		this.userdef_dyn_fric = false;
		this.userdef_stat_fric = false;
		this.userdef_restitution = false;
		this.userdef_rfric = false;
		this.__ref_edge1 = this.__ref_edge2 = null;
	}
	,alloc: function() {
	}
	,getnormal: function() {
		this.wrap_normal = nape.geom.Vec2.get(0,0,null);
		this.wrap_normal.zpp_inner._immutable = true;
		this.wrap_normal.zpp_inner._inuse = true;
		this.wrap_normal.zpp_inner._validate = $bind(this,this.normal_validate);
	}
	,normal_validate: function() {
		if(this.cleared) throw "Error: Arbiter not currently in use";
		this.wrap_normal.zpp_inner.x = this.nx;
		this.wrap_normal.zpp_inner.y = this.ny;
		if(this.ws1.id > this.ws2.id) {
			this.wrap_normal.zpp_inner.x = -this.wrap_normal.zpp_inner.x;
			this.wrap_normal.zpp_inner.y = -this.wrap_normal.zpp_inner.y;
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_ColArbiter
});
zpp_nape.dynamics.ZPP_Contact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.elasticity = 0.0;
	this.dist = 0.0;
	this.fresh = false;
	this.hash = 0;
	this.stamp = 0;
	this.posOnly = false;
	this.active = false;
	this.inner = null;
	this.arbiter = null;
	this.wrap_position = null;
	this.py = 0.0;
	this.px = 0.0;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_IContact();
};
zpp_nape.dynamics.ZPP_Contact.__name__ = ["zpp_nape","dynamics","ZPP_Contact"];
zpp_nape.dynamics.ZPP_Contact.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it:null;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.next == null;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
	}
	,clear: function() {
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.next;
	}
	,elem: function() {
		return this;
	}
	,alloc: function() {
	}
	,free: function() {
		this.arbiter = null;
	}
	,inactiveme: function() {
		return !(this.active && this.arbiter != null && !!this.arbiter.active);
	}
	,getposition: function() {
		var me = this;
		this.wrap_position = nape.geom.Vec2.get(null,null,null);
		this.wrap_position.zpp_inner._inuse = true;
		this.wrap_position.zpp_inner._immutable = true;
		this.wrap_position.zpp_inner._validate = $bind(this,this.position_validate);
	}
	,position_validate: function() {
		if(this.inactiveme()) throw "Error: Contact not currently in use";
		this.wrap_position.zpp_inner.x = this.px;
		this.wrap_position.zpp_inner.y = this.py;
	}
	,wrapper: function() {
		if(this.outer == null) {
			zpp_nape.dynamics.ZPP_Contact.internal = true;
			this.outer = new nape.dynamics.Contact();
			zpp_nape.dynamics.ZPP_Contact.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_nape.dynamics.ZPP_Contact
}
zpp_nape.dynamics.ZPP_IContact = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.lr2y = 0.0;
	this.lr2x = 0.0;
	this.lr1y = 0.0;
	this.lr1x = 0.0;
	this.jtAcc = 0.0;
	this.jnAcc = 0.0;
	this.friction = 0.0;
	this.bounce = 0.0;
	this.tMass = 0.0;
	this.nMass = 0.0;
	this.r2y = 0.0;
	this.r2x = 0.0;
	this.r1y = 0.0;
	this.r1x = 0.0;
};
zpp_nape.dynamics.ZPP_IContact.__name__ = ["zpp_nape","dynamics","ZPP_IContact"];
zpp_nape.dynamics.ZPP_IContact.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it:null;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.next == null;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
	}
	,clear: function() {
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.next;
	}
	,elem: function() {
		return this;
	}
	,__class__: zpp_nape.dynamics.ZPP_IContact
}
zpp_nape.dynamics.ZPP_InteractionFilter = function() {
	this.fluidMask = 0;
	this.fluidGroup = 0;
	this.sensorMask = 0;
	this.sensorGroup = 0;
	this.collisionMask = 0;
	this.collisionGroup = 0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.collisionGroup = this.sensorGroup = this.fluidGroup = 1;
	this.collisionMask = this.sensorMask = this.fluidMask = -1;
};
zpp_nape.dynamics.ZPP_InteractionFilter.__name__ = ["zpp_nape","dynamics","ZPP_InteractionFilter"];
zpp_nape.dynamics.ZPP_InteractionFilter.prototype = {
	invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_filter();
			cx_ite = cx_ite.next;
		}
	}
	,shouldFlow: function(x) {
		return (this.fluidMask & x.fluidGroup) != 0 && (x.fluidMask & this.fluidGroup) != 0;
	}
	,shouldSense: function(x) {
		return (this.sensorMask & x.sensorGroup) != 0 && (x.sensorMask & this.sensorGroup) != 0;
	}
	,shouldCollide: function(x) {
		return (this.collisionMask & x.collisionGroup) != 0 && (x.collisionMask & this.collisionGroup) != 0;
	}
	,copy: function() {
		var ret;
		if(zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool == null) ret = new zpp_nape.dynamics.ZPP_InteractionFilter(); else {
			ret = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.collisionGroup = this.collisionGroup;
		ret.collisionMask = this.collisionMask;
		ret.sensorGroup = this.sensorGroup;
		ret.sensorMask = this.sensorMask;
		ret.fluidGroup = this.fluidGroup;
		ret.fluidMask = this.fluidMask;
		return ret;
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,alloc: function() {
	}
	,free: function() {
		this.outer = null;
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.dynamics.InteractionFilter();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
			zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_nape.dynamics.ZPP_InteractionFilter
}
zpp_nape.dynamics.ZPP_InteractionGroup = function() {
	this.depth = 0;
	this.wrap_interactors = null;
	this.interactors = null;
	this.wrap_groups = null;
	this.groups = null;
	this.group = null;
	this.ignore = false;
	this.outer = null;
	this.depth = 0;
	this.groups = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this.interactors = new zpp_nape.util.ZNPList_ZPP_Interactor();
};
zpp_nape.dynamics.ZPP_InteractionGroup.__name__ = ["zpp_nape","dynamics","ZPP_InteractionGroup"];
zpp_nape.dynamics.ZPP_InteractionGroup.prototype = {
	remInteractor: function(intx,flag) {
		if(flag == null) flag = -1;
		this.interactors.remove(intx);
	}
	,addInteractor: function(intx) {
		this.interactors.add(intx);
	}
	,remGroup: function(group) {
		this.groups.remove(group);
		group.depth = 0;
	}
	,addGroup: function(group) {
		this.groups.add(group);
		group.depth = this.depth + 1;
	}
	,invalidate: function(force) {
		if(force == null) force = false;
		if(!(force || this.ignore)) return;
		var cx_ite = this.interactors.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(b.ibody != null) b.ibody.wake(); else if(b.ishape != null) b.ishape.body.wake(); else b.icompound.wake();
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.groups.head;
		while(cx_ite != null) {
			var g = cx_ite.elt;
			g.invalidate(force);
			cx_ite = cx_ite.next;
		}
	}
	,setGroup: function(group) {
		if(this.group != group) {
			if(this.group != null) {
				this.group.groups.remove(this);
				this.depth = 0;
				this.group.invalidate(true);
			}
			this.group = group;
			if(group != null) {
				group.groups.add(this);
				this.depth = group.depth + 1;
				group.invalidate(true);
			} else this.invalidate(true);
		}
	}
	,__class__: zpp_nape.dynamics.ZPP_InteractionGroup
}
zpp_nape.dynamics.ZPP_SpaceArbiterList = function() {
	this.at_index_3 = 0;
	this.at_index_2 = 0;
	this.at_index_1 = 0;
	this.at_index_0 = 0;
	this.ite_3 = null;
	this.ite_2 = null;
	this.ite_1 = null;
	this.ite_0 = null;
	this.lengths = null;
	this.zip_length = false;
	this._length = 0;
	this.space = null;
	nape.dynamics.ArbiterList.call(this);
	this.at_index_0 = 0;
	this.at_index_1 = 0;
	this.at_index_2 = 0;
	this.at_index_3 = 0;
	this.zip_length = true;
	this._length = 0;
	this.lengths = new Array();
	var _g = 0;
	while(_g < 4) {
		var i = _g++;
		this.lengths.push(0);
	}
};
zpp_nape.dynamics.ZPP_SpaceArbiterList.__name__ = ["zpp_nape","dynamics","ZPP_SpaceArbiterList"];
zpp_nape.dynamics.ZPP_SpaceArbiterList.__super__ = nape.dynamics.ArbiterList;
zpp_nape.dynamics.ZPP_SpaceArbiterList.prototype = $extend(nape.dynamics.ArbiterList.prototype,{
	at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		var ret = null;
		var accum_length = 0;
		if(ret == null) {
			if(index < accum_length + this.lengths[0]) {
				var offset = index - accum_length;
				if(offset < this.at_index_0 || this.ite_0 == null) {
					this.at_index_0 = 0;
					this.ite_0 = this.space.c_arbiters_true.head;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				while(this.at_index_0 != offset) {
					this.at_index_0++;
					this.ite_0 = this.ite_0.next;
					while(true) {
						var x = this.ite_0.elt;
						if(x.active) break;
						this.ite_0 = this.ite_0.next;
					}
				}
				ret = this.ite_0.elt.wrapper();
			} else accum_length += this.lengths[0];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[1]) {
				var offset = index - accum_length;
				if(offset < this.at_index_1 || this.ite_1 == null) {
					this.at_index_1 = 0;
					this.ite_1 = this.space.c_arbiters_false.head;
					while(true) {
						var x = this.ite_1.elt;
						if(x.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				while(this.at_index_1 != offset) {
					this.at_index_1++;
					this.ite_1 = this.ite_1.next;
					while(true) {
						var x = this.ite_1.elt;
						if(x.active) break;
						this.ite_1 = this.ite_1.next;
					}
				}
				ret = this.ite_1.elt.wrapper();
			} else accum_length += this.lengths[1];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[2]) {
				var offset = index - accum_length;
				if(offset < this.at_index_2 || this.ite_2 == null) {
					this.at_index_2 = 0;
					this.ite_2 = this.space.f_arbiters.head;
					while(true) {
						var x = this.ite_2.elt;
						if(x.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				while(this.at_index_2 != offset) {
					this.at_index_2++;
					this.ite_2 = this.ite_2.next;
					while(true) {
						var x = this.ite_2.elt;
						if(x.active) break;
						this.ite_2 = this.ite_2.next;
					}
				}
				ret = this.ite_2.elt.wrapper();
			} else accum_length += this.lengths[2];
		}
		if(ret == null) {
			if(index < accum_length + this.lengths[3]) {
				var offset = index - accum_length;
				if(offset < this.at_index_3 || this.ite_3 == null) {
					this.at_index_3 = 0;
					this.ite_3 = this.space.s_arbiters.head;
					while(true) {
						var x = this.ite_3.elt;
						if(x.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				while(this.at_index_3 != offset) {
					this.at_index_3++;
					this.ite_3 = this.ite_3.next;
					while(true) {
						var x = this.ite_3.elt;
						if(x.active) break;
						this.ite_3 = this.ite_3.next;
					}
				}
				ret = this.ite_3.elt.wrapper();
			} else accum_length += this.lengths[3];
		}
		return ret;
	}
	,clear: function() {
		throw "Error: ArbiterList is immutable";
	}
	,remove: function(obj) {
		throw "Error: ArbiterList is immutable";
		return false;
	}
	,shift: function() {
		throw "Error: ArbiterList is immutable";
		return null;
	}
	,unshift: function(obj) {
		throw "Error: ArbiterList is immutable";
		return false;
	}
	,pop: function() {
		throw "Error: ArbiterList is immutable";
		return null;
	}
	,push: function(obj) {
		throw "Error: ArbiterList is immutable";
		return false;
	}
	,zpp_vm: function() {
		var modified = false;
		if(this.space.c_arbiters_true.modified) {
			modified = true;
			this.space.c_arbiters_true.modified = false;
		}
		if(this.space.c_arbiters_false.modified) {
			modified = true;
			this.space.c_arbiters_false.modified = false;
		}
		if(this.space.f_arbiters.modified) {
			modified = true;
			this.space.f_arbiters.modified = false;
		}
		if(this.space.s_arbiters.modified) {
			modified = true;
			this.space.s_arbiters.modified = false;
		}
		if(modified) {
			this.zip_length = true;
			this._length = 0;
			this.ite_0 = null;
			this.ite_1 = null;
			this.ite_2 = null;
			this.ite_3 = null;
		}
	}
	,zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var ind = 0;
			var len = 0;
			var cx_ite = this.space.c_arbiters_true.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len = 0;
			var cx_ite = this.space.c_arbiters_false.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len = 0;
			var cx_ite = this.space.f_arbiters.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			var len = 0;
			var cx_ite = this.space.s_arbiters.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.active) len++;
				cx_ite = cx_ite.next;
			}
			this.lengths[ind++] = len;
			this._length += len;
			this.zip_length = false;
		}
		return this._length;
	}
	,__class__: zpp_nape.dynamics.ZPP_SpaceArbiterList
});
zpp_nape.geom = {}
zpp_nape.geom.ZPP_AABB = function() {
	this.wrap_max = null;
	this.maxy = 0.0;
	this.maxx = 0.0;
	this.wrap_min = null;
	this.miny = 0.0;
	this.minx = 0.0;
	this.next = null;
	this.outer = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_AABB.__name__ = ["zpp_nape","geom","ZPP_AABB"];
zpp_nape.geom.ZPP_AABB.get = function(minx,miny,maxx,maxy) {
	var ret;
	if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) ret = new zpp_nape.geom.ZPP_AABB(); else {
		ret = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.minx = minx;
	ret.miny = miny;
	ret.maxx = maxx;
	ret.maxy = maxy;
	return ret;
}
zpp_nape.geom.ZPP_AABB.prototype = {
	toString: function() {
		return "{ x: " + this.minx + " y: " + this.miny + " w: " + (this.maxx - this.minx) + " h: " + (this.maxy - this.miny) + " }";
	}
	,setExpandPoint: function(x,y) {
		if(x < this.minx) this.minx = x;
		if(x > this.maxx) this.maxx = x;
		if(y < this.miny) this.miny = y;
		if(y > this.maxy) this.maxy = y;
	}
	,setExpand: function(a,fatten) {
		this.minx = a.minx - fatten;
		this.miny = a.miny - fatten;
		this.maxx = a.maxx + fatten;
		this.maxy = a.maxy + fatten;
	}
	,setCombine: function(a,b) {
		this.minx = a.minx < b.minx?a.minx:b.minx;
		this.miny = a.miny < b.miny?a.miny:b.miny;
		this.maxx = a.maxx > b.maxx?a.maxx:b.maxx;
		this.maxy = a.maxy > b.maxy?a.maxy:b.maxy;
	}
	,containsPoint: function(v) {
		return v.x >= this.minx && v.x <= this.maxx && v.y >= this.miny && v.y <= this.maxy;
	}
	,contains: function(x) {
		return x.minx >= this.minx && x.miny >= this.miny && x.maxx <= this.maxx && x.maxy <= this.maxy;
	}
	,combine: function(x) {
		if(x.minx < this.minx) this.minx = x.minx;
		if(x.maxx > this.maxx) this.maxx = x.maxx;
		if(x.miny < this.miny) this.miny = x.miny;
		if(x.maxy > this.maxy) this.maxy = x.maxy;
	}
	,intersect: function(x) {
		return x.miny <= this.maxy && this.miny <= x.maxy && x.minx <= this.maxx && this.minx <= x.maxx;
	}
	,intersectY: function(x) {
		return !(x.miny > this.maxy || this.miny > x.maxy);
	}
	,intersectX: function(x) {
		return !(x.minx > this.maxx || this.minx > x.maxx);
	}
	,mod_max: function(max) {
		if(max.x != this.maxx || max.y != this.maxy) {
			this.maxx = max.x;
			this.maxy = max.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,dom_max: function() {
		if(this._validate != null) this._validate();
		this.wrap_max.zpp_inner.x = this.maxx;
		this.wrap_max.zpp_inner.y = this.maxy;
	}
	,getmax: function() {
		if(this.wrap_max == null) {
			this.wrap_max = nape.geom.Vec2.get(this.maxx,this.maxy,null);
			this.wrap_max.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_max.zpp_inner._immutable = true; else this.wrap_max.zpp_inner._invalidate = $bind(this,this.mod_max);
			this.wrap_max.zpp_inner._validate = $bind(this,this.dom_max);
		}
		return this.wrap_max;
	}
	,mod_min: function(min) {
		if(min.x != this.minx || min.y != this.miny) {
			this.minx = min.x;
			this.miny = min.y;
			if(this._invalidate != null) this._invalidate(this);
		}
	}
	,dom_min: function() {
		if(this._validate != null) this._validate();
		this.wrap_min.zpp_inner.x = this.minx;
		this.wrap_min.zpp_inner.y = this.miny;
	}
	,getmin: function() {
		if(this.wrap_min == null) {
			this.wrap_min = nape.geom.Vec2.get(this.minx,this.miny,null);
			this.wrap_min.zpp_inner._inuse = true;
			if(this._immutable) this.wrap_min.zpp_inner._immutable = true; else this.wrap_min.zpp_inner._invalidate = $bind(this,this.mod_min);
			this.wrap_min.zpp_inner._validate = $bind(this,this.dom_min);
		}
		return this.wrap_min;
	}
	,perimeter: function() {
		return (this.maxx - this.minx + (this.maxy - this.miny)) * 2;
	}
	,height: function() {
		return this.maxy - this.miny;
	}
	,width: function() {
		return this.maxx - this.minx;
	}
	,copy: function() {
		return zpp_nape.geom.ZPP_AABB.get(this.minx,this.miny,this.maxx,this.maxy);
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this.wrap_min = this.wrap_max = null;
		this._invalidate = null;
		this._validate = null;
	}
	,alloc: function() {
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.AABB();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o.wrap_min = o.wrap_max = null;
			o._invalidate = null;
			o._validate = null;
			o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_nape.geom.ZPP_AABB
}
zpp_nape.util.ZNPList_ZPP_Vec2 = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPList_ZPP_Vec2"];
zpp_nape.util.ZNPList_ZPP_Vec2.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Vec2(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Vec2.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Vec2
}
zpp_nape.geom.ZPP_Collide = function() { }
zpp_nape.geom.ZPP_Collide.__name__ = ["zpp_nape","geom","ZPP_Collide"];
zpp_nape.geom.ZPP_Collide.circleContains = function(c,p) {
	var dx = 0.0;
	var dy = 0.0;
	dx = p.x - c.worldCOMx;
	dy = p.y - c.worldCOMy;
	return dx * dx + dy * dy < c.radius * c.radius;
}
zpp_nape.geom.ZPP_Collide.polyContains = function(s,p) {
	var retvar;
	retvar = true;
	var cx_ite = s.edges.head;
	while(cx_ite != null) {
		var a = cx_ite.elt;
		if(a.gnormx * p.x + a.gnormy * p.y <= a.gprojection) {
			cx_ite = cx_ite.next;
			continue;
		} else {
			retvar = false;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
}
zpp_nape.geom.ZPP_Collide.shapeContains = function(s,p) {
	return s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?zpp_nape.geom.ZPP_Collide.circleContains(s.circle,p):zpp_nape.geom.ZPP_Collide.polyContains(s.polygon,p);
}
zpp_nape.geom.ZPP_Collide.bodyContains = function(b,p) {
	var retvar;
	retvar = false;
	var cx_ite = b.shapes.head;
	while(cx_ite != null) {
		var s = cx_ite.elt;
		if(zpp_nape.geom.ZPP_Collide.shapeContains(s,p)) {
			retvar = true;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return retvar;
}
zpp_nape.geom.ZPP_Collide.containTest = function(s1,s2) {
	if(s1.aabb.contains(s2.aabb)) return s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?(function($this) {
		var $r;
		var minDist = s1.circle.radius + -s2.circle.radius;
		var px = 0.0;
		var py = 0.0;
		{
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
		}
		var distSqr = px * px + py * py;
		$r = distSqr <= minDist * minDist;
		return $r;
	}(this)):(function($this) {
		var $r;
		var retvar;
		{
			retvar = true;
			var cx_ite = s2.polygon.gverts.next;
			while(cx_ite != null) {
				var p = cx_ite;
				if((function($this) {
					var $r;
					var minDist = s1.circle.radius;
					var px = 0.0;
					var py = 0.0;
					{
						px = p.x - s1.circle.worldCOMx;
						py = p.y - s1.circle.worldCOMy;
					}
					var distSqr = px * px + py * py;
					$r = distSqr <= minDist * minDist;
					return $r;
				}($this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = retvar;
		return $r;
	}(this)):s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?(function($this) {
		var $r;
		var retvar;
		{
			retvar = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				if(a.gnormx * s2.circle.worldCOMx + a.gnormy * s2.circle.worldCOMy + s2.circle.radius <= a.gprojection) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = retvar;
		return $r;
	}(this)):(function($this) {
		var $r;
		var retvar;
		{
			retvar = true;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				if((function($this) {
					var $r;
					var max = -1e+100;
					{
						var cx_ite1 = s2.polygon.gverts.next;
						while(cx_ite1 != null) {
							var v = cx_ite1;
							var k = a.gnormx * v.x + a.gnormy * v.y;
							if(k > max) max = k;
							cx_ite1 = cx_ite1.next;
						}
					}
					$r = max <= a.gprojection;
					return $r;
				}($this))) {
					cx_ite = cx_ite.next;
					continue;
				} else {
					retvar = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = retvar;
		return $r;
	}(this)); else return false;
}
zpp_nape.geom.ZPP_Collide.contactCollide = function(s1,s2,arb,rev) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var cont = true;
			var max = -1e+100;
			var maxmin = -1e+100;
			var maxi = -1;
			var axis1 = null;
			var axis2 = null;
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(min - ax.gprojection <= max) break;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min >= 0) {
					cont = false;
					break;
				}
				if(min > max) {
					max = min;
					axis1 = ax;
					maxi = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) min = k;
						if(min - ax.gprojection <= max) break;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min >= 0) {
						cont = false;
						break;
					}
					if(min > max) {
						max = min;
						axis2 = ax;
						maxi = 2;
					}
					cx_ite = cx_ite.next;
				}
				if(!cont) return false; else {
					var q1, q2, ax, scale;
					if(maxi == 1) {
						q1 = s1.polygon;
						q2 = s2.polygon;
						ax = axis1;
						scale = 1.0;
					} else {
						q1 = s2.polygon;
						q2 = s1.polygon;
						ax = axis2;
						scale = -1.0;
					}
					var ay = null;
					var min = 1e100;
					var cx_ite = q2.edges.head;
					while(cx_ite != null) {
						var axis = cx_ite.elt;
						var k = ax.gnormx * axis.gnormx + ax.gnormy * axis.gnormy;
						if(k < min) {
							min = k;
							ay = axis;
						}
						cx_ite = cx_ite.next;
					}
					var c0x = 0.0;
					var c0y = 0.0;
					c0x = ay.gp0.x;
					c0y = ay.gp0.y;
					var c1x = 0.0;
					var c1y = 0.0;
					c1x = ay.gp1.x;
					c1y = ay.gp1.y;
					var dvx = 0.0;
					var dvy = 0.0;
					dvx = c1x - c0x;
					dvy = c1y - c0y;
					var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
					var d1 = ax.gnormy * c1x - ax.gnormx * c1y;
					var den = 1 / (d1 - d0);
					var t = (-ax.tp1 - d0) * den;
					if(t > nape.Config.epsilon) {
						var t1 = t;
						c0x += dvx * t1;
						c0y += dvy * t1;
					}
					var t1 = (-ax.tp0 - d1) * den;
					if(t1 < -nape.Config.epsilon) {
						var t2 = t1;
						c1x += dvx * t2;
						c1y += dvy * t2;
					}
					var nx = 0.0;
					var ny = 0.0;
					var t2 = scale;
					nx = ax.gnormx * t2;
					ny = ax.gnormy * t2;
					arb.lnormx = ax.lnormx;
					arb.lnormy = ax.lnormy;
					arb.lproj = ax.lprojection;
					arb.radius = 0;
					arb.rev = rev != (scale == -1);
					arb.ptype = arb.rev?1:0;
					var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
					var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
					if(c0d > 0 && c1d > 0) return false; else {
						if(rev) {
							nx = -nx;
							ny = -ny;
						}
						var con = arb.injectContact(c0x - ax.gnormx * c0d * 0.5,c0y - ax.gnormy * c0d * 0.5,nx,ny,c0d,arb.rev?1:0,c0d > 0);
						var t2 = 1.0;
						c0x -= q2.body.posx * t2;
						c0y -= q2.body.posy * t2;
						con.inner.lr1x = c0x * q2.body.axisy + c0y * q2.body.axisx;
						con.inner.lr1y = c0y * q2.body.axisy - c0x * q2.body.axisx;
						con = arb.injectContact(c1x - ax.gnormx * c1d * 0.5,c1y - ax.gnormy * c1d * 0.5,nx,ny,c1d,arb.rev?0:1,c1d > 0);
						var t2 = 1.0;
						c1x -= q2.body.posx * t2;
						c1y -= q2.body.posy * t2;
						con.inner.lr1x = c1x * q2.body.axisy + c1y * q2.body.axisx;
						con.inner.lr1y = c1y * q2.body.axisy - c1x * q2.body.axisx;
						if(maxi == 1) {
							arb.__ref_edge1 = ax;
							arb.__ref_edge2 = ay;
						} else {
							arb.__ref_edge2 = ax;
							arb.__ref_edge1 = ay;
						}
						return true;
					}
				}
			} else return false;
		} else {
			var max = -1e+100;
			var minmax = -1e+100;
			var cont = true;
			var a0 = null, vi = null;
			var vite = s2.polygon.gverts.next;
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
			if(cont) {
				var v0 = vi;
				var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
				var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var co = (function($this) {
						var $r;
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						{
							px = v0.x - s1.circle.worldCOMx;
							py = v0.y - s1.circle.worldCOMy;
						}
						var distSqr = px * px + py * py;
						$r = distSqr > minDist * minDist?null:distSqr < nape.Config.epsilon * nape.Config.epsilon?arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null):(function($this) {
							var $r;
							var invDist = 1.0 / Math.sqrt(distSqr);
							var dist = invDist < nape.Config.epsilon?1e100:1.0 / invDist;
							var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
							$r = rev?arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist - minDist,0,null):arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist - minDist,0,null);
							return $r;
						}($this));
						return $r;
					}(this));
					if(co != null) {
						var con = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v0.x - s2.polygon.body.posx;
						vy = v0.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = -1;
						if(rev) {
							con.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr2x = s1.circle.localCOMx;
							con.lr2y = s1.circle.localCOMy;
						} else {
							con.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr1x = s1.circle.localCOMx;
							con.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var co = (function($this) {
						var $r;
						var minDist = s1.circle.radius;
						var px = 0.0;
						var py = 0.0;
						{
							px = v1.x - s1.circle.worldCOMx;
							py = v1.y - s1.circle.worldCOMy;
						}
						var distSqr = px * px + py * py;
						$r = distSqr > minDist * minDist?null:distSqr < nape.Config.epsilon * nape.Config.epsilon?arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null):(function($this) {
							var $r;
							var invDist = 1.0 / Math.sqrt(distSqr);
							var dist = invDist < nape.Config.epsilon?1e100:1.0 / invDist;
							var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
							$r = rev?arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist - minDist,0,null):arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist - minDist,0,null);
							return $r;
						}($this));
						return $r;
					}(this));
					if(co != null) {
						var con = co.inner;
						arb.ptype = 2;
						var vx = 0.0;
						var vy = 0.0;
						vx = v1.x - s2.polygon.body.posx;
						vy = v1.y - s2.polygon.body.posy;
						arb.__ref_edge1 = a0;
						arb.__ref_vertex = 1;
						if(rev) {
							con.lr1x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr1y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr2x = s1.circle.localCOMx;
							con.lr2y = s1.circle.localCOMy;
						} else {
							con.lr2x = vx * s2.polygon.body.axisy + vy * s2.polygon.body.axisx;
							con.lr2y = vy * s2.polygon.body.axisy - vx * s2.polygon.body.axisx;
							con.lr1x = s1.circle.localCOMx;
							con.lr1y = s1.circle.localCOMy;
						}
						arb.radius = s1.circle.radius;
					}
					return co != null;
				} else {
					var nx = 0.0;
					var ny = 0.0;
					var t = s1.circle.radius + max * 0.5;
					nx = a0.gnormx * t;
					ny = a0.gnormy * t;
					var px = 0.0;
					var py = 0.0;
					px = s1.circle.worldCOMx - nx;
					py = s1.circle.worldCOMy - ny;
					var con = rev?arb.injectContact(px,py,a0.gnormx,a0.gnormy,max,0,null):arb.injectContact(px,py,-a0.gnormx,-a0.gnormy,max,0,null);
					arb.ptype = rev?0:1;
					arb.lnormx = a0.lnormx;
					arb.lnormy = a0.lnormy;
					arb.rev = !rev;
					arb.lproj = a0.lprojection;
					arb.radius = s1.circle.radius;
					con.inner.lr1x = s1.circle.localCOMx;
					con.inner.lr1y = s1.circle.localCOMy;
					arb.__ref_edge1 = a0;
					arb.__ref_vertex = 0;
					return true;
				}
			} else return false;
		}
	} else {
		var co = (function($this) {
			var $r;
			var minDist = s1.circle.radius + s2.circle.radius;
			var px = 0.0;
			var py = 0.0;
			{
				px = s2.circle.worldCOMx - s1.circle.worldCOMx;
				py = s2.circle.worldCOMy - s1.circle.worldCOMy;
			}
			var distSqr = px * px + py * py;
			$r = distSqr > minDist * minDist?null:distSqr < nape.Config.epsilon * nape.Config.epsilon?arb.injectContact(s1.circle.worldCOMx,s1.circle.worldCOMy,1,0,-minDist,0,null):(function($this) {
				var $r;
				var invDist = 1.0 / Math.sqrt(distSqr);
				var dist = invDist < nape.Config.epsilon?1e100:1.0 / invDist;
				var df = 0.5 + (s1.circle.radius - 0.5 * minDist) * invDist;
				$r = rev?arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,-px * invDist,-py * invDist,dist - minDist,0,null):arb.injectContact(s1.circle.worldCOMx + px * df,s1.circle.worldCOMy + py * df,px * invDist,py * invDist,dist - minDist,0,null);
				return $r;
			}($this));
			return $r;
		}(this));
		if(co != null) {
			var con = co.inner;
			if(rev) {
				con.lr1x = s2.circle.localCOMx;
				con.lr1y = s2.circle.localCOMy;
				con.lr2x = s1.circle.localCOMx;
				con.lr2y = s1.circle.localCOMy;
			} else {
				con.lr1x = s1.circle.localCOMx;
				con.lr1y = s1.circle.localCOMy;
				con.lr2x = s2.circle.localCOMx;
				con.lr2y = s2.circle.localCOMy;
			}
			arb.radius = s1.circle.radius + s2.circle.radius;
			arb.ptype = 2;
			return true;
		} else return false;
	}
}
zpp_nape.geom.ZPP_Collide.testCollide_safe = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var t = s1;
		s1 = s2;
		s2 = t;
	}
	return zpp_nape.geom.ZPP_Collide.testCollide(s1,s2);
}
zpp_nape.geom.ZPP_Collide.testCollide = function(s1,s2) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) return s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON?(function($this) {
		var $r;
		var cont = true;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?(function($this) {
			var $r;
			{
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) min = k;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min > 0) {
						cont = false;
						break;
					}
					cx_ite = cx_ite.next;
				}
			}
			$r = cont;
			return $r;
		}($this)):false;
		return $r;
	}(this)):(function($this) {
		var $r;
		var a0 = null, vi = null;
		var cont = true;
		var max = -1e+100;
		var vite = s2.polygon.gverts.next;
		{
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy - a.gprojection - s1.circle.radius;
				if(dist > 0) {
					cont = false;
					break;
				}
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?(function($this) {
			var $r;
			var v0 = vi;
			var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			$r = dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				{
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):dt >= v1.y * a0.gnormx - v1.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				{
					px = v1.x - s1.circle.worldCOMx;
					py = v1.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):true;
			return $r;
		}($this)):false;
		return $r;
	}(this)); else return (function($this) {
		var $r;
		var minDist = s1.circle.radius + s2.circle.radius;
		var px = 0.0;
		var py = 0.0;
		{
			px = s2.circle.worldCOMx - s1.circle.worldCOMx;
			py = s2.circle.worldCOMy - s1.circle.worldCOMy;
		}
		var distSqr = px * px + py * py;
		$r = distSqr <= minDist * minDist;
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Collide.flowCollide = function(s1,s2,arb) {
	if(s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) return s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON?(function($this) {
		var $r;
		var out1 = new Array();
		var out2 = new Array();
		var cont = true;
		var total = true;
		{
			var cx_ite = s1.polygon.edges.head;
			while(cx_ite != null) {
				var ax = cx_ite.elt;
				var min = 1e100;
				var ind = 0;
				var cx_ite1 = s2.polygon.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = ax.gnormx * v.x + ax.gnormy * v.y;
					if(k < min) min = k;
					if(k >= ax.gprojection + nape.Config.epsilon) {
						out2[ind] = true;
						total = false;
					}
					ind++;
					cx_ite1 = cx_ite1.next;
				}
				min -= ax.gprojection;
				if(min > 0) {
					cont = false;
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		$r = total?(function($this) {
			var $r;
			s2.polygon.validate_worldCOM();
			{
				arb.overlap = s2.polygon.area;
				arb.centroidx = s2.polygon.worldCOMx;
				arb.centroidy = s2.polygon.worldCOMy;
				null;
			}
			$r = true;
			return $r;
		}($this)):cont?(function($this) {
			var $r;
			total = true;
			{
				var cx_ite = s2.polygon.edges.head;
				while(cx_ite != null) {
					var ax = cx_ite.elt;
					var min = 1e100;
					var ind = 0;
					var cx_ite1 = s1.polygon.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = ax.gnormx * v.x + ax.gnormy * v.y;
						if(k < min) min = k;
						if(k >= ax.gprojection + nape.Config.epsilon) {
							out1[ind] = true;
							total = false;
						}
						ind++;
						cx_ite1 = cx_ite1.next;
					}
					min -= ax.gprojection;
					if(min > 0) {
						cont = false;
						break;
					}
					cx_ite = cx_ite.next;
				}
			}
			$r = total?(function($this) {
				var $r;
				s1.polygon.validate_worldCOM();
				{
					arb.overlap = s1.polygon.area;
					arb.centroidx = s1.polygon.worldCOMx;
					arb.centroidy = s1.polygon.worldCOMy;
					null;
				}
				$r = true;
				return $r;
			}($this)):cont?(function($this) {
				var $r;
				while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
					var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
					if(!p._inuse) {
						var o = p;
						if(o.outer != null) {
							o.outer.zpp_inner = null;
							o.outer = null;
						}
						o._isimmutable = null;
						o._validate = null;
						o._invalidate = null;
						o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
						zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
					}
				}
				var fst_vert = null;
				var poly1 = false;
				var ite1 = s1.polygon.gverts.next;
				var ind1 = 0;
				var ite2 = s2.polygon.gverts.next;
				var ind2 = 0;
				{
					var _g1 = 0, _g = s2.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out2[i]) {
							ind2 = i;
							break;
						} else ite2 = ite2.next;
					}
				}
				if(ite2 == null) {
					ite2 = s2.polygon.gverts.next;
					poly1 = true;
					var _g1 = 0, _g = s1.polygon.edgeCnt;
					while(_g1 < _g) {
						var i = _g1++;
						if(!out1[i]) {
							ind1 = i;
							break;
						} else ite1 = ite1.next;
					}
					if(ite1 == null) ite1 = s1.polygon.gverts.next; else {
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ite1);
						fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
					}
				} else {
					zpp_nape.geom.ZPP_Collide.flowpoly.add(ite2);
					fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
				}
				var cnt = 1;
				if(zpp_nape.geom.ZPP_Collide.flowpoly.head == null) {
					var cx_cont = true;
					var cx_itei = s1.polygon.gverts.next;
					var u = cx_itei;
					var cx_itej = cx_itei.next;
					while(cx_itej != null) {
						var v = cx_itej;
						var min = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min;
							cx = u.x + (v.x - u.x) * T;
							cy = u.y + (v.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							cx_cont = false;
							break;
						}
						cx_itei = cx_itej;
						u = v;
						cx_itej = cx_itej.next;
					}
					if(cx_cont) do {
						cx_itej = s1.polygon.gverts.next;
						var v = cx_itej;
						var min = 2.0;
						var cx_cont1 = true;
						var cx_itei1 = s2.polygon.gverts.next;
						var a = cx_itei1;
						var cx_itej1 = cx_itei1.next;
						while(cx_itej1 != null) {
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
							cx_itei1 = cx_itej1;
							a = b;
							cx_itej1 = cx_itej1.next;
						}
						if(cx_cont1) do {
							cx_itej1 = s2.polygon.gverts.next;
							var b = cx_itej1;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t < min) {
									min = t;
									ite2 = cx_itei1;
								}
							}
						} while(false);
						if(min != 2.0) {
							var cx = 0.0;
							var cy = 0.0;
							var T = min;
							cx = u.x + (v.x - u.x) * T;
							cy = u.y + (v.y - u.y) * T;
							fst_vert = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
							zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert);
							poly1 = true;
							ite1 = cx_itei;
							break;
						}
					} while(false);
					cnt = 2;
				}
				while(true) if(poly1) {
					ite1 = ite1.next;
					ind1++;
					if(ite1 == null) {
						ite1 = s1.polygon.gverts.next;
						ind1 = 0;
					}
					if(!out1[ind1]) {
						var ex = ite1;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b = ite1;
						var u = ite2;
						var itm = ite2.next;
						if(itm == null) itm = s2.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite = itm;
						do {
							var v = cx_ite;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite2 = cx_ite;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite != beg_ite) {
							var v = cx_ite;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite2;
									indo = ind2;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite2 = cx_ite;
							ind2++;
							if(ind2 >= s2.polygon.edgeCnt) ind2 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u1 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s2.polygon.gverts.next;
						var v = itm2;
						var cx = 0.0;
						var cy = 0.0;
						var T = max;
						cx = u1.x + (v.x - u1.x) * T;
						cy = u1.y + (v.y - u1.y) * T;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx,cy,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx,cy,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite2 = itmo;
						ind2 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				} else {
					ite2 = ite2.next;
					ind2++;
					if(ite2 == null) {
						ite2 = s2.polygon.gverts.next;
						ind2 = 0;
					}
					if(!out2[ind2]) {
						var ex = ite2;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(ex.x,ex.y,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(ex);
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						cnt = 1;
					} else {
						var a = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						var b = ite2;
						var u = ite1;
						var itm = ite1.next;
						if(itm == null) itm = s1.polygon.gverts.next;
						var max = -1.0;
						var itmo = null;
						var indo = 0;
						var icnt = 0;
						var beg_ite = itm;
						var cx_ite = itm;
						do {
							var v = cx_ite;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite1;
									indo = ind1;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite1 = cx_ite;
							ind1++;
							if(ind1 >= s1.polygon.edgeCnt) ind1 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s1.polygon.gverts.next;
						} while(false);
						while(cx_ite != beg_ite) {
							var v = cx_ite;
							var t = 0.0;
							if((function($this) {
								var $r;
								var _sx = 0.0;
								var _sy = 0.0;
								{
									_sx = u.x - a.x;
									_sy = u.y - a.y;
								}
								var _vx = 0.0;
								var _vy = 0.0;
								{
									_vx = v.x - u.x;
									_vy = v.y - u.y;
								}
								var _qx = 0.0;
								var _qy = 0.0;
								{
									_qx = b.x - a.x;
									_qy = b.y - a.y;
								}
								var den = _vy * _qx - _vx * _qy;
								$r = den * den > nape.Config.epsilon * nape.Config.epsilon?(function($this) {
									var $r;
									den = 1 / den;
									var txx = (_qy * _sx - _qx * _sy) * den;
									$r = txx > nape.Config.epsilon && txx < 1 - nape.Config.epsilon?(function($this) {
										var $r;
										var sxx = (_vy * _sx - _vx * _sy) * den;
										$r = sxx > nape.Config.epsilon && sxx < 1 - nape.Config.epsilon?(function($this) {
											var $r;
											t = txx;
											$r = true;
											return $r;
										}($this)):false;
										return $r;
									}($this)):false;
									return $r;
								}($this)):false;
								return $r;
							}($this))) {
								if(t >= max) {
									itmo = ite1;
									indo = ind1;
									if(++icnt == cnt) {
										max = t;
										cx_ite = beg_ite;
										break;
									} else max = t;
								}
							}
							u = v;
							ite1 = cx_ite;
							ind1++;
							if(ind1 >= s1.polygon.edgeCnt) ind1 = 0;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s1.polygon.gverts.next;
						}
						if(itmo == null) break;
						var u1 = itmo;
						var itm2 = itmo.next;
						if(itm2 == null) itm2 = s1.polygon.gverts.next;
						var v = itm2;
						var cx = 0.0;
						var cy = 0.0;
						var T = max;
						cx = u1.x + (v.x - u1.x) * T;
						cy = u1.y + (v.y - u1.y) * T;
						if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(cx,cy,fst_vert.x,fst_vert.y) < nape.Config.epsilon) break;
						zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx,cy,null));
						if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
						ite1 = itmo;
						ind1 = indo;
						poly1 = !poly1;
						cnt = 2;
					}
				}
				$r = zpp_nape.geom.ZPP_Collide.flowpoly.head != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next != null && zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null?(function($this) {
					var $r;
					var area = 0.0;
					var COMx = 0.0;
					var COMy = 0.0;
					{
						COMx = 0;
						COMy = 0;
						area = 0.0;
						var cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
						var u = cx_ite.elt;
						cx_ite = cx_ite.next;
						var v = cx_ite.elt;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var w = cx_ite.elt;
							area += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							COMx += (v.x + w.x) * cf;
							COMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
						}
						cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
						var w = cx_ite.elt;
						area += v.x * (w.y - u.y);
						var cf = w.y * v.x - w.x * v.y;
						COMx += (v.x + w.x) * cf;
						COMy += (v.y + w.y) * cf;
						u = v;
						v = w;
						cx_ite = cx_ite.next;
						var w1 = cx_ite.elt;
						area += v.x * (w1.y - u.y);
						var cf = w1.y * v.x - w1.x * v.y;
						COMx += (v.x + w1.x) * cf;
						COMy += (v.y + w1.y) * cf;
						area *= 0.5;
						var ia = 1 / (6 * area);
						var t = ia;
						COMx *= t;
						COMy *= t;
					}
					{
						arb.overlap = -area;
						arb.centroidx = COMx;
						arb.centroidy = COMy;
						null;
					}
					$r = true;
					return $r;
				}($this)):false;
				return $r;
			}($this)):false;
			return $r;
		}($this)):false;
		return $r;
	}(this)):(function($this) {
		var $r;
		var inte = new Array();
		var total = true;
		var a0 = null, vi = null;
		var max = -1e+100;
		var cont = true;
		var vite = s2.polygon.gverts.next;
		var ind = 0;
		{
			var cx_ite = s2.polygon.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * s1.circle.worldCOMx + a.gnormy * s1.circle.worldCOMy;
				if(dist > a.gprojection + s1.circle.radius) {
					cont = false;
					break;
				} else if(dist + s1.circle.radius > a.gprojection + nape.Config.epsilon) {
					total = false;
					inte[ind] = true;
				}
				dist -= a.gprojection + s1.circle.radius;
				if(dist > max) {
					max = dist;
					a0 = a;
					vi = vite;
				}
				vite = vite.next;
				ind++;
				cx_ite = cx_ite.next;
			}
		}
		$r = cont?total?(function($this) {
			var $r;
			{
				arb.overlap = s1.circle.area;
				arb.centroidx = s1.circle.worldCOMx;
				arb.centroidy = s1.circle.worldCOMy;
				null;
			}
			$r = true;
			return $r;
		}($this)):(function($this) {
			var $r;
			var v0 = vi;
			var v1 = vi.next == null?s2.polygon.gverts.next:vi.next;
			var dt = s1.circle.worldCOMy * a0.gnormx - s1.circle.worldCOMx * a0.gnormy;
			$r = dt <= v0.y * a0.gnormx - v0.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				{
					px = v0.x - s1.circle.worldCOMx;
					py = v0.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):dt >= v1.y * a0.gnormx - v1.x * a0.gnormy?(function($this) {
				var $r;
				var minDist = s1.circle.radius;
				var px = 0.0;
				var py = 0.0;
				{
					px = v1.x - s1.circle.worldCOMx;
					py = v1.y - s1.circle.worldCOMy;
				}
				var distSqr = px * px + py * py;
				$r = distSqr <= minDist * minDist;
				return $r;
			}($this)):true?(function($this) {
				var $r;
				var ins = new Array();
				var ind1 = 0;
				var total1 = true;
				var vi1 = null;
				var vind = 0;
				{
					var cx_ite = s2.polygon.gverts.next;
					while(cx_ite != null) {
						var v = cx_ite;
						var dist = zpp_nape.geom.ZPP_VecMath.vec_dsq(v.x,v.y,s1.circle.worldCOMx,s1.circle.worldCOMy);
						if(!(ins[ind1] = dist <= s1.circle.radius * s1.circle.radius)) total1 = false; else {
							vind = ind1;
							vi1 = cx_ite;
						}
						ind1++;
						cx_ite = cx_ite.next;
					}
				}
				$r = total1?(function($this) {
					var $r;
					s2.polygon.validate_worldCOM();
					{
						arb.overlap = s2.polygon.area;
						arb.centroidx = s2.polygon.worldCOMx;
						arb.centroidy = s2.polygon.worldCOMy;
						null;
					}
					$r = true;
					return $r;
				}($this)):(function($this) {
					var $r;
					while(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
						var p = zpp_nape.geom.ZPP_Collide.flowpoly.pop_unsafe();
						if(!p._inuse) {
							var o = p;
							if(o.outer != null) {
								o.outer.zpp_inner = null;
								o.outer = null;
							}
							o._isimmutable = null;
							o._validate = null;
							o._invalidate = null;
							o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
							zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
						}
					}
					zpp_nape.geom.ZPP_Collide.flowsegs.clear();
					var fst_vert = null;
					var state = 1;
					if(vi1 == null) {
						vi1 = s2.polygon.gverts.next;
						state = 2;
					} else zpp_nape.geom.ZPP_Collide.flowpoly.add(fst_vert = vi1);
					while(state != 0) if(state == 1) {
						vi1 = vi1.next;
						if(vi1 == null) vi1 = s2.polygon.gverts.next;
						vind++;
						if(vind >= s2.polygon.edgeCnt) vind = 0;
						if(ins[vind]) {
							if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert.x,fst_vert.y,vi1.x,vi1.y) < nape.Config.epsilon) break;
							zpp_nape.geom.ZPP_Collide.flowpoly.add(vi1);
						} else {
							var u = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
							var v = vi1;
							var tval = (function($this) {
								var $r;
								var vx = 0.0;
								var vy = 0.0;
								{
									vx = v.x - u.x;
									vy = v.y - u.y;
								}
								var qx = 0.0;
								var qy = 0.0;
								{
									qx = u.x - s1.circle.worldCOMx;
									qy = u.y - s1.circle.worldCOMy;
								}
								var A = vx * vx + vy * vy;
								var B = 2 * (qx * vx + qy * vy);
								var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
								var D = Math.sqrt(B * B - 4 * A * C);
								A = 1 / (2 * A);
								var t = (-B - D) * A;
								$r = t < nape.Config.epsilon?(-B + D) * A:t;
								return $r;
							}($this));
							var cx = 0.0;
							var cy = 0.0;
							var T = tval;
							cx = u.x + (v.x - u.x) * T;
							cy = u.y + (v.y - u.y) * T;
							if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert.x,fst_vert.y,cx,cy) < nape.Config.epsilon) break;
							zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx,cy,null));
							state = 2;
						}
					} else if(state == 2) {
						var vi2 = vi1.next;
						if(vi2 == null) vi2 = s2.polygon.gverts.next;
						var u = vi1;
						state = 0;
						var beg_ite = vi2;
						var cx_ite = vi2;
						do {
							var v = cx_ite;
							var vind2 = vind + 1;
							if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
							if(inte[vind]) {
								if(ins[vind2]) {
									var tval = (function($this) {
										var $r;
										var vx = 0.0;
										var vy = 0.0;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx = 0.0;
										var qy = 0.0;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = Math.sqrt(B * B - 4 * A * C);
										A = 1 / (2 * A);
										var t = (-B - D) * A;
										$r = t < nape.Config.epsilon?(-B + D) * A:t;
										return $r;
									}($this));
									var cx = 0.0;
									var cy = 0.0;
									var T = tval;
									cx = u.x + (v.x - u.x) * T;
									cy = u.y + (v.y - u.y) * T;
									if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert.x,fst_vert.y,cx,cy) < nape.Config.epsilon) {
										state = 0;
										cx_ite = beg_ite;
										break;
									}
									var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
									zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
									state = 1;
									cx_ite = beg_ite;
									break;
								} else {
									var t0 = 0.0;
									var t1 = 0.0;
									var two = (function($this) {
										var $r;
										var vx = 0.0;
										var vy = 0.0;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx = 0.0;
										var qy = 0.0;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = B * B - 4 * A * C;
										$r = D * D < nape.Config.epsilon?(function($this) {
											var $r;
											if(D < 0) t0 = 10.0; else t0 = t1 = -B / (2 * A);
											$r = false;
											return $r;
										}($this)):(function($this) {
											var $r;
											D = Math.sqrt(D);
											A = 1 / (2 * A);
											t0 = (-B - D) * A;
											t1 = (-B + D) * A;
											$r = true;
											return $r;
										}($this));
										return $r;
									}($this));
									if(t0 < 1 - nape.Config.epsilon && t1 > nape.Config.epsilon) {
										var cx = 0.0;
										var cy = 0.0;
										var T = t0;
										cx = u.x + (v.x - u.x) * T;
										cy = u.y + (v.y - u.y) * T;
										if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert.x,fst_vert.y,cx,cy) < nape.Config.epsilon) {
											state = 0;
											cx_ite = beg_ite;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
										if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
											zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
											zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										}
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
										if(two) {
											var cx1 = 0.0;
											var cy1 = 0.0;
											var T = t1;
											cx1 = u.x + (v.x - u.x) * T;
											cy1 = u.y + (v.y - u.y) * T;
											zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null));
										}
									}
								}
							}
							u = v;
							vi1 = cx_ite;
							vind = vind2;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						} while(false);
						while(cx_ite != beg_ite) {
							var v = cx_ite;
							var vind2 = vind + 1;
							if(vind2 == s2.polygon.edgeCnt) vind2 = 0;
							if(inte[vind]) {
								if(ins[vind2]) {
									var tval = (function($this) {
										var $r;
										var vx = 0.0;
										var vy = 0.0;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx = 0.0;
										var qy = 0.0;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = Math.sqrt(B * B - 4 * A * C);
										A = 1 / (2 * A);
										var t = (-B - D) * A;
										$r = t < nape.Config.epsilon?(-B + D) * A:t;
										return $r;
									}($this));
									var cx = 0.0;
									var cy = 0.0;
									var T = tval;
									cx = u.x + (v.x - u.x) * T;
									cy = u.y + (v.y - u.y) * T;
									if(zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert.x,fst_vert.y,cx,cy) < nape.Config.epsilon) {
										state = 0;
										cx_ite = beg_ite;
										break;
									}
									var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
									zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
									zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
									state = 1;
									cx_ite = beg_ite;
									break;
								} else {
									var t0 = 0.0;
									var t1 = 0.0;
									var two = (function($this) {
										var $r;
										var vx = 0.0;
										var vy = 0.0;
										{
											vx = v.x - u.x;
											vy = v.y - u.y;
										}
										var qx = 0.0;
										var qy = 0.0;
										{
											qx = u.x - s1.circle.worldCOMx;
											qy = u.y - s1.circle.worldCOMy;
										}
										var A = vx * vx + vy * vy;
										var B = 2 * (qx * vx + qy * vy);
										var C = qx * qx + qy * qy - s1.circle.radius * s1.circle.radius;
										var D = B * B - 4 * A * C;
										$r = D * D < nape.Config.epsilon?(function($this) {
											var $r;
											if(D < 0) t0 = 10.0; else t0 = t1 = -B / (2 * A);
											$r = false;
											return $r;
										}($this)):(function($this) {
											var $r;
											D = Math.sqrt(D);
											A = 1 / (2 * A);
											t0 = (-B - D) * A;
											t1 = (-B + D) * A;
											$r = true;
											return $r;
										}($this));
										return $r;
									}($this));
									if(t0 < 1 - nape.Config.epsilon && t1 > nape.Config.epsilon) {
										var cx = 0.0;
										var cy = 0.0;
										var T = t0;
										cx = u.x + (v.x - u.x) * T;
										cy = u.y + (v.y - u.y) * T;
										if(fst_vert != null && zpp_nape.geom.ZPP_VecMath.vec_dsq(fst_vert.x,fst_vert.y,cx,cy) < nape.Config.epsilon) {
											state = 0;
											cx_ite = beg_ite;
											break;
										}
										var cp = zpp_nape.geom.ZPP_Vec2.get(cx,cy,null);
										if(!(zpp_nape.geom.ZPP_Collide.flowpoly.head == null)) {
											zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
											zpp_nape.geom.ZPP_Collide.flowsegs.add(cp);
										}
										zpp_nape.geom.ZPP_Collide.flowpoly.add(cp);
										if(fst_vert == null) fst_vert = zpp_nape.geom.ZPP_Collide.flowpoly.head.elt;
										if(two) {
											var cx1 = 0.0;
											var cy1 = 0.0;
											var T = t1;
											cx1 = u.x + (v.x - u.x) * T;
											cy1 = u.y + (v.y - u.y) * T;
											zpp_nape.geom.ZPP_Collide.flowpoly.add(zpp_nape.geom.ZPP_Vec2.get(cx1,cy1,null));
										}
									}
								}
							}
							u = v;
							vi1 = cx_ite;
							vind = vind2;
							cx_ite = cx_ite.next;
							if(cx_ite == null) cx_ite = s2.polygon.gverts.next;
						}
					}
					$r = zpp_nape.geom.ZPP_Collide.flowpoly.head == null?false:zpp_nape.geom.ZPP_Collide.flowpoly.head.next == null?(function($this) {
						var $r;
						var all = true;
						{
							var cx_ite = s2.polygon.edges.head;
							while(cx_ite != null) {
								var e = cx_ite.elt;
								var dist = e.gnormx * s1.circle.worldCOMx + e.gnormy * s1.circle.worldCOMy;
								if(dist > e.gprojection) {
									all = false;
									break;
								}
								cx_ite = cx_ite.next;
							}
						}
						$r = all?(function($this) {
							var $r;
							{
								arb.overlap = s1.circle.area;
								arb.centroidx = s1.circle.worldCOMx;
								arb.centroidy = s1.circle.worldCOMy;
								null;
							}
							$r = true;
							return $r;
						}($this)):false;
						return $r;
					}($this)):(function($this) {
						var $r;
						var COMx = 0;
						var COMy = 0;
						var area = 0.0;
						if(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.next != null) {
							var parea = 0.0;
							var pCOMx = 0.0;
							var pCOMy = 0.0;
							pCOMx = 0;
							pCOMy = 0;
							parea = 0.0;
							var cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
							var u = cx_ite.elt;
							cx_ite = cx_ite.next;
							var v = cx_ite.elt;
							cx_ite = cx_ite.next;
							while(cx_ite != null) {
								var w = cx_ite.elt;
								parea += v.x * (w.y - u.y);
								var cf = w.y * v.x - w.x * v.y;
								pCOMx += (v.x + w.x) * cf;
								pCOMy += (v.y + w.y) * cf;
								u = v;
								v = w;
								cx_ite = cx_ite.next;
							}
							cx_ite = zpp_nape.geom.ZPP_Collide.flowpoly.head;
							var w = cx_ite.elt;
							parea += v.x * (w.y - u.y);
							var cf = w.y * v.x - w.x * v.y;
							pCOMx += (v.x + w.x) * cf;
							pCOMy += (v.y + w.y) * cf;
							u = v;
							v = w;
							cx_ite = cx_ite.next;
							var w1 = cx_ite.elt;
							parea += v.x * (w1.y - u.y);
							var cf = w1.y * v.x - w1.x * v.y;
							pCOMx += (v.x + w1.x) * cf;
							pCOMy += (v.y + w1.y) * cf;
							parea *= 0.5;
							var ia = 1 / (6 * parea);
							var t = ia;
							pCOMx *= t;
							pCOMy *= t;
							var t = -parea;
							COMx += pCOMx * t;
							COMy += pCOMy * t;
							area -= parea;
						} else {
							zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.elt);
							zpp_nape.geom.ZPP_Collide.flowsegs.add(zpp_nape.geom.ZPP_Collide.flowpoly.head.next.elt);
						}
						while(!(zpp_nape.geom.ZPP_Collide.flowsegs.head == null)) {
							var u = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
							var v = zpp_nape.geom.ZPP_Collide.flowsegs.pop_unsafe();
							var dx = 0.0;
							var dy = 0.0;
							dx = v.x - u.x;
							dy = v.y - u.y;
							var nx = 0.0;
							var ny = 0.0;
							nx = dx;
							ny = dy;
							var d = nx * nx + ny * ny;
							var imag = 1.0 / Math.sqrt(d);
							var t = imag;
							nx *= t;
							ny *= t;
							var t = nx;
							nx = -ny;
							ny = t;
							var cx = 0.0;
							var cy = 0.0;
							cx = u.x + v.x;
							cy = u.y + v.y;
							var t = 0.5;
							cx *= t;
							cy *= t;
							var t = 1.0;
							cx -= s1.circle.worldCOMx * t;
							cy -= s1.circle.worldCOMy * t;
							var xd = nx * cx + ny * cy;
							var carea = 0.0;
							var ccom = 0.0;
							var X = xd;
							var cos = X / s1.circle.radius;
							var sin = Math.sqrt(1 - cos * cos);
							var theta = Math.acos(cos);
							carea = s1.circle.radius * (s1.circle.radius * theta - X * sin);
							ccom = 2 / 3 * s1.circle.radius * sin * sin * sin / (theta - cos * sin);
							cx = s1.circle.worldCOMx;
							cy = s1.circle.worldCOMy;
							var t = ccom;
							cx += nx * t;
							cy += ny * t;
							var t = carea;
							COMx += cx * t;
							COMy += cy * t;
							area += carea;
						}
						{
							var t = 1.0 / area;
							COMx *= t;
							COMy *= t;
						}
						{
							arb.overlap = area;
							arb.centroidx = COMx;
							arb.centroidy = COMy;
							null;
						}
						$r = true;
						return $r;
					}($this));
					return $r;
				}($this));
				return $r;
			}($this)):false;
			return $r;
		}($this)):false;
		return $r;
	}(this)); else return (function($this) {
		var $r;
		var c1 = s1.circle;
		var c2 = s2.circle;
		var deltax = 0.0;
		var deltay = 0.0;
		{
			deltax = c2.worldCOMx - c1.worldCOMx;
			deltay = c2.worldCOMy - c1.worldCOMy;
		}
		var cr = c1.radius + c2.radius;
		var ds = deltax * deltax + deltay * deltay;
		$r = ds > cr * cr?false:ds < nape.Config.epsilon * nape.Config.epsilon?(function($this) {
			var $r;
			if(c1.radius < c2.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				arb.overlap = c2.area;
				arb.centroidx = c2.worldCOMx;
				arb.centroidy = c2.worldCOMy;
				null;
			}
			$r = true;
			return $r;
		}($this)):(function($this) {
			var $r;
			var d = Math.sqrt(ds);
			var id = 1 / d;
			var x1 = 0.5 * (d - (c2.radius * c2.radius - c1.radius * c1.radius) * id);
			if(x1 <= -c1.radius) {
				arb.overlap = c1.area;
				arb.centroidx = c1.worldCOMx;
				arb.centroidy = c1.worldCOMy;
				null;
			} else {
				var x2 = d - x1;
				if(x2 <= -c2.radius) {
					arb.overlap = c2.area;
					arb.centroidx = c2.worldCOMx;
					arb.centroidy = c2.worldCOMy;
					null;
				} else {
					var area1 = 0.0;
					var y1 = 0.0;
					var area2 = 0.0;
					var y2 = 0.0;
					var X = x1;
					var cos = X / c1.radius;
					var sin = Math.sqrt(1 - cos * cos);
					var theta = Math.acos(cos);
					area1 = c1.radius * (c1.radius * theta - X * sin);
					y1 = 2 / 3 * c1.radius * sin * sin * sin / (theta - cos * sin);
					var X = x2;
					var cos = X / c2.radius;
					var sin = Math.sqrt(1 - cos * cos);
					var theta = Math.acos(cos);
					area2 = c2.radius * (c2.radius * theta - X * sin);
					y2 = 2 / 3 * c2.radius * sin * sin * sin / (theta - cos * sin);
					var tarea = area1 + area2;
					var ya = (y1 * area1 + (d - y2) * area2) / tarea * id;
					arb.overlap = tarea;
					arb.centroidx = c1.worldCOMx + deltax * ya;
					arb.centroidy = c1.worldCOMy + deltay * ya;
					null;
				}
			}
			$r = true;
			return $r;
		}($this));
		return $r;
	}(this));
}
zpp_nape.geom.ZPP_Convex = function() { }
zpp_nape.geom.ZPP_Convex.__name__ = ["zpp_nape","geom","ZPP_Convex"];
zpp_nape.geom.ZPP_Convex.isinner = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = a.x - b.x;
	uy = a.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	return vy * ux - vx * uy >= 0;
}
zpp_nape.geom.ZPP_Convex.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			nite = nite.next;
		} while(nite != L);
	}
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			var pright = p.prev;
			var ppre = null;
			var cx_ite = p.diagonals.head;
			while(cx_ite != null) {
				var pdiag = cx_ite.elt;
				var pleft = cx_ite.next == null?p.next:cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Convex.isinner(pleft,p,pright)) {
					ppre = cx_ite;
					pright = pdiag;
					cx_ite = cx_ite.next;
					continue;
				}
				var removable = true;
				var q = pdiag;
				var qright = q.prev;
				var qpre = null;
				var cx_ite1 = q.diagonals.head;
				while(cx_ite1 != null) {
					var qdiag = cx_ite1.elt;
					if(qdiag == p) {
						var qleft = cx_ite1.next == null?q.next:cx_ite1.next.elt;
						removable = zpp_nape.geom.ZPP_Convex.isinner(qleft,q,qright);
						break;
					}
					qright = qdiag;
					qpre = cx_ite1;
					cx_ite1 = cx_ite1.next;
				}
				if(removable) {
					cx_ite = p.diagonals.erase(ppre);
					q.diagonals.erase(qpre);
					continue;
				}
				pright = pdiag;
				ppre = cx_ite;
				cx_ite = cx_ite.next;
			}
			nite = nite.next;
		} while(nite != L);
	}
}
zpp_nape.geom.ZPP_ConvexRayResult = function() {
	this.toiDistance = 0.0;
	this.next = null;
	this.inner = false;
	this.ray = null;
	this.position = null;
	this.convex = null;
	this.shape = null;
	this.normal = null;
};
zpp_nape.geom.ZPP_ConvexRayResult.__name__ = ["zpp_nape","geom","ZPP_ConvexRayResult"];
zpp_nape.geom.ZPP_ConvexRayResult.getRay = function(normal,time,inner,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.rayPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.RayResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.ray = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.ray;
		zpp_nape.geom.ZPP_ConvexRayResult.rayPool = zpp_nape.geom.ZPP_ConvexRayResult.rayPool.next;
		ret.zpp_inner.next = null;
	}
	var zinner = ret.zpp_inner;
	zinner.normal = normal;
	normal.zpp_inner._immutable = true;
	zinner.toiDistance = time;
	zinner.inner = inner;
	zinner.shape = shape;
	return ret;
}
zpp_nape.geom.ZPP_ConvexRayResult.getConvex = function(normal,position,toiDistance,shape) {
	var ret;
	if(zpp_nape.geom.ZPP_ConvexRayResult.convexPool == null) {
		zpp_nape.geom.ZPP_ConvexRayResult.internal = true;
		ret = new nape.geom.ConvexResult();
		ret.zpp_inner = new zpp_nape.geom.ZPP_ConvexRayResult();
		ret.zpp_inner.convex = ret;
		zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
	} else {
		ret = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.convex;
		zpp_nape.geom.ZPP_ConvexRayResult.convexPool = zpp_nape.geom.ZPP_ConvexRayResult.convexPool.next;
		ret.zpp_inner.next = null;
	}
	var inner = ret.zpp_inner;
	inner.normal = normal;
	inner.position = position;
	normal.zpp_inner._immutable = true;
	position.zpp_inner._immutable = true;
	inner.toiDistance = toiDistance;
	inner.shape = shape;
	return ret;
}
zpp_nape.geom.ZPP_ConvexRayResult.prototype = {
	free: function() {
		this.normal.zpp_inner._immutable = false;
		this.normal.dispose();
		if(this.position != null) {
			this.position.zpp_inner._immutable = false;
			this.position.dispose();
		}
		this.shape = null;
		this.toiDistance = 0.0;
		if(this.convex != null) {
			this.next = zpp_nape.geom.ZPP_ConvexRayResult.convexPool;
			zpp_nape.geom.ZPP_ConvexRayResult.convexPool = this;
		} else {
			this.next = zpp_nape.geom.ZPP_ConvexRayResult.rayPool;
			zpp_nape.geom.ZPP_ConvexRayResult.rayPool = this;
		}
	}
	,disposed: function() {
		if(this.next != null) throw "Error: This object has been disposed of and cannot be used";
	}
	,__class__: zpp_nape.geom.ZPP_ConvexRayResult
}
zpp_nape.geom.ZPP_CutVert = function() {
	this.used = false;
	this.rank = 0;
	this.parent = null;
	this.positive = false;
	this.value = 0.0;
	this.vert = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.next = null;
	this.prev = null;
};
zpp_nape.geom.ZPP_CutVert.__name__ = ["zpp_nape","geom","ZPP_CutVert"];
zpp_nape.geom.ZPP_CutVert.path = function(poly) {
	var ret;
	if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutVert(); else {
		ret = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vert = poly;
	ret.parent = ret;
	ret.rank = 0;
	ret.used = false;
	return ret;
}
zpp_nape.geom.ZPP_CutVert.prototype = {
	free: function() {
		this.vert = null;
		this.parent = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_CutVert
}
zpp_nape.geom.ZPP_CutInt = function() {
	this.path1 = null;
	this.start = null;
	this.end = null;
	this.path0 = null;
	this.vertex = false;
	this.virtualint = false;
	this.time = 0.0;
	this.next = null;
};
zpp_nape.geom.ZPP_CutInt.__name__ = ["zpp_nape","geom","ZPP_CutInt"];
zpp_nape.geom.ZPP_CutInt.get = function(time,end,start,path0,path1,virtualint,vertex) {
	if(vertex == null) vertex = false;
	if(virtualint == null) virtualint = false;
	var ret;
	if(zpp_nape.geom.ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.geom.ZPP_CutInt(); else {
		ret = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.virtualint = virtualint;
	ret.end = end;
	ret.start = start;
	ret.path0 = path0;
	ret.path1 = path1;
	ret.time = time;
	ret.vertex = vertex;
	return ret;
}
zpp_nape.geom.ZPP_CutInt.prototype = {
	free: function() {
		this.end = this.start = null;
		this.path0 = this.path1 = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_CutInt
}
zpp_nape.geom.ZPP_Cutter = function() { }
zpp_nape.geom.ZPP_Cutter.__name__ = ["zpp_nape","geom","ZPP_Cutter"];
zpp_nape.geom.ZPP_Cutter.run = function(P,_start,_end,bstart,bend,output) {
	var px = 0.0;
	var py = 0.0;
	px = (function($this) {
		var $r;
		if(_start != null && _start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_start.zpp_inner.validate();
		$r = _start.zpp_inner.x;
		return $r;
	}(this));
	py = (function($this) {
		var $r;
		if(_start != null && _start.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_start.zpp_inner.validate();
		$r = _start.zpp_inner.y;
		return $r;
	}(this));
	var dx = 0.0;
	var dy = 0.0;
	dx = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.x;
		return $r;
	}(this)) - px;
	dy = (function($this) {
		var $r;
		if(_end != null && _end.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		_end.zpp_inner.validate();
		$r = _end.zpp_inner.y;
		return $r;
	}(this)) - py;
	var min = bstart?0:Math.NEGATIVE_INFINITY;
	var max = bend?1:Math.POSITIVE_INFINITY;
	var crx = -(py * dx - px * dy);
	var verts = null;
	var clashes = false;
	var p = P;
	do {
		var c;
		if(zpp_nape.geom.ZPP_CutVert.zpp_pool == null) c = new zpp_nape.geom.ZPP_CutVert(); else {
			c = zpp_nape.geom.ZPP_CutVert.zpp_pool;
			zpp_nape.geom.ZPP_CutVert.zpp_pool = c.next;
			c.next = null;
		}
		null;
		c.vert = p;
		c.posx = c.vert.x;
		c.posy = c.vert.y;
		c.value = c.posy * dx - c.posx * dy + crx;
		c.positive = c.value > 0;
		if(c.value == 0) clashes = true;
		verts = (function($this) {
			var $r;
			var obj = c;
			if(verts == null) verts = obj.prev = obj.next = obj; else {
				obj.prev = verts;
				obj.next = verts.next;
				verts.next.prev = obj;
				verts.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		p = p.next;
	} while(p != P);
	if(clashes) {
		var start = null;
		var F = verts;
		var L = verts;
		if(F != null) {
			var nite = F;
			do {
				var p1 = nite;
				if(p1.value != 0.0) {
					start = p1;
					break;
				}
				nite = nite.next;
			} while(nite != L);
		}
		var nx = 0.0;
		var ny = 0.0;
		nx = dx;
		ny = dy;
		var d = nx * nx + ny * ny;
		var imag = 1.0 / Math.sqrt(d);
		var t = imag;
		nx *= t;
		ny *= t;
		var t = nx;
		nx = -ny;
		ny = t;
		var pre = null;
		var p1 = start;
		do {
			if(p1.value != 0.0 && (pre == null || p1 == pre.next)) {
				pre = p1;
				p1 = p1.next;
				continue;
			}
			var prod = pre.value * p1.value;
			if(prod == 0) {
				p1 = p1.next;
				continue;
			}
			var a = pre.next;
			var positive = prod > 0?pre.positive:(function($this) {
				var $r;
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				{
					midx = a.posx + b.posx;
					midy = a.posy + b.posy;
				}
				{
					var t = 0.5;
					midx *= t;
					midy *= t;
				}
				$r = (function($this) {
					var $r;
					var x = midx + nx * 1e-8;
					var y = midy + ny * 1e-8;
					var ret = false;
					{
						var F = P;
						var L = P;
						if(F != null) {
							var nite = F;
							do {
								var p2 = nite;
								var q = p2.prev;
								if((p2.y < y && q.y >= y || q.y < y && p2.y >= y) && (p2.x <= x || q.x <= x)) {
									if(p2.x + (y - p2.y) / (q.y - p2.y) * (q.x - p2.x) < x) ret = !ret;
								}
								nite = nite.next;
							} while(nite != L);
						}
					}
					$r = ret;
					return $r;
				}($this));
				return $r;
			}(this));
			var F = a;
			var L = p1;
			if(F != null) {
				var nite = F;
				do {
					var q = nite;
					q.positive = positive;
					nite = nite.next;
				} while(nite != L);
			}
			pre = p1;
			p1 = p1.next;
		} while(p1 != start);
		do {
			if(p1.value != 0.0 && (pre == null || p1 == pre.next)) {
				pre = p1;
				p1 = p1.next;
				continue;
			}
			var prod = pre.value * p1.value;
			if(prod == 0) {
				p1 = p1.next;
				continue;
			}
			var a = pre.next;
			var positive = prod > 0?pre.positive:(function($this) {
				var $r;
				var b = a.next;
				var midx = 0.0;
				var midy = 0.0;
				{
					midx = a.posx + b.posx;
					midy = a.posy + b.posy;
				}
				{
					var t = 0.5;
					midx *= t;
					midy *= t;
				}
				$r = (function($this) {
					var $r;
					var x = midx + nx * 1e-8;
					var y = midy + ny * 1e-8;
					var ret = false;
					{
						var F = P;
						var L = P;
						if(F != null) {
							var nite = F;
							do {
								var p2 = nite;
								var q = p2.prev;
								if((p2.y < y && q.y >= y || q.y < y && p2.y >= y) && (p2.x <= x || q.x <= x)) {
									if(p2.x + (y - p2.y) / (q.y - p2.y) * (q.x - p2.x) < x) ret = !ret;
								}
								nite = nite.next;
							} while(nite != L);
						}
					}
					$r = ret;
					return $r;
				}($this));
				return $r;
			}(this));
			var F = a;
			var L = p1;
			if(F != null) {
				var nite = F;
				do {
					var q = nite;
					q.positive = positive;
					nite = nite.next;
				} while(nite != L);
			}
			pre = p1;
			p1 = p1.next;
		} while(false);
	}
	if(zpp_nape.geom.ZPP_Cutter.ints == null) zpp_nape.geom.ZPP_Cutter.ints = new zpp_nape.util.ZNPList_ZPP_CutInt();
	if(zpp_nape.geom.ZPP_Cutter.paths == null) zpp_nape.geom.ZPP_Cutter.paths = new zpp_nape.util.ZNPList_ZPP_CutVert();
	var start = null;
	var obj = zpp_nape.geom.ZPP_GeomVert.get(verts.posx,verts.posy);
	if(start == null) start = obj.prev = obj.next = obj; else {
		obj.next = start;
		obj.prev = start.prev;
		start.prev.next = obj;
		start.prev = obj;
	}
	obj;
	var origin = start;
	var firstpath = zpp_nape.geom.ZPP_CutVert.path(start);
	zpp_nape.geom.ZPP_Cutter.paths.add(firstpath);
	var i = verts;
	do {
		var j = i.next;
		var pj = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
		if(i.positive == j.positive) {
			var obj = pj;
			if(start == null) start = obj.prev = obj.next = obj; else {
				obj.next = start;
				obj.prev = start.prev;
				start.prev.next = obj;
				start.prev = obj;
			}
			obj;
		} else {
			var ux = 0.0;
			var uy = 0.0;
			ux = j.posx - i.posx;
			uy = j.posy - i.posy;
			var denom = dy * ux - dx * uy;
			denom = 1 / denom;
			var pax = 0.0;
			var pay = 0.0;
			pax = px - i.posx;
			pay = py - i.posy;
			var s = (uy * pax - ux * pay) * denom;
			if(s < min || s > max) {
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,null,null,null,null,true,null));
				var obj = pj;
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
			} else if(i.value == 0) {
				var endof = start.prev;
				start = null;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(endof.x,endof.y);
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var obj = pj;
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var prepath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start));
				var postpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof,start,prepath,postpath,true,null));
			} else if(j.value == 0) {
				var obj = pj;
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var endof = start.prev;
				start = null;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(j.posx,j.posy);
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var prepath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start));
				var postpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof,start,prepath,postpath,true,null));
			} else {
				var t = (dy * pax - dx * pay) * denom;
				var qx = 0.0;
				var qy = 0.0;
				qx = i.posx;
				qy = i.posy;
				var t1 = t;
				qx += ux * t1;
				qy += uy * t1;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var endof = start.prev;
				start = null;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(qx,qy);
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var obj = pj;
				if(start == null) start = obj.prev = obj.next = obj; else {
					obj.next = start;
					obj.prev = start.prev;
					start.prev.next = obj;
					start.prev = obj;
				}
				obj;
				var prepath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.paths.add(zpp_nape.geom.ZPP_CutVert.path(start));
				var postpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
				zpp_nape.geom.ZPP_Cutter.ints.add(zpp_nape.geom.ZPP_CutInt.get(s,endof,start,prepath,postpath,false,null));
			}
		}
		i = i.next;
	} while(i != verts);
	var endof = start.prev;
	endof.next.prev = origin.prev;
	origin.prev.next = endof.next;
	endof.next = origin;
	origin.prev = endof;
	var lastpath = zpp_nape.geom.ZPP_Cutter.paths.head.elt;
	var xr = firstpath == firstpath.parent?firstpath:(function($this) {
		var $r;
		var obj = firstpath;
		var stack = null;
		while(obj != obj.parent) {
			var nxt = obj.parent;
			obj.parent = stack;
			stack = obj;
			obj = nxt;
		}
		while(stack != null) {
			var nxt = stack.parent;
			stack.parent = obj;
			stack = nxt;
		}
		$r = obj;
		return $r;
	}(this));
	var yr = lastpath == lastpath.parent?lastpath:(function($this) {
		var $r;
		var obj = lastpath;
		var stack = null;
		while(obj != obj.parent) {
			var nxt = obj.parent;
			obj.parent = stack;
			stack = obj;
			obj = nxt;
		}
		while(stack != null) {
			var nxt = stack.parent;
			stack.parent = obj;
			stack = nxt;
		}
		$r = obj;
		return $r;
	}(this));
	if(xr != yr) {
		if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
			yr.parent = xr;
			xr.rank++;
		}
	}
	var xxlist = zpp_nape.geom.ZPP_Cutter.ints;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges, leftSize, rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(left.elt.time < right.elt.time) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.ints.head == null)) {
		var i1 = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		var j = zpp_nape.geom.ZPP_Cutter.ints.pop_unsafe();
		if(!i1.virtualint && !j.virtualint) {
			i1.end.next.prev = j.start.prev;
			j.start.prev.next = i1.end.next;
			i1.end.next = j.start;
			j.start.prev = i1.end;
			j.end.next.prev = i1.start.prev;
			i1.start.prev.next = j.end.next;
			j.end.next = i1.start;
			i1.start.prev = j.end;
			var xr = i1.path0 == i1.path0.parent?i1.path0:(function($this) {
				var $r;
				var obj = i1.path0;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = j.path1 == j.path1.parent?j.path1:(function($this) {
				var $r;
				var obj = j.path1;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
			var xr = i1.path1 == i1.path1.parent?i1.path1:(function($this) {
				var $r;
				var obj = i1.path1;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = j.path0 == j.path0.parent?j.path0:(function($this) {
				var $r;
				var obj = j.path0;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		} else if(i1.virtualint && !j.virtualint) {
			j.end = j.end != null && j.end.prev == j.end?(function($this) {
				var $r;
				j.end.next = j.end.prev = null;
				{
					var o = j.end;
					if(o.wrap != null) {
						o.wrap.zpp_inner._inuse = false;
						o.wrap.dispose();
						o.wrap = null;
					}
					o.prev = o.next = null;
					o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
					zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				}
				$r = null;
				return $r;
			}(this)):(function($this) {
				var $r;
				var retnodes = j.end.prev;
				j.end.prev.next = j.end.next;
				j.end.next.prev = j.end.prev;
				j.end.next = j.end.prev = null;
				{
					var o = j.end;
					if(o.wrap != null) {
						o.wrap.zpp_inner._inuse = false;
						o.wrap.dispose();
						o.wrap = null;
					}
					o.prev = o.next = null;
					o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
					zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				}
				j.end = null;
				$r = retnodes;
				return $r;
			}(this));
			if(!j.vertex) {
				if(j.end != j.path0.vert) {
					j.start.x = j.end.x;
					j.start.y = j.end.y;
					j.end = j.end != null && j.end.prev == j.end?(function($this) {
						var $r;
						j.end.next = j.end.prev = null;
						{
							var o = j.end;
							if(o.wrap != null) {
								o.wrap.zpp_inner._inuse = false;
								o.wrap.dispose();
								o.wrap = null;
							}
							o.prev = o.next = null;
							o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
							zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
						}
						$r = null;
						return $r;
					}(this)):(function($this) {
						var $r;
						var retnodes = j.end.prev;
						j.end.prev.next = j.end.next;
						j.end.next.prev = j.end.prev;
						j.end.next = j.end.prev = null;
						{
							var o = j.end;
							if(o.wrap != null) {
								o.wrap.zpp_inner._inuse = false;
								o.wrap.dispose();
								o.wrap = null;
							}
							o.prev = o.next = null;
							o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
							zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
						}
						j.end = null;
						$r = retnodes;
						return $r;
					}(this));
				} else {
					var n = j.start.next;
					j.start.x = n.x;
					j.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o = n;
						if(o.wrap != null) {
							o.wrap.zpp_inner._inuse = false;
							o.wrap.dispose();
							o.wrap = null;
						}
						o.prev = o.next = null;
						o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o = n;
						if(o.wrap != null) {
							o.wrap.zpp_inner._inuse = false;
							o.wrap.dispose();
							o.wrap = null;
						}
						o.prev = o.next = null;
						o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
					}
				}
			}
			j.end.next.prev = j.start.prev;
			j.start.prev.next = j.end.next;
			j.end.next = j.start;
			j.start.prev = j.end;
			var xr = j.path0 == j.path0.parent?j.path0:(function($this) {
				var $r;
				var obj = j.path0;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = j.path1 == j.path1.parent?j.path1:(function($this) {
				var $r;
				var obj = j.path1;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		} else if(j.virtualint && !i1.virtualint) {
			i1.end = i1.end != null && i1.end.prev == i1.end?(function($this) {
				var $r;
				i1.end.next = i1.end.prev = null;
				{
					var o = i1.end;
					if(o.wrap != null) {
						o.wrap.zpp_inner._inuse = false;
						o.wrap.dispose();
						o.wrap = null;
					}
					o.prev = o.next = null;
					o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
					zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				}
				$r = null;
				return $r;
			}(this)):(function($this) {
				var $r;
				var retnodes = i1.end.prev;
				i1.end.prev.next = i1.end.next;
				i1.end.next.prev = i1.end.prev;
				i1.end.next = i1.end.prev = null;
				{
					var o = i1.end;
					if(o.wrap != null) {
						o.wrap.zpp_inner._inuse = false;
						o.wrap.dispose();
						o.wrap = null;
					}
					o.prev = o.next = null;
					o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
					zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
				}
				i1.end = null;
				$r = retnodes;
				return $r;
			}(this));
			if(!i1.vertex) {
				if(i1.end != i1.path0.vert) {
					i1.start.x = i1.end.x;
					i1.start.y = i1.end.y;
					i1.end = i1.end != null && i1.end.prev == i1.end?(function($this) {
						var $r;
						i1.end.next = i1.end.prev = null;
						{
							var o = i1.end;
							if(o.wrap != null) {
								o.wrap.zpp_inner._inuse = false;
								o.wrap.dispose();
								o.wrap = null;
							}
							o.prev = o.next = null;
							o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
							zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
						}
						$r = null;
						return $r;
					}(this)):(function($this) {
						var $r;
						var retnodes = i1.end.prev;
						i1.end.prev.next = i1.end.next;
						i1.end.next.prev = i1.end.prev;
						i1.end.next = i1.end.prev = null;
						{
							var o = i1.end;
							if(o.wrap != null) {
								o.wrap.zpp_inner._inuse = false;
								o.wrap.dispose();
								o.wrap = null;
							}
							o.prev = o.next = null;
							o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
							zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
						}
						i1.end = null;
						$r = retnodes;
						return $r;
					}(this));
				} else {
					var n = i1.start.next;
					i1.start.x = n.x;
					i1.start.y = n.y;
					if(n != null && n.prev == n) {
						n.next = n.prev = null;
						var o = n;
						if(o.wrap != null) {
							o.wrap.zpp_inner._inuse = false;
							o.wrap.dispose();
							o.wrap = null;
						}
						o.prev = o.next = null;
						o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
						n = null;
					} else {
						n.prev.next = n.next;
						n.next.prev = n.prev;
						n.next = n.prev = null;
						var o = n;
						if(o.wrap != null) {
							o.wrap.zpp_inner._inuse = false;
							o.wrap.dispose();
							o.wrap = null;
						}
						o.prev = o.next = null;
						o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
						zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
					}
				}
			}
			i1.end.next.prev = i1.start.prev;
			i1.start.prev.next = i1.end.next;
			i1.end.next = i1.start;
			i1.start.prev = i1.end;
			var xr = i1.path0 == i1.path0.parent?i1.path0:(function($this) {
				var $r;
				var obj = i1.path0;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			var yr = i1.path1 == i1.path1.parent?i1.path1:(function($this) {
				var $r;
				var obj = i1.path1;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(xr != yr) {
				if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
					yr.parent = xr;
					xr.rank++;
				}
			}
		}
		var o = i1;
		o.end = o.start = null;
		o.path0 = o.path1 = null;
		o.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o;
		var o = j;
		o.end = o.start = null;
		o.path0 = o.path1 = null;
		o.next = zpp_nape.geom.ZPP_CutInt.zpp_pool;
		zpp_nape.geom.ZPP_CutInt.zpp_pool = o;
	}
	var ret = output == null?new nape.geom.GeomPolyList():output;
	var cx_ite = zpp_nape.geom.ZPP_Cutter.paths.head;
	while(cx_ite != null) {
		var p1 = cx_ite.elt;
		var poly = p1 == p1.parent?p1:(function($this) {
			var $r;
			var obj = p1;
			var stack = null;
			while(obj != obj.parent) {
				var nxt = obj.parent;
				obj.parent = stack;
				stack = obj;
				obj = nxt;
			}
			while(stack != null) {
				var nxt = stack.parent;
				stack.parent = obj;
				stack = nxt;
			}
			$r = obj;
			return $r;
		}(this));
		if(poly.used) {
			cx_ite = cx_ite.next;
			continue;
		}
		poly.used = true;
		var p2 = poly.vert;
		var skip = true;
		while(poly.vert != null && (skip || p2 != poly.vert)) {
			skip = false;
			if(p2.x == p2.next.x && p2.y == p2.next.y) {
				if(p2 == poly.vert) {
					poly.vert = p2.next == p2?null:p2.next;
					skip = true;
				}
				p2 = p2 != null && p2.prev == p2?(function($this) {
					var $r;
					p2.next = p2.prev = null;
					$r = p2 = null;
					return $r;
				}(this)):(function($this) {
					var $r;
					var retnodes = p2.next;
					p2.prev.next = p2.next;
					p2.next.prev = p2.prev;
					p2.next = p2.prev = null;
					p2 = null;
					$r = retnodes;
					return $r;
				}(this));
			} else p2 = p2.next;
		}
		if(poly.vert != null) {
			var gp = nape.geom.GeomPoly.get();
			gp.zpp_inner.vertices = poly.vert;
			if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
		}
		cx_ite = cx_ite.next;
	}
	while(!(zpp_nape.geom.ZPP_Cutter.paths.head == null)) {
		var p1 = zpp_nape.geom.ZPP_Cutter.paths.pop_unsafe();
		var o = p1;
		o.vert = null;
		o.parent = null;
		o.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
		zpp_nape.geom.ZPP_CutVert.zpp_pool = o;
	}
	while(!(verts == null)) verts = verts != null && verts.prev == verts?(function($this) {
		var $r;
		verts.next = verts.prev = null;
		{
			var o = verts;
			o.vert = null;
			o.parent = null;
			o.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
			zpp_nape.geom.ZPP_CutVert.zpp_pool = o;
		}
		$r = verts = null;
		return $r;
	}(this)):(function($this) {
		var $r;
		var retnodes = verts.next;
		verts.prev.next = verts.next;
		verts.next.prev = verts.prev;
		verts.next = verts.prev = null;
		{
			var o = verts;
			o.vert = null;
			o.parent = null;
			o.next = zpp_nape.geom.ZPP_CutVert.zpp_pool;
			zpp_nape.geom.ZPP_CutVert.zpp_pool = o;
		}
		verts = null;
		$r = retnodes;
		return $r;
	}(this));
	return ret;
}
zpp_nape.geom.ZPP_Geom = function() { }
zpp_nape.geom.ZPP_Geom.__name__ = ["zpp_nape","geom","ZPP_Geom"];
zpp_nape.geom.ZPP_Geom.validateShape = function(s) {
	if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
	if(s.zip_aabb) {
		if(s.body != null) {
			s.zip_aabb = false;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
		}
	}
	if(s.zip_worldCOM) {
		if(s.body != null) {
			s.zip_worldCOM = false;
			if(s.zip_localCOM) {
				s.zip_localCOM = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
				if(s.wrap_localCOM != null) {
					s.wrap_localCOM.zpp_inner.x = s.localCOMx;
					s.wrap_localCOM.zpp_inner.y = s.localCOMy;
				}
			}
			s.body.validate_axis();
			s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
			s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
		}
	}
}
zpp_nape.geom.ZPP_GeomVert = function() {
	this.forced = false;
	this.wrap = null;
	this.next = null;
	this.prev = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_nape.geom.ZPP_GeomVert.__name__ = ["zpp_nape","geom","ZPP_GeomVert"];
zpp_nape.geom.ZPP_GeomVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVert(); else {
		ret = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.forced = false;
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_GeomVert.prototype = {
	getwrap: function() {
		this.wrap.zpp_inner.x = this.x;
		this.wrap.zpp_inner.y = this.y;
	}
	,modwrap: function(n) {
		this.x = n.x;
		this.y = n.y;
	}
	,wrapper: function() {
		if(this.wrap == null) {
			this.wrap = nape.geom.Vec2.get(this.x,this.y,null);
			this.wrap.zpp_inner._inuse = true;
			this.wrap.zpp_inner._invalidate = $bind(this,this.modwrap);
			this.wrap.zpp_inner._validate = $bind(this,this.getwrap);
		}
		return this.wrap;
	}
	,alloc: function() {
		this.forced = false;
	}
	,free: function() {
		if(this.wrap != null) {
			this.wrap.zpp_inner._inuse = false;
			this.wrap.dispose();
			this.wrap = null;
		}
		this.prev = this.next = null;
	}
	,__class__: zpp_nape.geom.ZPP_GeomVert
}
zpp_nape.geom.ZPP_GeomPoly = function(outer) {
	this.vertices = null;
	this.outer = null;
	this.outer = outer;
};
zpp_nape.geom.ZPP_GeomPoly.__name__ = ["zpp_nape","geom","ZPP_GeomPoly"];
zpp_nape.geom.ZPP_GeomPoly.prototype = {
	__class__: zpp_nape.geom.ZPP_GeomPoly
}
zpp_nape.geom.ZPP_GeomVertexIterator = function() {
	this.next = null;
	this.outer = null;
	this.forward = false;
	this.first = false;
	this.start = null;
	this.ptr = null;
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = true;
	this.outer = new nape.geom.GeomVertexIterator();
	zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
};
zpp_nape.geom.ZPP_GeomVertexIterator.__name__ = ["zpp_nape","geom","ZPP_GeomVertexIterator"];
zpp_nape.geom.ZPP_GeomVertexIterator.get = function(poly,forward) {
	var ret;
	if(zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool == null) ret = new zpp_nape.geom.ZPP_GeomVertexIterator(); else {
		ret = zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool;
		zpp_nape.geom.ZPP_GeomVertexIterator.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.outer.zpp_inner = ret;
	ret.ptr = poly;
	ret.forward = forward;
	ret.start = poly;
	ret.first = poly != null;
	return ret.outer;
}
zpp_nape.geom.ZPP_GeomVertexIterator.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.outer.zpp_inner = null;
		this.ptr = this.start = null;
	}
	,__class__: zpp_nape.geom.ZPP_GeomVertexIterator
}
zpp_nape.geom.ZPP_MarchSpan = function() {
	this.next = null;
	this.out = false;
	this.rank = 0;
	this.parent = null;
	this.parent = this;
};
zpp_nape.geom.ZPP_MarchSpan.__name__ = ["zpp_nape","geom","ZPP_MarchSpan"];
zpp_nape.geom.ZPP_MarchSpan.prototype = {
	alloc: function() {
		this.out = false;
		this.rank = 0;
	}
	,free: function() {
		this.parent = this;
	}
	,__class__: zpp_nape.geom.ZPP_MarchSpan
}
zpp_nape.geom.ZPP_MarchPair = function() {
	this.next = null;
	this.spanr = null;
	this.span2 = null;
	this.span1 = null;
	this.pd = null;
	this.okeyr = 0;
	this.keyr = 0;
	this.pr = null;
	this.okey2 = 0;
	this.key2 = 0;
	this.p2 = null;
	this.okey1 = 0;
	this.key1 = 0;
	this.p1 = null;
};
zpp_nape.geom.ZPP_MarchPair.__name__ = ["zpp_nape","geom","ZPP_MarchPair"];
zpp_nape.geom.ZPP_MarchPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.p1 = this.p2 = this.pr = this.pd = null;
		this.span1 = this.span2 = this.spanr = null;
	}
	,__class__: zpp_nape.geom.ZPP_MarchPair
}
zpp_nape.geom.ZPP_MarchingSquares = function() {
};
zpp_nape.geom.ZPP_MarchingSquares.__name__ = ["zpp_nape","geom","ZPP_MarchingSquares"];
zpp_nape.geom.ZPP_MarchingSquares.run = function(iso,bx0,by0,bx1,by1,cell,quality,combine,ret) {
	var xp = (bx1 - bx0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.x;
		return $r;
	}(this));
	var xn = xp | 0;
	var yp = (by1 - by0) / (function($this) {
		var $r;
		if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
		cell.zpp_inner.validate();
		$r = cell.zpp_inner.y;
		return $r;
	}(this));
	var yn = yp | 0;
	if(xp != xn) xn++;
	if(yp != yn) yn++;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchingSquares.map == null) zpp_nape.geom.ZPP_MarchingSquares.map = new zpp_nape.util.ZNPArray2_ZPP_MarchPair(xn,yn); else zpp_nape.geom.ZPP_MarchingSquares.map.resize(xn,yn,null);
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.isos == null) zpp_nape.geom.ZPP_MarchingSquares.isos = new zpp_nape.util.ZNPArray2_Float(xn + 1,yn + 1); else zpp_nape.geom.ZPP_MarchingSquares.isos.resize(xn + 1,yn + 1,0);
	var _g1 = 0, _g = yn + 1;
	while(_g1 < _g) {
		var y = _g1++;
		var yc = y == 0?by0:y <= yn?by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * y:by1;
		var _g3 = 0, _g2 = xn + 1;
		while(_g3 < _g2) {
			var x = _g3++;
			var xc = x == 0?bx0:x <= xn?bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * x:bx1;
			zpp_nape.geom.ZPP_MarchingSquares.isos.set(x,y,iso(xc,yc));
		}
	}
	if(zpp_nape.geom.ZPP_MarchingSquares.ints == null) zpp_nape.geom.ZPP_MarchingSquares.ints = new zpp_nape.util.ZNPArray2_ZPP_GeomVert(xn + 1,(yn << 1) + 1); else zpp_nape.geom.ZPP_MarchingSquares.ints.resize(xn + 1,(yn << 1) + 1,null);
	var spans = null;
	if(combine) {
		if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) spans = new zpp_nape.geom.ZPP_MarchSpan(); else {
			spans = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
			zpp_nape.geom.ZPP_MarchSpan.zpp_pool = spans.next;
			spans.next = null;
		}
		spans.out = false;
		spans.rank = 0;
	}
	var py = by0;
	var _g = 0;
	while(_g < yn) {
		var y = _g++;
		var y0 = py;
		var y1 = y == yn - 1?by1:by0 + (function($this) {
			var $r;
			if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			cell.zpp_inner.validate();
			$r = cell.zpp_inner.y;
			return $r;
		}(this)) * (y + 1);
		py = y1;
		var px = bx0;
		var pre = null;
		var _g1 = 0;
		while(_g1 < xn) {
			var x = _g1++;
			var x0 = px;
			var x1 = x == xn - 1?bx1:bx0 + (function($this) {
				var $r;
				if(cell != null && cell.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
				cell.zpp_inner.validate();
				$r = cell.zpp_inner.x;
				return $r;
			}(this)) * (x + 1);
			px = x1;
			var fstx = x == 0 || !combine;
			var fsty = y == 0 || !combine;
			var sndx = x == xn - 1 || !combine;
			var sndy = y == yn - 1 || !combine;
			var pp = zpp_nape.geom.ZPP_MarchingSquares.me.marchSquare(iso,zpp_nape.geom.ZPP_MarchingSquares.isos,zpp_nape.geom.ZPP_MarchingSquares.ints,x0,y0,x1,y1,x,y,fstx,fsty,sndx,sndy,quality);
			if(pp == null) {
				pre = null;
				continue;
			}
			if(combine) {
				var pd = pp.p2 != null && pp.okey2 != 14?pp.p2:pp.p1;
				pp.pd = ((pd == pp.p2?pp.okey2:pp.okey1) & 128) == 0?pd.prev:pd.prev.prev;
				zpp_nape.geom.ZPP_MarchingSquares.map.set(x,y,pp);
				if(pre != null && zpp_nape.geom.ZPP_MarchingSquares.me.combLeft(pp.key1)) {
					zpp_nape.geom.ZPP_MarchingSquares.me.combLR(pre,pp);
					pp.span1 = pre.spanr;
				} else {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span1 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span1 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span1.next;
						pp.span1.next = null;
					}
					pp.span1.alloc();
					pp.span1.next = spans;
					spans = pp.span1;
				}
				if(pp.p2 != null) {
					if(zpp_nape.geom.ZPP_MarchSpan.zpp_pool == null) pp.span2 = new zpp_nape.geom.ZPP_MarchSpan(); else {
						pp.span2 = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
						zpp_nape.geom.ZPP_MarchSpan.zpp_pool = pp.span2.next;
						pp.span2.next = null;
					}
					pp.span2.alloc();
					pp.span2.next = spans;
					spans = pp.span2;
					pp.spanr = pp.span2;
				} else pp.spanr = pp.span1;
				if(zpp_nape.geom.ZPP_MarchingSquares.me.combRight(pp.keyr)) pre = pp; else pre = null;
			} else {
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p1);
				if(pp.p2 != null) zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,pp.p2);
				var o = pp;
				o.p1 = o.p2 = o.pr = o.pd = null;
				o.span1 = o.span2 = o.spanr = null;
				o.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = o;
			}
		}
	}
	if(!combine) return;
	var _g = 1;
	while(_g < yn) {
		var y = _g++;
		var pre = null;
		var _g1 = 0;
		while(_g1 < xn) {
			var x = _g1++;
			var b = zpp_nape.geom.ZPP_MarchingSquares.map.get(x,y);
			if(b == null) {
				pre = null;
				continue;
			}
			var bkey = b.p2 != null && b.okey2 == 14?b.okey2:b.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combUp(bkey)) {
				pre = null;
				continue;
			}
			var a = zpp_nape.geom.ZPP_MarchingSquares.map.get(x,y - 1);
			if(a == null) {
				pre = null;
				continue;
			}
			var akey = a.p2 != null && a.okey2 == 56?a.okey2:a.okey1;
			if(!zpp_nape.geom.ZPP_MarchingSquares.me.combDown(akey)) {
				pre = null;
				continue;
			}
			var ad = a.p2 != null && a.okey2 == 56?a.span2:a.span1;
			var bu = b.p2 != null && b.okey2 == 14?b.span2:b.span1;
			if((ad == ad.parent?ad:(function($this) {
				var $r;
				var obj = ad;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this))) == (bu == bu.parent?bu:(function($this) {
				var $r;
				var obj = bu;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this)))) {
				if(pre != bu) zpp_nape.geom.ZPP_MarchingSquares.me.combUD_virtual(a,b);
			} else {
				var xr = ad == ad.parent?ad:(function($this) {
					var $r;
					var obj = ad;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				var yr = bu == bu.parent?bu:(function($this) {
					var $r;
					var obj = bu;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(xr != yr) {
					if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
						yr.parent = xr;
						xr.rank++;
					}
				}
				zpp_nape.geom.ZPP_MarchingSquares.me.combUD(a,b);
			}
			var key = bu == b.span2?b.okey2:b.okey1;
			pre = (key & 4) != 0?bu:null;
		}
	}
	var _g = 0;
	while(_g < yn) {
		var y = _g++;
		var _g1 = 0;
		while(_g1 < xn) {
			var x = _g1++;
			var p = zpp_nape.geom.ZPP_MarchingSquares.map.get(x,y);
			if(p == null) continue;
			var root = p.span1 == p.span1.parent?p.span1:(function($this) {
				var $r;
				var obj = p.span1;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(!root.out) {
				root.out = true;
				zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p1);
			}
			if(p.p2 != null) {
				root = p.span2 == p.span2.parent?p.span2:(function($this) {
					var $r;
					var obj = p.span2;
					var stack = null;
					while(obj != obj.parent) {
						var nxt = obj.parent;
						obj.parent = stack;
						stack = obj;
						obj = nxt;
					}
					while(stack != null) {
						var nxt = stack.parent;
						stack.parent = obj;
						stack = nxt;
					}
					$r = obj;
					return $r;
				}(this));
				if(!root.out) {
					root.out = true;
					zpp_nape.geom.ZPP_MarchingSquares.me.output(ret,p.p2);
				}
			}
			var o = p;
			o.p1 = o.p2 = o.pr = o.pd = null;
			o.span1 = o.span2 = o.spanr = null;
			o.next = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
			zpp_nape.geom.ZPP_MarchPair.zpp_pool = o;
			zpp_nape.geom.ZPP_MarchingSquares.map.set(x,y,null);
		}
	}
	while(spans != null) {
		var t = spans;
		spans = t.next;
		var o = t;
		o.parent = o;
		o.next = zpp_nape.geom.ZPP_MarchSpan.zpp_pool;
		zpp_nape.geom.ZPP_MarchSpan.zpp_pool = o;
	}
}
zpp_nape.geom.ZPP_MarchingSquares.ISO = function(iso,x,y) {
	return iso(x,y);
}
zpp_nape.geom.ZPP_MarchingSquares.prototype = {
	ylerp: function(y0,y1,x,v0,v1,iso,quality) {
		var ym = this.lerp(y0,y1,v0,v1);
		while(quality-- != 0 && y0 < ym && ym < y1) {
			var vm = iso(x,ym);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				y1 = ym;
				v1 = vm;
			} else {
				y0 = ym;
				v0 = vm;
			}
			ym = this.lerp(y0,y1,v0,v1);
		}
		return ym;
	}
	,xlerp: function(x0,x1,y,v0,v1,iso,quality) {
		var xm = this.lerp(x0,x1,v0,v1);
		while(quality-- != 0 && x0 < xm && xm < x1) {
			var vm = iso(xm,y);
			if(vm == 0) break;
			if(v0 * vm < 0) {
				x1 = xm;
				v1 = vm;
			} else {
				x0 = xm;
				v0 = vm;
			}
			xm = this.lerp(x0,x1,v0,v1);
		}
		return xm;
	}
	,lerp: function(x0,x1,v0,v1) {
		if(v0 == 0) return x0; else if(v1 == 0) return x1; else {
			var dv = v0 - v1;
			var t = dv * dv < nape.Config.epsilon * nape.Config.epsilon?0.5:v0 / dv;
			if(t < 0) t = 0; else if(t > 1) t = 1;
			return x0 + t * (x1 - x0);
		}
	}
	,marchSquare: function(iso,isos,ints,x0,y0,x1,y1,xn,yn,fstx,fsty,sndx,sndy,quality) {
		var key = 0;
		var v0 = isos.list[yn * isos.width + xn];
		if(v0 < 0) key |= 8;
		var v1 = isos.list[yn * isos.width + (xn + 1)];
		if(v1 < 0) key |= 4;
		var v2 = isos.list[(yn + 1) * isos.width + (xn + 1)];
		if(v2 < 0) key |= 2;
		var v3 = isos.list[(yn + 1) * isos.width + xn];
		if(v3 < 0) key |= 1;
		if(key == 0) return null; else {
			var ret;
			if(zpp_nape.geom.ZPP_MarchPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_MarchPair(); else {
				ret = zpp_nape.geom.ZPP_MarchPair.zpp_pool;
				zpp_nape.geom.ZPP_MarchPair.zpp_pool = ret.next;
				ret.next = null;
			}
			null;
			if(key != 10 && key != 5) {
				var val = zpp_nape.geom.ZPP_MarchingSquares.look_march[key];
				ret.okey1 = val;
				var _g = 0;
				while(_g < 8) {
					var i = _g++;
					if((val & 1 << i) != 0) {
						var p = null;
						if(i == 0) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
							if(fstx || fsty) p.forced = true;
						} else if(i == 2) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
							if(sndx || fsty) p.forced = true;
						} else if(i == 4) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
							if(sndx || sndy) p.forced = true;
						} else if(i == 6) {
							p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
							if(fstx || sndy) p.forced = true;
						} else if(i == 1) {
							p = ints.list[(yn << 1) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
								ints.list[(yn << 1) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fsty) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
							}
						} else if(i == 5) {
							p = ints.list[((yn << 1) + 2) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
								ints.list[((yn << 1) + 2) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndy) p.forced = true;
							if(p.x == x0 || p.x == x1) {
								if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
							}
						} else if(i == 3) {
							p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(sndx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
							}
						} else {
							p = ints.list[((yn << 1) + 1) * ints.width + xn];
							if(p == null) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
								ints.list[((yn << 1) + 1) * ints.width + xn] = p;
							} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
							if(fstx) p.forced = true;
							if(p.y == y0 || p.y == y1) {
								if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
							}
						}
						ret.p1 = (function($this) {
							var $r;
							var obj = p;
							if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
								obj.prev = ret.p1;
								obj.next = ret.p1.next;
								ret.p1.next.prev = obj;
								ret.p1.next = obj;
							}
							$r = obj;
							return $r;
						}(this));
					}
				}
				ret.p1 = ret.p1.next;
				ret.key1 = val;
				if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
					val = 0;
					ret.key1 = 0;
					ret.p1 = null;
				}
				if(val == 0) ret = null; else {
					ret.pr = ret.p1;
					ret.okeyr = ret.okey1;
					ret.keyr = ret.key1;
				}
			} else {
				var mid = iso(0.5 * (x0 + x1),0.5 * (y0 + y1)) < 0;
				if(key == 10) {
					if(mid) {
						var val = 187;
						ret.okey1 = val;
						var _g = 0;
						while(_g < 8) {
							var i = _g++;
							if((val & 1 << i) != 0) {
								var p = null;
								if(i == 0) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p.forced = true;
								} else if(i == 2) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p.forced = true;
								} else if(i == 4) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p.forced = true;
								} else if(i == 6) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p.forced = true;
								} else if(i == 1) {
									p = ints.list[(yn << 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fsty) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
									}
								} else if(i == 5) {
									p = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndy) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
									}
								} else if(i == 3) {
									p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
									}
								} else {
									p = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fstx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
									}
								}
								ret.p1 = (function($this) {
									var $r;
									var obj = p;
									if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
										obj.prev = ret.p1;
										obj.next = ret.p1.next;
										ret.p1.next.prev = obj;
										ret.p1.next = obj;
									}
									$r = obj;
									return $r;
								}(this));
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val;
						if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
							val = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					} else {
						var val = 131;
						ret.okey1 = val;
						var _g = 0;
						while(_g < 8) {
							var i = _g++;
							if((val & 1 << i) != 0) {
								var p = null;
								if(i == 0) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p.forced = true;
								} else if(i == 2) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p.forced = true;
								} else if(i == 4) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p.forced = true;
								} else if(i == 6) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p.forced = true;
								} else if(i == 1) {
									p = ints.list[(yn << 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fsty) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
									}
								} else if(i == 5) {
									p = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndy) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
									}
								} else if(i == 3) {
									p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
									}
								} else {
									p = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fstx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
									}
								}
								ret.p1 = (function($this) {
									var $r;
									var obj = p;
									if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
										obj.prev = ret.p1;
										obj.next = ret.p1.next;
										ret.p1.next.prev = obj;
										ret.p1.next = obj;
									}
									$r = obj;
									return $r;
								}(this));
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val;
						if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
							val = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val != 0) {
							var val1 = 56;
							ret.okey2 = val1;
							var _g = 0;
							while(_g < 8) {
								var i = _g++;
								if((val1 & 1 << i) != 0) {
									var p = null;
									if(i == 0) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
										if(fstx || fsty) p.forced = true;
									} else if(i == 2) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
										if(sndx || fsty) p.forced = true;
									} else if(i == 4) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
										if(sndx || sndy) p.forced = true;
									} else if(i == 6) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
										if(fstx || sndy) p.forced = true;
									} else if(i == 1) {
										p = ints.list[(yn << 1) * ints.width + xn];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(fsty) p.forced = true;
										if(p.x == x0 || p.x == x1) {
											if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
										}
									} else if(i == 5) {
										p = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(sndy) p.forced = true;
										if(p.x == x0 || p.x == x1) {
											if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
										}
									} else if(i == 3) {
										p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(sndx) p.forced = true;
										if(p.y == y0 || p.y == y1) {
											if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
										}
									} else {
										p = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(fstx) p.forced = true;
										if(p.y == y0 || p.y == y1) {
											if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
										}
									}
									ret.p2 = (function($this) {
										var $r;
										var obj = p;
										if(ret.p2 == null) ret.p2 = obj.prev = obj.next = obj; else {
											obj.prev = ret.p2;
											obj.next = ret.p2.next;
											ret.p2.next.prev = obj;
											ret.p2.next = obj;
										}
										$r = obj;
										return $r;
									}(this));
								}
							}
							ret.p2 = ret.p2.next;
							ret.key2 = val1;
							if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
								val1 = 0;
								ret.key2 = 0;
								ret.p2 = null;
							}
							if(val1 == 0) {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							} else {
								ret.pr = ret.p2;
								ret.okeyr = ret.okey2;
								ret.keyr = ret.key2;
							}
						} else {
							var val1 = 56;
							ret.okey1 = val1;
							var _g = 0;
							while(_g < 8) {
								var i = _g++;
								if((val1 & 1 << i) != 0) {
									var p = null;
									if(i == 0) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
										if(fstx || fsty) p.forced = true;
									} else if(i == 2) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
										if(sndx || fsty) p.forced = true;
									} else if(i == 4) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
										if(sndx || sndy) p.forced = true;
									} else if(i == 6) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
										if(fstx || sndy) p.forced = true;
									} else if(i == 1) {
										p = ints.list[(yn << 1) * ints.width + xn];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
											ints.list[(yn << 1) * ints.width + xn] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(fsty) p.forced = true;
										if(p.x == x0 || p.x == x1) {
											if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
										}
									} else if(i == 5) {
										p = ints.list[((yn << 1) + 2) * ints.width + xn];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
											ints.list[((yn << 1) + 2) * ints.width + xn] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(sndy) p.forced = true;
										if(p.x == x0 || p.x == x1) {
											if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
										}
									} else if(i == 3) {
										p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(sndx) p.forced = true;
										if(p.y == y0 || p.y == y1) {
											if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
										}
									} else {
										p = ints.list[((yn << 1) + 1) * ints.width + xn];
										if(p == null) {
											p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
											ints.list[((yn << 1) + 1) * ints.width + xn] = p;
										} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
										if(fstx) p.forced = true;
										if(p.y == y0 || p.y == y1) {
											if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
										}
									}
									ret.p1 = (function($this) {
										var $r;
										var obj = p;
										if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
											obj.prev = ret.p1;
											obj.next = ret.p1.next;
											ret.p1.next.prev = obj;
											ret.p1.next = obj;
										}
										$r = obj;
										return $r;
									}(this));
								}
							}
							ret.p1 = ret.p1.next;
							ret.key1 = val1;
							if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
								val1 = 0;
								ret.key1 = 0;
								ret.p1 = null;
							}
							if(val1 == 0) ret = null; else {
								ret.pr = ret.p1;
								ret.okeyr = ret.okey1;
								ret.keyr = ret.key1;
							}
						}
					}
				} else if(mid) {
					var val = 238;
					ret.okey1 = val;
					var _g = 0;
					while(_g < 8) {
						var i = _g++;
						if((val & 1 << i) != 0) {
							var p = null;
							if(i == 0) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p.forced = true;
							} else if(i == 2) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p.forced = true;
							} else if(i == 4) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p.forced = true;
							} else if(i == 6) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p.forced = true;
							} else if(i == 1) {
								p = ints.list[(yn << 1) * ints.width + xn];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fsty) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
								}
							} else if(i == 5) {
								p = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndy) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
								}
							} else if(i == 3) {
								p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
								}
							} else {
								p = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fstx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
								}
							}
							ret.p1 = (function($this) {
								var $r;
								var obj = p;
								if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
									obj.prev = ret.p1;
									obj.next = ret.p1.next;
									ret.p1.next.prev = obj;
									ret.p1.next = obj;
								}
								$r = obj;
								return $r;
							}(this));
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val;
					if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
						val = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val == 0) ret = null; else {
						ret.pr = ret.p1;
						ret.okeyr = ret.okey1;
						ret.keyr = ret.key1;
					}
				} else {
					var val = 224;
					ret.okey1 = val;
					var _g = 0;
					while(_g < 8) {
						var i = _g++;
						if((val & 1 << i) != 0) {
							var p = null;
							if(i == 0) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
								if(fstx || fsty) p.forced = true;
							} else if(i == 2) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
								if(sndx || fsty) p.forced = true;
							} else if(i == 4) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
								if(sndx || sndy) p.forced = true;
							} else if(i == 6) {
								p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
								if(fstx || sndy) p.forced = true;
							} else if(i == 1) {
								p = ints.list[(yn << 1) * ints.width + xn];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
									ints.list[(yn << 1) * ints.width + xn] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fsty) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 1) != 0 || p.x == x1 && (val & 4) != 0) val ^= 2;
								}
							} else if(i == 5) {
								p = ints.list[((yn << 1) + 2) * ints.width + xn];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
									ints.list[((yn << 1) + 2) * ints.width + xn] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndy) p.forced = true;
								if(p.x == x0 || p.x == x1) {
									if(p.x == x0 && (val & 64) != 0 || p.x == x1 && (val & 16) != 0) val ^= 32;
								}
							} else if(i == 3) {
								p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(sndx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 4) != 0 || p.y == y1 && (val & 16) != 0) val ^= 8;
								}
							} else {
								p = ints.list[((yn << 1) + 1) * ints.width + xn];
								if(p == null) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
									ints.list[((yn << 1) + 1) * ints.width + xn] = p;
								} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
								if(fstx) p.forced = true;
								if(p.y == y0 || p.y == y1) {
									if(p.y == y0 && (val & 1) != 0 || p.y == y1 && (val & 64) != 0) val ^= 128;
								}
							}
							ret.p1 = (function($this) {
								var $r;
								var obj = p;
								if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
									obj.prev = ret.p1;
									obj.next = ret.p1.next;
									ret.p1.next.prev = obj;
									ret.p1.next = obj;
								}
								$r = obj;
								return $r;
							}(this));
						}
					}
					ret.p1 = ret.p1.next;
					ret.key1 = val;
					if(val == 1 || val == 4 || val == 16 || val == 64 || val == 3 || val == 12 || val == 48 || val == 192 || val == 129 || val == 6 || val == 24 || val == 96 || val == 5 || val == 20 || val == 80 || val == 65 || val == 17 || val == 68) {
						val = 0;
						ret.key1 = 0;
						ret.p1 = null;
					}
					if(val != 0) {
						var val1 = 14;
						ret.okey2 = val1;
						var _g = 0;
						while(_g < 8) {
							var i = _g++;
							if((val1 & 1 << i) != 0) {
								var p = null;
								if(i == 0) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p.forced = true;
								} else if(i == 2) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p.forced = true;
								} else if(i == 4) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p.forced = true;
								} else if(i == 6) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p.forced = true;
								} else if(i == 1) {
									p = ints.list[(yn << 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fsty) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i == 5) {
									p = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndy) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i == 3) {
									p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fstx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								ret.p2 = (function($this) {
									var $r;
									var obj = p;
									if(ret.p2 == null) ret.p2 = obj.prev = obj.next = obj; else {
										obj.prev = ret.p2;
										obj.next = ret.p2.next;
										ret.p2.next.prev = obj;
										ret.p2.next = obj;
									}
									$r = obj;
									return $r;
								}(this));
							}
						}
						ret.p2 = ret.p2.next;
						ret.key2 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key2 = 0;
							ret.p2 = null;
						}
						if(val1 == 0) {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						} else {
							ret.pr = ret.p2;
							ret.okeyr = ret.okey2;
							ret.keyr = ret.key2;
						}
					} else {
						var val1 = 14;
						ret.okey1 = val1;
						var _g = 0;
						while(_g < 8) {
							var i = _g++;
							if((val1 & 1 << i) != 0) {
								var p = null;
								if(i == 0) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y0);
									if(fstx || fsty) p.forced = true;
								} else if(i == 2) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y0);
									if(sndx || fsty) p.forced = true;
								} else if(i == 4) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x1,y1);
									if(sndx || sndy) p.forced = true;
								} else if(i == 6) {
									p = zpp_nape.geom.ZPP_GeomVert.get(x0,y1);
									if(fstx || sndy) p.forced = true;
								} else if(i == 1) {
									p = ints.list[(yn << 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y0,v0,v1,iso,quality),y0);
										ints.list[(yn << 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fsty) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 1) != 0 || p.x == x1 && (val1 & 4) != 0) val1 ^= 2;
									}
								} else if(i == 5) {
									p = ints.list[((yn << 1) + 2) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(this.xlerp(x0,x1,y1,v3,v2,iso,quality),y1);
										ints.list[((yn << 1) + 2) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndy) p.forced = true;
									if(p.x == x0 || p.x == x1) {
										if(p.x == x0 && (val1 & 64) != 0 || p.x == x1 && (val1 & 16) != 0) val1 ^= 32;
									}
								} else if(i == 3) {
									p = ints.list[((yn << 1) + 1) * ints.width + (xn + 1)];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x1,this.ylerp(y0,y1,x1,v1,v2,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + (xn + 1)] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(sndx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 4) != 0 || p.y == y1 && (val1 & 16) != 0) val1 ^= 8;
									}
								} else {
									p = ints.list[((yn << 1) + 1) * ints.width + xn];
									if(p == null) {
										p = zpp_nape.geom.ZPP_GeomVert.get(x0,this.ylerp(y0,y1,x0,v0,v3,iso,quality));
										ints.list[((yn << 1) + 1) * ints.width + xn] = p;
									} else p = zpp_nape.geom.ZPP_GeomVert.get(p.x,p.y);
									if(fstx) p.forced = true;
									if(p.y == y0 || p.y == y1) {
										if(p.y == y0 && (val1 & 1) != 0 || p.y == y1 && (val1 & 64) != 0) val1 ^= 128;
									}
								}
								ret.p1 = (function($this) {
									var $r;
									var obj = p;
									if(ret.p1 == null) ret.p1 = obj.prev = obj.next = obj; else {
										obj.prev = ret.p1;
										obj.next = ret.p1.next;
										ret.p1.next.prev = obj;
										ret.p1.next = obj;
									}
									$r = obj;
									return $r;
								}(this));
							}
						}
						ret.p1 = ret.p1.next;
						ret.key1 = val1;
						if(val1 == 1 || val1 == 4 || val1 == 16 || val1 == 64 || val1 == 3 || val1 == 12 || val1 == 48 || val1 == 192 || val1 == 129 || val1 == 6 || val1 == 24 || val1 == 96 || val1 == 5 || val1 == 20 || val1 == 80 || val1 == 65 || val1 == 17 || val1 == 68) {
							val1 = 0;
							ret.key1 = 0;
							ret.p1 = null;
						}
						if(val1 == 0) ret = null; else {
							ret.pr = ret.p1;
							ret.okeyr = ret.okey1;
							ret.keyr = ret.key1;
						}
					}
				}
			}
			return ret;
		}
	}
	,comb: function(flag) {
		var cnt = 0;
		if((flag & 1) != 0) cnt++;
		if((flag & 2) != 0) cnt++;
		if((flag & 4) != 0) cnt++;
		return cnt >= 2;
	}
	,combDown: function(key) {
		var flag = (key & 112) >> 4;
		return this.comb(flag);
	}
	,combUp: function(key) {
		var flag = key & 7;
		return this.comb(flag);
	}
	,combRight: function(key) {
		var flag = (key & 28) >> 2;
		return this.comb(flag);
	}
	,combLeft: function(key) {
		var flag = key & 1 | (key & 192) >> 5;
		return this.comb(flag);
	}
	,combUD_virtual: function(a,b) {
		var ad = a.p2 != null && a.key2 == 56?a.p2:a.p1;
		var bu = b.p2 != null && b.key2 == 14?b.p2:b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		ap.forced = bp.forced = ap2.forced = bp2.forced = true;
	}
	,combUD: function(a,b) {
		var ad = a.p2 != null && a.key2 == 56?a.p2:a.p1;
		var bu = b.p2 != null && b.key2 == 14?b.p2:b.p1;
		var ap = a.pd;
		var bp = bu;
		var ap2 = ap.prev;
		var bp2 = bp.next;
		bp.next = ap.next;
		ap.next.prev = bp;
		var o = ap;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		bp2.prev = ap2.prev;
		ap2.prev.next = bp2;
		if(ap2 == a.p1) a.p1 = bp2;
		var o = ap2;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	}
	,combLR: function(a,b) {
		var ap = this.linkright(a.pr,a.okeyr);
		var bp = this.linkleft(b.p1,b.okey1);
		var ap2 = ap.next;
		var bp2 = bp.prev;
		if((a.keyr & 4) != 0) {
			if(b.pr == b.p1) b.pr = ap.prev;
			b.p1 = ap.prev;
			ap.prev.next = bp.next;
			bp.next.prev = ap.prev;
			var o = ap;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		} else {
			ap.next = bp.next;
			bp.next.prev = ap;
		}
		var o = bp;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		if((a.keyr & 16) != 0) {
			b.pd = ap2.next;
			ap2.next.prev = bp2.prev;
			bp2.prev.next = ap2.next;
			var o = ap2;
			if(o.wrap != null) {
				o.wrap.zpp_inner._inuse = false;
				o.wrap.dispose();
				o.wrap = null;
			}
			o.prev = o.next = null;
			o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
			zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
		} else {
			ap2.prev = bp2.prev;
			bp2.prev.next = ap2;
		}
		var o = bp2;
		if(o.wrap != null) {
			o.wrap.zpp_inner._inuse = false;
			o.wrap.dispose();
			o.wrap = null;
		}
		o.prev = o.next = null;
		o.next = zpp_nape.geom.ZPP_GeomVert.zpp_pool;
		zpp_nape.geom.ZPP_GeomVert.zpp_pool = o;
	}
	,linkup: function(poly,key) {
		return poly;
	}
	,linkdown: function(poly,key) {
		return (key & 128) == 0?poly.prev:poly.prev.prev;
	}
	,linkleft: function(poly,key) {
		return (key & 1) == 0?poly.prev:poly;
	}
	,linkright: function(poly,key) {
		var kind = key & 7;
		if(kind == 0) return poly; else if(kind == 3) return poly.next.next; else return poly.next;
	}
	,output: function(ret,poly) {
		if(poly == null || poly.next == poly || poly.next == poly.prev?true:(function($this) {
			var $r;
			var a = (function($this) {
				var $r;
				var area = 0.0;
				{
					var F = poly;
					var L = poly;
					if(F != null) {
						var nite = F;
						do {
							var v = nite;
							area += v.x * (v.next.y - v.prev.y);
							nite = nite.next;
						} while(nite != L);
					}
				}
				$r = area * 0.5;
				return $r;
			}($this));
			$r = a * a < nape.Config.epsilon * nape.Config.epsilon;
			return $r;
		}(this))) {
			while(!(poly == null)) poly = poly != null && poly.prev == poly?(function($this) {
				var $r;
				poly.next = poly.prev = null;
				$r = poly = null;
				return $r;
			}(this)):(function($this) {
				var $r;
				var retnodes = poly.next;
				poly.prev.next = poly.next;
				poly.next.prev = poly.prev;
				poly.next = poly.prev = null;
				poly = null;
				$r = retnodes;
				return $r;
			}(this));
			return;
		}
		var gp = nape.geom.GeomPoly.get();
		gp.zpp_inner.vertices = poly;
		if(ret.zpp_inner.reverse_flag) ret.push(gp); else ret.unshift(gp);
	}
	,__class__: zpp_nape.geom.ZPP_MarchingSquares
}
zpp_nape.geom.ZPP_Mat23 = function() {
	this.next = null;
	this._invalidate = null;
	this.ty = 0.0;
	this.tx = 0.0;
	this.d = 0.0;
	this.c = 0.0;
	this.b = 0.0;
	this.a = 0.0;
	this.outer = null;
};
zpp_nape.geom.ZPP_Mat23.__name__ = ["zpp_nape","geom","ZPP_Mat23"];
zpp_nape.geom.ZPP_Mat23.get = function() {
	var ret;
	if(zpp_nape.geom.ZPP_Mat23.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Mat23(); else {
		ret = zpp_nape.geom.ZPP_Mat23.zpp_pool;
		zpp_nape.geom.ZPP_Mat23.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	return ret;
}
zpp_nape.geom.ZPP_Mat23.identity = function() {
	var ret = zpp_nape.geom.ZPP_Mat23.get();
	ret.setas(1,0,0,1,0,0);
	return ret;
}
zpp_nape.geom.ZPP_Mat23.prototype = {
	alloc: function() {
	}
	,free: function() {
	}
	,setas: function(a,b,c,d,tx,ty) {
		this.tx = tx;
		this.ty = ty;
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
	}
	,set: function(m) {
		this.setas(m.a,m.b,m.c,m.d,m.tx,m.ty);
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate();
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.Mat23();
			var o = this.outer.zpp_inner;
			o.next = zpp_nape.geom.ZPP_Mat23.zpp_pool;
			zpp_nape.geom.ZPP_Mat23.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_nape.geom.ZPP_Mat23
}
zpp_nape.geom.ZPP_MatMN = function(m,n) {
	this.x = null;
	this.n = 0;
	this.m = 0;
	this.outer = null;
	this.m = m;
	this.n = n;
	this.x = new Array();
	var _g1 = 0, _g = m * n;
	while(_g1 < _g) {
		var i = _g1++;
		this.x.push(0.0);
	}
};
zpp_nape.geom.ZPP_MatMN.__name__ = ["zpp_nape","geom","ZPP_MatMN"];
zpp_nape.geom.ZPP_MatMN.prototype = {
	__class__: zpp_nape.geom.ZPP_MatMN
}
zpp_nape.geom.ZPP_Monotone = function() { }
zpp_nape.geom.ZPP_Monotone.__name__ = ["zpp_nape","geom","ZPP_Monotone"];
zpp_nape.geom.ZPP_Monotone.bisector = function(b) {
	var a = b.prev;
	var c = b.next;
	var ux = 0.0;
	var uy = 0.0;
	ux = b.x - a.x;
	uy = b.y - a.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = c.x - b.x;
	vy = c.y - b.y;
	var ret = zpp_nape.geom.ZPP_Vec2.get(-uy - vy,ux + vx,null);
	var d = ret.x * ret.x + ret.y * ret.y;
	var imag = 1.0 / Math.sqrt(d);
	var t = imag;
	ret.x *= t;
	ret.y *= t;
	if(vy * ux - vx * uy < 0) {
		ret.x = -ret.x;
		ret.y = -ret.y;
	}
	return ret;
}
zpp_nape.geom.ZPP_Monotone.below = function(p,q) {
	if(p.y < q.y) return true; else if(p.y > q.y) return false; else if(p.x < q.x) return true; else if(p.x > q.x) return false; else {
		var po = zpp_nape.geom.ZPP_Monotone.bisector(p);
		var qo = zpp_nape.geom.ZPP_Monotone.bisector(q);
		var t = 1.0;
		po.x += p.x * t;
		po.y += p.y * t;
		var t = 1.0;
		qo.x += q.x * t;
		qo.y += q.y * t;
		var ret = po.x < qo.x || po.x == qo.x && po.y < qo.y;
		var o = po;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		var o = qo;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
}
zpp_nape.geom.ZPP_Monotone.above = function(p,q) {
	return zpp_nape.geom.ZPP_Monotone.below(q,p);
}
zpp_nape.geom.ZPP_Monotone.left_vertex = function(p) {
	var pre = p.prev;
	return pre.y > p.y || pre.y == p.y && p.next.y < p.y;
}
zpp_nape.geom.ZPP_Monotone.isMonotone = function(P) {
	var min = P;
	var max = P;
	var F = P.next;
	var L = P;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y) min = p;
			if(p.y > max.y) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	var ret = true;
	var pre = min;
	if(max != min.next) {
		var F = min.next;
		var L = max;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				if(p.y < pre.y) {
					ret = false;
					break;
				}
				pre = p;
				nite = nite.next;
			} while(nite != L);
		}
	}
	if(!ret) return false;
	pre = min;
	if(max != min.prev) {
		var F = min.prev;
		var L = max;
		if(F != null) {
			var nite = F;
			do {
				var p = nite;
				if(p.y < pre.y) {
					ret = false;
					break;
				}
				pre = p;
				nite = nite.prev;
			} while(nite != L);
		}
	}
	return ret;
}
zpp_nape.geom.ZPP_Monotone.getShared = function() {
	if(zpp_nape.geom.ZPP_Monotone.sharedPPoly == null) zpp_nape.geom.ZPP_Monotone.sharedPPoly = new zpp_nape.geom.ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_Monotone.sharedPPoly;
}
zpp_nape.geom.ZPP_Monotone.decompose = function(P,poly) {
	if(poly == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(P); else poly.init(P);
	if(poly.vertices == null) return poly;
	if(zpp_nape.geom.ZPP_Monotone.queue == null) zpp_nape.geom.ZPP_Monotone.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var F = poly.vertices;
	var L = poly.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			zpp_nape.geom.ZPP_Monotone.queue.add(p);
			var ux = 0.0;
			var uy = 0.0;
			ux = p.next.x - p.x;
			uy = p.next.y - p.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = p.prev.x - p.x;
			vy = p.prev.y - p.y;
			var cx = vy * ux - vx * uy > 0.0;
			p.type = zpp_nape.geom.ZPP_Monotone.below(p.prev,p)?zpp_nape.geom.ZPP_Monotone.below(p.next,p)?cx?0:3:4:zpp_nape.geom.ZPP_Monotone.below(p,p.next)?cx?1:2:4;
			nite = nite.next;
		} while(nite != L);
	}
	var xxlist = zpp_nape.geom.ZPP_Monotone.queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges, leftSize, rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_Monotone.above(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	if(zpp_nape.geom.ZPP_Monotone.edges == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) zpp_nape.geom.ZPP_Monotone.edges = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			zpp_nape.geom.ZPP_Monotone.edges = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = zpp_nape.geom.ZPP_Monotone.edges.next;
			zpp_nape.geom.ZPP_Monotone.edges.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Monotone.edges.lt = zpp_nape.geom.ZPP_PartitionVertex.edge_lt;
		zpp_nape.geom.ZPP_Monotone.edges.swapped = zpp_nape.geom.ZPP_PartitionVertex.edge_swap;
	}
	while(!(zpp_nape.geom.ZPP_Monotone.queue.head == null)) {
		var v = zpp_nape.geom.ZPP_Monotone.queue.pop_unsafe();
		switch(v.type) {
		case 0:
			v.helper = v;
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			break;
		case 1:
			var e = v.prev;
			if(e.helper == null) throw "Fatal error (1): Polygon is not weakly-simple and clockwise";
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e.node);
			e.helper = null;
			break;
		case 3:
			var e = (function($this) {
				var $r;
				var ret = null;
				if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
					var set_ite = zpp_nape.geom.ZPP_Monotone.edges.parent;
					while(set_ite.prev != null) set_ite = set_ite.prev;
					while(set_ite != null) {
						var elt = set_ite.data;
						if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
							ret = elt;
							break;
						}
						if(set_ite.next != null) {
							set_ite = set_ite.next;
							while(set_ite.prev != null) set_ite = set_ite.prev;
						} else {
							while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
							set_ite = set_ite.parent;
						}
					}
				}
				$r = ret;
				return $r;
			}(this));
			if(e != null) {
				if(e.helper == null) throw "Fatal error (2): Polygon is not weakly-simple and clockwise";
				poly.add_diagonal(v,e.helper);
				e.helper = v;
			}
			v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
			v.helper = v;
			break;
		case 2:
			var e = v.prev;
			if(e.helper == null) throw "Fatal error (3): Polygon is not weakly-simple and clockwise";
			if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
			zpp_nape.geom.ZPP_Monotone.edges.remove_node(e.node);
			e.helper = null;
			var e1 = (function($this) {
				var $r;
				var ret = null;
				if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
					var set_ite = zpp_nape.geom.ZPP_Monotone.edges.parent;
					while(set_ite.prev != null) set_ite = set_ite.prev;
					while(set_ite != null) {
						var elt = set_ite.data;
						if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
							ret = elt;
							break;
						}
						if(set_ite.next != null) {
							set_ite = set_ite.next;
							while(set_ite.prev != null) set_ite = set_ite.prev;
						} else {
							while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
							set_ite = set_ite.parent;
						}
					}
				}
				$r = ret;
				return $r;
			}(this));
			if(e1 != null) {
				if(e1.helper == null) throw "Fatal error (4): Polygon is not weakly-simple and clockwise";
				if(e1.helper.type == 2) poly.add_diagonal(v,e1.helper);
				e1.helper = v;
			}
			break;
		case 4:
			var pre = v.prev;
			if(zpp_nape.geom.ZPP_Monotone.left_vertex(v)) {
				if(pre.helper == null) throw "Fatal error (5): Polygon is not weakly-simple and clockwise";
				if(pre.helper.type == 2) poly.add_diagonal(v,pre.helper);
				zpp_nape.geom.ZPP_Monotone.edges.remove_node(pre.node);
				pre.helper = null;
				v.node = zpp_nape.geom.ZPP_Monotone.edges.insert(v);
				v.helper = v;
			} else {
				var e = (function($this) {
					var $r;
					var ret = null;
					if(!zpp_nape.geom.ZPP_Monotone.edges.empty()) {
						var set_ite = zpp_nape.geom.ZPP_Monotone.edges.parent;
						while(set_ite.prev != null) set_ite = set_ite.prev;
						while(set_ite != null) {
							var elt = set_ite.data;
							if(!zpp_nape.geom.ZPP_PartitionVertex.vert_lt(elt,v)) {
								ret = elt;
								break;
							}
							if(set_ite.next != null) {
								set_ite = set_ite.next;
								while(set_ite.prev != null) set_ite = set_ite.prev;
							} else {
								while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
								set_ite = set_ite.parent;
							}
						}
					}
					$r = ret;
					return $r;
				}(this));
				if(e == null || e.helper == null) throw "Fatal error (6): Polygon is not weakly-simple and clockwise";
				if(e.helper.type == 2) poly.add_diagonal(v,e.helper);
				e.helper = v;
			}
			break;
		}
	}
	return poly;
}
zpp_nape.geom.ZPP_PartitionVertex = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.rightchain = false;
	this.helper = null;
	this.type = 0;
	this.diagonals = null;
	this.forced = false;
	this.y = 0.0;
	this.x = 0.0;
	this.mag = 0;
	this.id = 0;
	this.id = zpp_nape.geom.ZPP_PartitionVertex.nextId++;
	this.diagonals = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
};
zpp_nape.geom.ZPP_PartitionVertex.__name__ = ["zpp_nape","geom","ZPP_PartitionVertex"];
zpp_nape.geom.ZPP_PartitionVertex.get = function(x) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
		ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
		zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x.x;
	ret.y = x.y;
	return ret;
}
zpp_nape.geom.ZPP_PartitionVertex.rightdistance = function(edge,vert) {
	var flip = edge.next.y > edge.y;
	var ux = 0.0;
	var uy = 0.0;
	ux = edge.next.x - edge.x;
	uy = edge.next.y - edge.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = vert.x - edge.x;
	vy = vert.y - edge.y;
	return (flip?-1.0:1.0) * (vy * ux - vx * uy);
}
zpp_nape.geom.ZPP_PartitionVertex.vert_lt = function(edge,vert) {
	return vert == edge || vert == edge.next?true:edge.y == edge.next.y?(function($this) {
		var $r;
		var x = edge.x;
		var y = edge.next.x;
		$r = x < y?x:y;
		return $r;
	}(this)) <= vert.x:zpp_nape.geom.ZPP_PartitionVertex.rightdistance(edge,vert) <= 0.0;
}
zpp_nape.geom.ZPP_PartitionVertex.edge_swap = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
}
zpp_nape.geom.ZPP_PartitionVertex.edge_lt = function(p,q) {
	if(p == q && p.next == q.next) return false;
	if(p == q.next) return !zpp_nape.geom.ZPP_PartitionVertex.vert_lt(p,q); else if(q == p.next) return zpp_nape.geom.ZPP_PartitionVertex.vert_lt(q,p); else if(p.y == p.next.y) return q.y == q.next.y?(function($this) {
		var $r;
		var x = p.x;
		var y = p.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)) > (function($this) {
		var $r;
		var x = q.x;
		var y = q.next.x;
		$r = x > y?x:y;
		return $r;
	}(this)):zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p) > 0.0 || zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next) > 0.0; else {
		var qRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q);
		var qNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(p,q.next);
		if(qRight == 0 && qNextRight == 0) return (function($this) {
			var $r;
			var x = p.x;
			var y = p.next.x;
			$r = x > y?x:y;
			return $r;
		}(this)) > (function($this) {
			var $r;
			var x = q.x;
			var y = q.next.x;
			$r = x > y?x:y;
			return $r;
		}(this));
		if(qRight * qNextRight >= 0) return qRight < 0 || qNextRight < 0;
		var pRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p);
		var pNextRight = zpp_nape.geom.ZPP_PartitionVertex.rightdistance(q,p.next);
		if(pRight * pNextRight >= 0) return pRight > 0 || pNextRight > 0;
		return false;
	}
}
zpp_nape.geom.ZPP_PartitionVertex.prototype = {
	sort: function() {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var vorient = (function($this) {
			var $r;
			{
				ux = $this.prev.x - $this.x;
				uy = $this.prev.y - $this.y;
			}
			{
				vx = $this.next.x - $this.x;
				vy = $this.next.y - $this.y;
			}
			var ret = vy * ux - vx * uy;
			$r = ret > 0?-1:ret == 0?0:1;
			return $r;
		}(this));
		var xxlist = this.diagonals;
		if(!(xxlist.head == null) && xxlist.head.next != null) {
			var head = xxlist.head;
			var tail = null;
			var left = null;
			var right = null;
			var nxt = null;
			var listSize = 1;
			var numMerges, leftSize, rightSize;
			do {
				numMerges = 0;
				left = head;
				tail = head = null;
				while(left != null) {
					numMerges++;
					right = left;
					leftSize = 0;
					rightSize = listSize;
					while(right != null && leftSize < listSize) {
						leftSize++;
						right = right.next;
					}
					while(leftSize > 0 || rightSize > 0 && right != null) {
						if(leftSize == 0) {
							nxt = right;
							right = right.next;
							rightSize--;
						} else if(rightSize == 0 || right == null) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else if(vorient == 1?(function($this) {
							var $r;
							{
								ux = left.elt.x - $this.x;
								uy = left.elt.y - $this.y;
							}
							{
								vx = right.elt.x - $this.x;
								vy = right.elt.y - $this.y;
							}
							var ret = vy * ux - vx * uy;
							$r = ret > 0?-1:ret == 0?0:1;
							return $r;
						}(this)) == 1:(function($this) {
							var $r;
							var d1 = (function($this) {
								var $r;
								{
									ux = $this.prev.x - $this.x;
									uy = $this.prev.y - $this.y;
								}
								{
									vx = left.elt.x - $this.x;
									vy = left.elt.y - $this.y;
								}
								var ret = vy * ux - vx * uy;
								$r = ret > 0?-1:ret == 0?0:1;
								return $r;
							}($this));
							var d2 = (function($this) {
								var $r;
								{
									ux = $this.prev.x - $this.x;
									uy = $this.prev.y - $this.y;
								}
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var ret = vy * ux - vx * uy;
								$r = ret > 0?-1:ret == 0?0:1;
								return $r;
							}($this));
							$r = d1 * d2 == 1 || d1 * d2 == 0 && (d1 == 1 || d2 == 1)?(function($this) {
								var $r;
								{
									ux = left.elt.x - $this.x;
									uy = left.elt.y - $this.y;
								}
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var ret = vy * ux - vx * uy;
								$r = ret > 0?-1:ret == 0?0:1;
								return $r;
							}($this)) == 1:d1 == -1 || d2 == -1?d2 == -1:d1 == 0 && d2 == 0?(function($this) {
								var $r;
								{
									ux = $this.x - $this.prev.x;
									uy = $this.y - $this.prev.y;
								}
								{
									vx = left.elt.x - $this.x;
									vy = left.elt.y - $this.y;
								}
								var d11 = ux * vx + uy * vy;
								{
									vx = right.elt.x - $this.x;
									vy = right.elt.y - $this.y;
								}
								var d21 = ux * vx + uy * vy;
								$r = d11 < 0 && d21 > 0?true:d21 < 0 && d11 > 0?false:true;
								return $r;
							}($this)):true;
							return $r;
						}(this))) {
							nxt = left;
							left = left.next;
							leftSize--;
						} else {
							nxt = right;
							right = right.next;
							rightSize--;
						}
						if(tail != null) tail.next = nxt; else head = nxt;
						tail = nxt;
					}
					left = right;
				}
				tail.next = null;
				listSize <<= 1;
			} while(numMerges > 1);
			xxlist.head = head;
			xxlist.modified = true;
			xxlist.pushmod = true;
		}
	}
	,copy: function() {
		var ret;
		if(zpp_nape.geom.ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionVertex(); else {
			ret = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
			zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.x = this.x;
		ret.y = this.y;
		ret.forced = this.forced;
		return ret;
	}
	,free: function() {
		this.helper = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.geom.ZPP_PartitionVertex
}
zpp_nape.geom.ZPP_PartitionedPoly = function(P) {
	this.next = null;
	this.vertices = null;
	this.init(P);
};
zpp_nape.geom.ZPP_PartitionedPoly.__name__ = ["zpp_nape","geom","ZPP_PartitionedPoly"];
zpp_nape.geom.ZPP_PartitionedPoly.getSharedPP = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedPPList;
}
zpp_nape.geom.ZPP_PartitionedPoly.getShared = function() {
	if(zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList == null) zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	return zpp_nape.geom.ZPP_PartitionedPoly.sharedGVList;
}
zpp_nape.geom.ZPP_PartitionedPoly.prototype = {
	pull: function(start,ret) {
		var poly = null;
		var next = start;
		do {
			poly = (function($this) {
				var $r;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(next.x,next.y);
				if(poly == null) poly = obj.prev = obj.next = obj; else {
					obj.prev = poly;
					obj.next = poly.next;
					poly.next.prev = obj;
					poly.next = obj;
				}
				$r = obj;
				return $r;
			}(this));
			poly.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull(next,ret);
			} else next = next.next;
		} while(next != start);
		var area = (function($this) {
			var $r;
			var area1 = 0.0;
			{
				var F = poly;
				var L = poly;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area1 += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area1 * 0.5;
			return $r;
		}(this));
		if(area * area >= nape.Config.epsilon * nape.Config.epsilon) {
			if(!(function($this) {
				var $r;
				var p = poly;
				var skip = true;
				while(skip || p != poly) {
					skip = false;
					if(zpp_nape.geom.ZPP_VecMath.vec_dsq(p.x,p.y,p.next.x,p.next.y) < nape.Config.epsilon * nape.Config.epsilon) {
						if(p == poly) {
							poly = p.next;
							skip = true;
						}
						if(p.forced) p.next.forced = true;
						p = p != null && p.prev == p?(function($this) {
							var $r;
							p.next = p.prev = null;
							$r = p = null;
							return $r;
						}($this)):(function($this) {
							var $r;
							var retnodes = p.next;
							p.prev.next = p.next;
							p.next.prev = p.prev;
							p.next = p.prev = null;
							p = null;
							$r = retnodes;
							return $r;
						}($this));
						if(p == null) {
							poly = null;
							break;
						}
					} else p = p.next;
				}
				if(poly != null) {
					var removed;
					do {
						removed = false;
						p = poly;
						skip = true;
						while(skip || p != poly) {
							skip = false;
							var pre = p.prev;
							var ux = 0.0;
							var uy = 0.0;
							ux = p.x - pre.x;
							uy = p.y - pre.y;
							var vx = 0.0;
							var vy = 0.0;
							vx = p.next.x - p.x;
							vy = p.next.y - p.y;
							var crs = vy * ux - vx * uy;
							if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
								if(p == poly) {
									poly = p.next;
									skip = true;
								}
								p = p != null && p.prev == p?(function($this) {
									var $r;
									p.next = p.prev = null;
									$r = p = null;
									return $r;
								}($this)):(function($this) {
									var $r;
									var retnodes = p.next;
									p.prev.next = p.next;
									p.next.prev = p.prev;
									p.next = p.prev = null;
									p = null;
									$r = retnodes;
									return $r;
								}($this));
								removed = true;
								if(p == null) {
									removed = false;
									poly = null;
									break;
								}
							}
						}
					} while(removed);
				}
				$r = poly == null;
				return $r;
			}(this))) ret.add(poly);
		}
		return next;
	}
	,extract: function(ret) {
		if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_GeomVert();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull(this.vertices,ret);
			while(!(this.vertices == null)) this.vertices = this.vertices != null && this.vertices.prev == this.vertices?(function($this) {
				var $r;
				$this.vertices.next = $this.vertices.prev = null;
				{
					var o = $this.vertices;
					o.helper = null;
					null;
					o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				}
				$r = $this.vertices = null;
				return $r;
			}(this)):(function($this) {
				var $r;
				var retnodes = $this.vertices.next;
				$this.vertices.prev.next = $this.vertices.next;
				$this.vertices.next.prev = $this.vertices.prev;
				$this.vertices.next = $this.vertices.prev = null;
				{
					var o = $this.vertices;
					o.helper = null;
					null;
					o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				}
				$this.vertices = null;
				$r = retnodes;
				return $r;
			}(this));
		}
		return ret;
	}
	,pull_partitions: function(start,ret) {
		var poly;
		if(zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool == null) poly = new zpp_nape.geom.ZPP_PartitionedPoly(); else {
			poly = zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool;
			zpp_nape.geom.ZPP_PartitionedPoly.zpp_pool = poly.next;
			poly.next = null;
		}
		null;
		var next = start;
		do {
			poly.vertices = (function($this) {
				var $r;
				var obj = next.copy();
				if(poly.vertices == null) poly.vertices = obj.prev = obj.next = obj; else {
					obj.prev = poly.vertices;
					obj.next = poly.vertices.next;
					poly.vertices.next.prev = obj;
					poly.vertices.next = obj;
				}
				$r = obj;
				return $r;
			}(this));
			poly.vertices.forced = next.forced;
			if(!(next.diagonals.head == null)) {
				var diag = next.diagonals.inlined_pop_unsafe();
				if(diag == start) break; else next = this.pull_partitions(next,ret);
			} else next = next.next;
		} while(next != start);
		if((function($this) {
			var $r;
			var area = 0.0;
			{
				var F = poly.vertices;
				var L = poly.vertices;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) != 0) ret.add(poly);
		return next;
	}
	,extract_partitions: function(ret) {
		if(ret == null) ret = new zpp_nape.util.ZNPList_ZPP_PartitionedPoly();
		if(this.vertices != null) {
			var F = this.vertices;
			var L = this.vertices;
			if(F != null) {
				var nite = F;
				do {
					var c = nite;
					c.sort();
					nite = nite.next;
				} while(nite != L);
			}
			this.pull_partitions(this.vertices,ret);
			while(!(this.vertices == null)) this.vertices = this.vertices != null && this.vertices.prev == this.vertices?(function($this) {
				var $r;
				$this.vertices.next = $this.vertices.prev = null;
				{
					var o = $this.vertices;
					o.helper = null;
					null;
					o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				}
				$r = $this.vertices = null;
				return $r;
			}(this)):(function($this) {
				var $r;
				var retnodes = $this.vertices.next;
				$this.vertices.prev.next = $this.vertices.next;
				$this.vertices.next.prev = $this.vertices.prev;
				$this.vertices.next = $this.vertices.prev = null;
				{
					var o = $this.vertices;
					o.helper = null;
					null;
					o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
					zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
				}
				$this.vertices = null;
				$r = retnodes;
				return $r;
			}(this));
			var pre = null;
			var cx_ite = ret.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p.remove_collinear_vertices()) {
					ret.erase(pre);
					continue;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
		}
		return ret;
	}
	,add_diagonal: function(p,q) {
		p.diagonals.add(q);
		q.diagonals.add(p);
		p.forced = q.forced = true;
	}
	,remove_collinear_vertices: function() {
		var p = this.vertices;
		var skip = true;
		while(skip || p != this.vertices) {
			skip = false;
			if(this.eq(p,p.next)) {
				if(p == this.vertices) {
					this.vertices = p.next;
					skip = true;
				}
				if(p.forced) p.next.forced = true;
				p = p != null && p.prev == p?(function($this) {
					var $r;
					p.next = p.prev = null;
					{
						var o = p;
						o.helper = null;
						null;
						o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
						zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
					}
					$r = p = null;
					return $r;
				}(this)):(function($this) {
					var $r;
					var retnodes = p.next;
					p.prev.next = p.next;
					p.next.prev = p.prev;
					p.next = p.prev = null;
					{
						var o = p;
						o.helper = null;
						null;
						o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
						zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
					}
					p = null;
					$r = retnodes;
					return $r;
				}(this));
				if(p == null) {
					this.vertices = null;
					break;
				}
			} else p = p.next;
		}
		if(this.vertices == null) return true;
		var removed;
		do {
			removed = false;
			p = this.vertices;
			skip = true;
			while(skip || p != this.vertices) {
				skip = false;
				var pre = p.prev;
				var ux = 0.0;
				var uy = 0.0;
				ux = p.x - pre.x;
				uy = p.y - pre.y;
				var vx = 0.0;
				var vy = 0.0;
				vx = p.next.x - p.x;
				vy = p.next.y - p.y;
				var crs = vy * ux - vx * uy;
				if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) p = p.next; else {
					if(p == this.vertices) {
						this.vertices = p.next;
						skip = true;
					}
					p = p != null && p.prev == p?(function($this) {
						var $r;
						p.next = p.prev = null;
						{
							var o = p;
							o.helper = null;
							null;
							o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
							zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
						}
						$r = p = null;
						return $r;
					}(this)):(function($this) {
						var $r;
						var retnodes = p.next;
						p.prev.next = p.next;
						p.next.prev = p.prev;
						p.next = p.prev = null;
						{
							var o = p;
							o.helper = null;
							null;
							o.next = zpp_nape.geom.ZPP_PartitionVertex.zpp_pool;
							zpp_nape.geom.ZPP_PartitionVertex.zpp_pool = o;
						}
						p = null;
						$r = retnodes;
						return $r;
					}(this));
					removed = true;
					if(p == null) {
						removed = false;
						this.vertices = null;
						break;
					}
				}
			}
		} while(removed);
		return this.vertices == null;
	}
	,init: function(P) {
		if(P == null) return;
		var cw = (function($this) {
			var $r;
			var area = 0.0;
			{
				var F = P;
				var L = P;
				if(F != null) {
					var nite = F;
					do {
						var v = nite;
						area += v.x * (v.next.y - v.prev.y);
						nite = nite.next;
					} while(nite != L);
				}
			}
			$r = area * 0.5;
			return $r;
		}(this)) > 0.0;
		var p = P;
		do {
			this.vertices = cw?(function($this) {
				var $r;
				var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p);
				if($this.vertices == null) $this.vertices = obj.prev = obj.next = obj; else {
					obj.prev = $this.vertices;
					obj.next = $this.vertices.next;
					$this.vertices.next.prev = obj;
					$this.vertices.next = obj;
				}
				$r = obj;
				return $r;
			}(this)):(function($this) {
				var $r;
				var obj = zpp_nape.geom.ZPP_PartitionVertex.get(p);
				if($this.vertices == null) $this.vertices = obj.prev = obj.next = obj; else {
					obj.next = $this.vertices;
					obj.prev = $this.vertices.prev;
					$this.vertices.prev.next = obj;
					$this.vertices.prev = obj;
				}
				$r = obj;
				return $r;
			}(this));
			this.vertices.forced = p.forced;
			p = p.next;
		} while(p != P);
		this.remove_collinear_vertices();
	}
	,free: function() {
	}
	,alloc: function() {
	}
	,eq: function(a,b) {
		return zpp_nape.geom.ZPP_VecMath.vec_dsq(a.x,a.y,b.x,b.y) < nape.Config.epsilon * nape.Config.epsilon;
	}
	,__class__: zpp_nape.geom.ZPP_PartitionedPoly
}
zpp_nape.geom.ZPP_Ray = function() {
	this.zip_dir = false;
	this.absnormaly = 0.0;
	this.absnormalx = 0.0;
	this.normaly = 0.0;
	this.normalx = 0.0;
	this.idiry = 0.0;
	this.idirx = 0.0;
	this.diry = 0.0;
	this.dirx = 0.0;
	this.originy = 0.0;
	this.originx = 0.0;
	this.userData = null;
	this.maxdist = 0.0;
	this.direction = null;
	this.origin = null;
	this.origin = nape.geom.Vec2.get(null,null,null);
	this.origin.zpp_inner._invalidate = $bind(this,this.origin_invalidate);
	this.direction = nape.geom.Vec2.get(null,null,null);
	this.direction.zpp_inner._invalidate = $bind(this,this.direction_invalidate);
	this.originx = 0;
	this.originy = 0;
	this.dirx = 0;
	this.diry = 0;
	this.zip_dir = false;
};
zpp_nape.geom.ZPP_Ray.__name__ = ["zpp_nape","geom","ZPP_Ray"];
zpp_nape.geom.ZPP_Ray.prototype = {
	polysect2: function(p,inner,list) {
		var min = Math.POSITIVE_INFINITY;
		var max = -1.0;
		var edge = null;
		var edgemax = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							if(sxx < min) {
								min = sxx;
								edge = ei.elt;
							}
							if(sxx > max) {
								max = sxx;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx <= this.maxdist && (sxx < min || sxx > max)) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							if(sxx < min) {
								min = sxx;
								edge = ei.elt;
							}
							if(sxx > max) {
								max = sxx;
								edgemax = ei.elt;
							}
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			var ret = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if((function($this) {
					var $r;
					if(ret.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = ret.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,ret);
		}
		if(edgemax != null && edge != edgemax) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edgemax.gnormx;
			ny = edgemax.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			var ret = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),max,inner1,p.outer);
			var pre = null;
			var cx_ite = list.zpp_inner.inner.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if((function($this) {
					var $r;
					if(ret.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = ret.zpp_inner.toiDistance;
					return $r;
				}(this)) < (function($this) {
					var $r;
					if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
					$r = j.zpp_inner.toiDistance;
					return $r;
				}(this))) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			list.zpp_inner.inner.inlined_insert(pre,ret);
		}
	}
	,polysect: function(p,inner,mint) {
		var min = mint;
		var edge = null;
		var ei = p.edges.head;
		var cx_cont = true;
		var cx_itei = p.gverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							min = sxx;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = p.gverts.next;
			var v = cx_itej;
			var e = ei.elt;
			if(inner || e.gnormx * this.dirx + e.gnormy * this.diry < 0) {
				var _vx = 0.0;
				var _vy = 0.0;
				_vx = v.x - u.x;
				_vy = v.y - u.y;
				var _sx = 0.0;
				var _sy = 0.0;
				_sx = u.x - this.originx;
				_sy = u.y - this.originy;
				var den = _vy * this.dirx - _vx * this.diry;
				if(den * den > nape.Config.epsilon) {
					den = 1 / den;
					var sxx = (_vy * _sx - _vx * _sy) * den;
					if(sxx > 0 && sxx < min && sxx <= this.maxdist) {
						var txx = (this.diry * _sx - this.dirx * _sy) * den;
						if(txx > -nape.Config.epsilon && txx < 1 + nape.Config.epsilon) {
							min = sxx;
							edge = ei.elt;
						}
					}
				}
			}
			ei = ei.next;
		} while(false);
		if(edge != null) {
			var nx = 0.0;
			var ny = 0.0;
			nx = edge.gnormx;
			ny = edge.gnormy;
			var inner1 = nx * this.dirx + ny * this.diry > 0;
			if(inner1) {
				nx = -nx;
				ny = -ny;
			}
			return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),min,inner1,p.outer);
		} else return null;
	}
	,circlesect2: function(c,inner,list) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t1 = 1.0;
				nx -= c.worldCOMx * t1;
				ny -= c.worldCOMy * t1;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t1 = imag;
				nx *= t1;
				ny *= t1;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				var res = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if((function($this) {
						var $r;
						if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t1 = (-B + det) * A;
			if(t0 > 0 && t0 <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t = t0;
				nx += this.dirx * t;
				ny += this.diry * t;
				var t = 1.0;
				nx -= c.worldCOMx * t;
				ny -= c.worldCOMy * t;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				nx *= t;
				ny *= t;
				var res = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t0,false,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if((function($this) {
						var $r;
						if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
			if(t1 > 0 && t1 <= this.maxdist && inner) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t = t1;
				nx += this.dirx * t;
				ny += this.diry * t;
				var t = 1.0;
				nx -= c.worldCOMx * t;
				ny -= c.worldCOMy * t;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t = imag;
				nx *= t;
				ny *= t;
				nx = -nx;
				ny = -ny;
				var res = zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t1,true,c.outer);
				var pre = null;
				var cx_ite = list.zpp_inner.inner.head;
				while(cx_ite != null) {
					var j = cx_ite.elt;
					if((function($this) {
						var $r;
						if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = res.zpp_inner.toiDistance;
						return $r;
					}(this)) < (function($this) {
						var $r;
						if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
						$r = j.zpp_inner.toiDistance;
						return $r;
					}(this))) break;
					pre = cx_ite;
					cx_ite = cx_ite.next;
				}
				list.zpp_inner.inner.inlined_insert(pre,res);
			}
		}
	}
	,circlesect: function(c,inner,mint) {
		if(c.zip_worldCOM) {
			if(c.body != null) {
				c.zip_worldCOM = false;
				if(c.zip_localCOM) {
					c.zip_localCOM = false;
					if(c.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) c.polygon.__validate_localCOM();
					if(c.wrap_localCOM != null) {
						c.wrap_localCOM.zpp_inner.x = c.localCOMx;
						c.wrap_localCOM.zpp_inner.y = c.localCOMy;
					}
				}
				c.body.validate_axis();
				c.worldCOMx = c.body.posx + (c.body.axisy * c.localCOMx - c.body.axisx * c.localCOMy);
				c.worldCOMy = c.body.posy + (c.localCOMx * c.body.axisx + c.localCOMy * c.body.axisy);
			}
		}
		var acx = 0.0;
		var acy = 0.0;
		acx = this.originx - c.worldCOMx;
		acy = this.originy - c.worldCOMy;
		var A = this.dirx * this.dirx + this.diry * this.diry;
		var B = 2 * (acx * this.dirx + acy * this.diry);
		var C = acx * acx + acy * acy - c.radius * c.radius;
		var det = B * B - 4 * A * C;
		if(det == 0) {
			var t = -B / 2 * A;
			if((!inner || C > 0) && t > 0 && t < mint && t <= this.maxdist) {
				var nx = 0.0;
				var ny = 0.0;
				nx = this.originx;
				ny = this.originy;
				var t1 = t;
				nx += this.dirx * t1;
				ny += this.diry * t1;
				var t1 = 1.0;
				nx -= c.worldCOMx * t1;
				ny -= c.worldCOMy * t1;
				var d = nx * nx + ny * ny;
				var imag = 1.0 / Math.sqrt(d);
				var t1 = imag;
				nx *= t1;
				ny *= t1;
				if(C <= 0) {
					nx = -nx;
					ny = -ny;
				}
				return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t,C <= 0,c.outer);
			} else return null;
		} else {
			det = Math.sqrt(det);
			A = 1 / (2 * A);
			var t0 = (-B - det) * A;
			var t1 = (-B + det) * A;
			if(t0 > 0) {
				if(t0 < mint && t0 <= this.maxdist) {
					var nx = 0.0;
					var ny = 0.0;
					nx = this.originx;
					ny = this.originy;
					var t = t0;
					nx += this.dirx * t;
					ny += this.diry * t;
					var t = 1.0;
					nx -= c.worldCOMx * t;
					ny -= c.worldCOMy * t;
					var d = nx * nx + ny * ny;
					var imag = 1.0 / Math.sqrt(d);
					var t = imag;
					nx *= t;
					ny *= t;
					return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t0,false,c.outer);
				} else return null;
			} else if(t1 > 0 && inner) {
				if(t1 < mint && t1 <= this.maxdist) {
					var nx = 0.0;
					var ny = 0.0;
					nx = this.originx;
					ny = this.originy;
					var t = t1;
					nx += this.dirx * t;
					ny += this.diry * t;
					var t = 1.0;
					nx -= c.worldCOMx * t;
					ny -= c.worldCOMy * t;
					var d = nx * nx + ny * ny;
					var imag = 1.0 / Math.sqrt(d);
					var t = imag;
					nx *= t;
					ny *= t;
					nx = -nx;
					ny = -ny;
					return zpp_nape.geom.ZPP_ConvexRayResult.getRay(nape.geom.Vec2.get(nx,ny,null),t1,true,c.outer);
				} else return null;
			} else return null;
		}
	}
	,aabbsect: function(a) {
		var cx = this.originx >= a.minx && this.originx <= a.maxx;
		var cy = this.originy >= a.miny && this.originy <= a.maxy;
		if(cx && cy) return 0.0; else {
			var ret = -1.0;
			do {
				if(this.dirx >= 0 && this.originx >= a.maxx) break;
				if(this.dirx <= 0 && this.originx <= a.minx) break;
				if(this.diry >= 0 && this.originy >= a.maxy) break;
				if(this.diry <= 0 && this.originy <= a.miny) break;
				if(this.dirx > 0) {
					var t = (a.minx - this.originx) * this.idirx;
					if(t >= 0 && t <= this.maxdist) {
						var y = this.originy + t * this.diry;
						if(y >= a.miny && y <= a.maxy) {
							ret = t;
							break;
						}
					}
				} else if(this.dirx < 0) {
					var t = (a.maxx - this.originx) * this.idirx;
					if(t >= 0 && t <= this.maxdist) {
						var y = this.originy + t * this.diry;
						if(y >= a.miny && y <= a.maxy) {
							ret = t;
							break;
						}
					}
				}
				if(this.diry > 0) {
					var t = (a.miny - this.originy) * this.idiry;
					if(t >= 0 && t <= this.maxdist) {
						var x = this.originx + t * this.dirx;
						if(x >= a.minx && x <= a.maxx) {
							ret = t;
							break;
						}
					}
				} else if(this.diry < 0) {
					var t = (a.maxy - this.originy) * this.idiry;
					if(t >= 0 && t <= this.maxdist) {
						var x = this.originx + t * this.dirx;
						if(x >= a.minx && x <= a.maxx) {
							ret = t;
							break;
						}
					}
				}
			} while(false);
			return ret;
		}
	}
	,aabbtest: function(a) {
		var dot1 = this.normalx * (this.originx - 0.5 * (a.minx + a.maxx)) + this.normaly * (this.originy - 0.5 * (a.miny + a.maxy));
		var dot2 = this.absnormalx * 0.5 * (a.maxx - a.minx) + this.absnormaly * 0.5 * (a.maxy - a.miny);
		return (function($this) {
			var $r;
			var x = dot1;
			$r = x < 0?-x:x;
			return $r;
		}(this)) < dot2;
	}
	,rayAABB: function() {
		var x0 = this.originx;
		var x1 = x0;
		var y0 = this.originy;
		var y1 = y0;
		if(this.maxdist >= Math.POSITIVE_INFINITY) {
			if(this.dirx > 0) x1 = Math.POSITIVE_INFINITY; else if(this.dirx < 0) x1 = Math.NEGATIVE_INFINITY;
			if(this.diry > 0) y1 = Math.POSITIVE_INFINITY; else if(this.diry < 0) y1 = Math.NEGATIVE_INFINITY;
		} else {
			x1 += this.maxdist * this.dirx;
			y1 += this.maxdist * this.diry;
		}
		if(x1 < x0) {
			var t = x0;
			x0 = x1;
			x1 = t;
		}
		if(y1 < y0) {
			var t = y0;
			y0 = y1;
			y1 = t;
		}
		var rayab = zpp_nape.geom.ZPP_AABB.get(x0,y0,x1,y1);
		return rayab;
	}
	,validate_dir: function() {
		if(this.zip_dir) {
			this.zip_dir = false;
			if(this.dirx * this.dirx + this.diry * this.diry < nape.Config.epsilon) throw "Error: Ray::direction is degenerate";
			var d = this.dirx * this.dirx + this.diry * this.diry;
			var imag = 1.0 / Math.sqrt(d);
			var t = imag;
			this.dirx *= t;
			this.diry *= t;
			this.idirx = 1 / this.dirx;
			this.idiry = 1 / this.diry;
			this.normalx = -this.diry;
			this.normaly = this.dirx;
			this.absnormalx = (function($this) {
				var $r;
				var x = $this.normalx;
				$r = x < 0?-x:x;
				return $r;
			}(this));
			this.absnormaly = (function($this) {
				var $r;
				var x = $this.normaly;
				$r = x < 0?-x:x;
				return $r;
			}(this));
		}
	}
	,invalidate_dir: function() {
		this.zip_dir = true;
	}
	,direction_invalidate: function(x) {
		this.dirx = x.x;
		this.diry = x.y;
		this.zip_dir = true;
	}
	,origin_invalidate: function(x) {
		this.originx = x.x;
		this.originy = x.y;
	}
	,__class__: zpp_nape.geom.ZPP_Ray
}
zpp_nape.geom.ZPP_SimpleVert = function() {
	this.node = null;
	this.next = null;
	this.id = 0;
	this.links = null;
	this.y = 0.0;
	this.x = 0.0;
	this.forced = false;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleVert();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.links = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.links = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.links.next;
		this.links.next = null;
	}
	null;
	this.links.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
};
zpp_nape.geom.ZPP_SimpleVert.__name__ = ["zpp_nape","geom","ZPP_SimpleVert"];
zpp_nape.geom.ZPP_SimpleVert.less_xy = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
}
zpp_nape.geom.ZPP_SimpleVert.swap_nodes = function(p,q) {
	var t = p.node;
	p.node = q.node;
	q.node = t;
}
zpp_nape.geom.ZPP_SimpleVert.get = function(x,y) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleVert(); else {
		ret = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_SimpleVert.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.links.clear();
		this.node = null;
		this.forced = false;
	}
	,__class__: zpp_nape.geom.ZPP_SimpleVert
}
zpp_nape.geom.ZPP_SimpleSeg = function() {
	this.node = null;
	this.prev = null;
	this.next = null;
	this.id = 0;
	this.vertices = null;
	this.right = null;
	this.left = null;
	this.id = zpp_nape.ZPP_ID.ZPP_SimpleSeg();
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) this.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
		this.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = this.vertices.next;
		this.vertices.next = null;
	}
	null;
	this.vertices.lt = $bind(this,this.less_xy);
};
zpp_nape.geom.ZPP_SimpleSeg.__name__ = ["zpp_nape","geom","ZPP_SimpleSeg"];
zpp_nape.geom.ZPP_SimpleSeg.get = function(left,right) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleSeg.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleSeg(); else {
		ret = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
		zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.left = left;
	ret.right = right;
	ret.vertices.insert(left);
	ret.vertices.insert(right);
	return ret;
}
zpp_nape.geom.ZPP_SimpleSeg.prototype = {
	less_xy: function(a,b) {
		return a.x < b.x || a.x == b.x && a.y < b.y;
	}
	,alloc: function() {
	}
	,free: function() {
		this.left = this.right = null;
		this.prev = null;
		this.node = null;
		this.vertices.clear();
	}
	,__class__: zpp_nape.geom.ZPP_SimpleSeg
}
zpp_nape.geom.ZPP_SimpleEvent = function() {
	this.next = null;
	this.node = null;
	this.segment2 = null;
	this.segment = null;
	this.vertex = null;
	this.type = 0;
};
zpp_nape.geom.ZPP_SimpleEvent.__name__ = ["zpp_nape","geom","ZPP_SimpleEvent"];
zpp_nape.geom.ZPP_SimpleEvent.swap_nodes = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
}
zpp_nape.geom.ZPP_SimpleEvent.less_xy = function(a,b) {
	if(a.vertex.x < b.vertex.x) return true; else if(a.vertex.x > b.vertex.x) return false; else if(a.vertex.y < b.vertex.y) return true; else if(a.vertex.y > b.vertex.y) return false; else return a.type < b.type;
}
zpp_nape.geom.ZPP_SimpleEvent.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimpleEvent(); else {
		ret = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.vertex = v;
	return ret;
}
zpp_nape.geom.ZPP_SimpleEvent.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.vertex = null;
		this.segment = this.segment2 = null;
		this.node = null;
	}
	,__class__: zpp_nape.geom.ZPP_SimpleEvent
}
zpp_nape.geom.ZPP_SimpleSweep = function() {
	this.tree = null;
	this.sweepx = 0.0;
	if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) this.tree = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
		this.tree = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = this.tree.next;
		this.tree.next = null;
	}
	null;
	this.tree.lt = $bind(this,this.edge_lt);
	this.tree.swapped = $bind(this,this.swap_nodes);
};
zpp_nape.geom.ZPP_SimpleSweep.__name__ = ["zpp_nape","geom","ZPP_SimpleSweep"];
zpp_nape.geom.ZPP_SimpleSweep.prototype = {
	intersection: function(p,q) {
		if(p == null || q == null) return null; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return null; else {
			var ux = 0.0;
			var uy = 0.0;
			ux = p.right.x - p.left.x;
			uy = p.right.y - p.left.y;
			var vx = 0.0;
			var vy = 0.0;
			vx = q.right.x - q.left.x;
			vy = q.right.y - q.left.y;
			var denom = vy * ux - vx * uy;
			if(denom == 0.0) return null;
			denom = 1 / denom;
			var cx = 0.0;
			var cy = 0.0;
			cx = q.left.x - p.left.x;
			cy = q.left.y - p.left.y;
			var t = (vy * cx - vx * cy) * denom;
			if(t < 0 || t > 1) return null;
			var s = (uy * cx - ux * cy) * denom;
			if(s < 0 || s > 1) return null;
			var vet;
			if(s == 0 || s == 1 || t == 0 || t == 1) {
				var cases = s == 0;
				if(s == 1 && cases) throw "corner case 1a"; else if(s == 1) cases = true;
				if(t == 0 && cases) throw "corner case 1b"; else if(t == 0) cases = true;
				if(t == 1 && cases) throw "corner case 1c";
				vet = s == 0?q.left:s == 1?q.right:t == 0?p.left:p.right;
			} else vet = zpp_nape.geom.ZPP_SimpleVert.get(0.5 * (p.left.x + ux * t + q.left.x + vx * s),0.5 * (p.left.y + uy * t + q.left.y + vy * s));
			var ret = zpp_nape.geom.ZPP_SimpleEvent.get(vet);
			ret.type = 0;
			ret.segment = p;
			ret.segment2 = q;
			return ret;
		}
	}
	,intersect: function(p,q) {
		if(p == null || q == null) return false; else if(p.left == q.left || p.left == q.right || p.right == q.left || p.right == q.right) return false; else {
			var lsign = (q.left.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.left.y - p.left.y);
			var rsign = (q.right.x - p.left.x) * (p.right.y - p.left.y) - (p.right.x - p.left.x) * (q.right.y - p.left.y);
			if(lsign * rsign > 0) return false; else {
				var lsign2 = (p.left.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.left.y - q.left.y);
				var rsign2 = (p.right.x - q.left.x) * (q.right.y - q.left.y) - (q.right.x - q.left.x) * (p.right.y - q.left.y);
				if(lsign2 * rsign2 > 0) return false; else if(lsign * rsign >= 0 && lsign2 * rsign2 >= 0) return true; else return true;
			}
		}
	}
	,remove: function(e) {
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) nxt.data.prev = e.prev;
		if(pre != null) pre.data.next = e.next;
		this.tree.remove_node(e.node);
		e.node = null;
	}
	,add: function(e) {
		e.node = this.tree.insert(e);
		var nxt = this.tree.successor_node(e.node);
		var pre = this.tree.predecessor_node(e.node);
		if(nxt != null) {
			e.next = nxt.data;
			nxt.data.prev = e;
		}
		if(pre != null) {
			e.prev = pre.data;
			pre.data.next = e;
		}
		return e;
	}
	,clear: function() {
		this.tree.clear();
	}
	,edge_lt: function(p,q) {
		var ux = 0.0;
		var uy = 0.0;
		var vx = 0.0;
		var vy = 0.0;
		var flip;
		if(p.left == q.left && p.right == q.right) return false; else if(p.left == q.right) return p.left.x == p.right.x?p.left.y < p.right.y?p.left.y > q.left.y:p.right.y > q.left.y:(function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.left) return !(q.left.x == q.right.x?q.left.y < q.right.y?q.left.y > p.left.y:q.right.y > p.left.y:(function($this) {
			var $r;
			flip = q.right.x < q.left.x;
			{
				ux = q.right.x - q.left.x;
				uy = q.right.y - q.left.y;
			}
			{
				vx = p.left.x - q.left.x;
				vy = p.left.y - q.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0); else if(p.left == q.left) return p.left.x == p.right.x?p.left.y < p.right.y?p.left.y > q.right.y:p.right.y > q.right.y:(function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.right.x - p.left.x;
				vy = q.right.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0; else if(p.right == q.right) return p.left.x == p.right.x?p.left.y < p.right.y?p.left.y > q.left.y:p.right.y > q.left.y:(function($this) {
			var $r;
			flip = p.right.x < p.left.x;
			{
				ux = p.right.x - p.left.x;
				uy = p.right.y - p.left.y;
			}
			{
				vx = q.left.x - p.left.x;
				vy = q.left.y - p.left.y;
			}
			$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
			return $r;
		}(this)) < 0;
		if(p.left.x == p.right.x) {
			if(q.left.x == q.right.x) {
				var pmax = p.left.y < p.right.y?p.right:p.left;
				var qmax = q.left.y < q.right.y?q.right:q.left;
				return pmax.y > qmax.y;
			} else {
				var plrg = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.left.x - q.left.x;
						vy = p.left.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this));
				var aplrg = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.right.x - q.left.x;
						vy = p.right.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this));
				if(plrg * aplrg >= 0) return plrg >= 0.0; else return this.sweepx >= p.left.x;
			}
		} else if(q.left.x == q.right.x) {
			var qlrg = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.left.x - p.left.x;
					vy = q.left.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this));
			var aqlrg = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.right.x - p.left.x;
					vy = q.right.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this));
			if(qlrg * aqlrg >= 0) return qlrg < 0.0; else return this.sweepx < q.left.x;
		} else {
			var qlrg = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.left.x - p.left.x;
					vy = q.left.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			var aqlrg = (function($this) {
				var $r;
				flip = p.right.x < p.left.x;
				{
					ux = p.right.x - p.left.x;
					uy = p.right.y - p.left.y;
				}
				{
					vx = q.right.x - p.left.x;
					vy = q.right.y - p.left.y;
				}
				$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
				return $r;
			}(this)) < 0.0;
			if(qlrg == aqlrg) return qlrg; else {
				var plrg = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.left.x - q.left.x;
						vy = p.left.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				var aplrg = (function($this) {
					var $r;
					flip = q.right.x < q.left.x;
					{
						ux = q.right.x - q.left.x;
						uy = q.right.y - q.left.y;
					}
					{
						vx = p.right.x - q.left.x;
						vy = p.right.y - q.left.y;
					}
					$r = flip?uy * vx - ux * vy:vy * ux - vx * uy;
					return $r;
				}(this)) >= 0.0;
				if(plrg == aplrg) return plrg;
				var py = (this.sweepx - p.left.x) / (p.right.x - p.left.x) * (p.right.y - p.left.y) + p.left.y;
				var qy = (this.sweepx - q.left.x) / (q.right.x - q.left.x) * (q.right.y - q.left.y) + q.left.y;
				return py > qy;
			}
		}
	}
	,swap_nodes: function(p,q) {
		var t = p.node;
		p.node = q.node;
		q.node = t;
	}
	,__class__: zpp_nape.geom.ZPP_SimpleSweep
}
zpp_nape.geom.ZPP_Simple = function() { }
zpp_nape.geom.ZPP_Simple.__name__ = ["zpp_nape","geom","ZPP_Simple"];
zpp_nape.geom.ZPP_Simple.decompose = function(poly,rets) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	if(zpp_nape.geom.ZPP_Simple.vertices == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) zpp_nape.geom.ZPP_Simple.vertices = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			zpp_nape.geom.ZPP_Simple.vertices = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = zpp_nape.geom.ZPP_Simple.vertices.next;
			zpp_nape.geom.ZPP_Simple.vertices.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.vertices.lt = zpp_nape.geom.ZPP_SimpleVert.less_xy;
		zpp_nape.geom.ZPP_Simple.vertices.swapped = zpp_nape.geom.ZPP_SimpleVert.swap_nodes;
	}
	if(zpp_nape.geom.ZPP_Simple.queue == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.queue = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.queue = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.queue.next;
			zpp_nape.geom.ZPP_Simple.queue.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.queue.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
		zpp_nape.geom.ZPP_Simple.queue.swapped = zpp_nape.geom.ZPP_SimpleEvent.swap_nodes;
	}
	var fst = null;
	var pre = null;
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			var vert = zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y);
			var vx = (function($this) {
				var $r;
				var cur = zpp_nape.geom.ZPP_Simple.vertices.parent;
				while(cur != null) if(zpp_nape.geom.ZPP_Simple.vertices.lt(vert,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.vertices.lt(cur.data,vert)) cur = cur.next; else break;
				$r = cur;
				return $r;
			}(this));
			if(vx != null) {
				var o = vert;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
				vert = vx.data;
			} else vert.node = zpp_nape.geom.ZPP_Simple.vertices.insert(vert);
			if(pre != null) {
				var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
				var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(vert);
				var seg;
				if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)) {
					e1.type = 1;
					e2.type = 2;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,vert);
				} else {
					e1.type = 2;
					e2.type = 1;
					seg = zpp_nape.geom.ZPP_SimpleSeg.get(vert,pre);
				}
				e1.segment = e2.segment = seg;
				zpp_nape.geom.ZPP_Simple.queue.insert(e1);
				zpp_nape.geom.ZPP_Simple.queue.insert(e2);
				pre.links.insert(vert);
				vert.links.insert(pre);
			}
			pre = vert;
			if(fst == null) fst = vert;
			nite = nite.next;
		} while(nite != L);
	}
	var e1 = zpp_nape.geom.ZPP_SimpleEvent.get(pre);
	var e2 = zpp_nape.geom.ZPP_SimpleEvent.get(fst);
	var seg;
	if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)) {
		e1.type = 1;
		e2.type = 2;
		seg = zpp_nape.geom.ZPP_SimpleSeg.get(pre,fst);
	} else {
		e1.type = 2;
		e2.type = 1;
		seg = zpp_nape.geom.ZPP_SimpleSeg.get(fst,pre);
	}
	e1.segment = e2.segment = seg;
	zpp_nape.geom.ZPP_Simple.queue.insert(e1);
	zpp_nape.geom.ZPP_Simple.queue.insert(e2);
	pre.links.insert(fst);
	fst.links.insert(pre);
	if(zpp_nape.geom.ZPP_Simple.ints == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) zpp_nape.geom.ZPP_Simple.ints = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			zpp_nape.geom.ZPP_Simple.ints = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = zpp_nape.geom.ZPP_Simple.ints.next;
			zpp_nape.geom.ZPP_Simple.ints.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Simple.ints.lt = zpp_nape.geom.ZPP_SimpleEvent.less_xy;
	}
	while(!zpp_nape.geom.ZPP_Simple.queue.empty()) {
		var e = zpp_nape.geom.ZPP_Simple.queue.pop_front();
		zpp_nape.geom.ZPP_Simple.sweep.sweepx = e.vertex.x;
		if(e.type == 1) {
			var s = e.segment;
			zpp_nape.geom.ZPP_Simple.sweep.add(s);
			if(s.next != null && s != null && !(s.next.id < s.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.next.id,s.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.next.id))) {
				var intx = zpp_nape.geom.ZPP_Simple.sweep.intersection(s.next,s);
				if(intx != null) {
					if(intx.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur.data,intx)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur.data,intx)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = intx.vertex;
								o.links.clear();
								o.node = null;
								o.forced = false;
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								intx.vertex = vx.data.vertex;
								vx.data = intx;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx);
							}
							if(s.next.id < s.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.next.id,s.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx.segment || intx.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = intx.vertex;
							o.links.clear();
							o.node = null;
							o.forced = false;
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = intx;
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = intx.vertex;
						o.links.clear();
						o.node = null;
						o.forced = false;
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = intx;
						o.vertex = null;
						o.segment = o.segment2 = null;
						o.node = null;
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
			if(s != null && s.prev != null && !(s.id < s.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(s.id,s.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(s.prev.id,s.id))) {
				var intx = zpp_nape.geom.ZPP_Simple.sweep.intersection(s,s.prev);
				if(intx != null) {
					if(intx.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur.data,intx)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur.data,intx)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = intx.vertex;
								o.links.clear();
								o.node = null;
								o.forced = false;
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								intx.vertex = vx.data.vertex;
								vx.data = intx;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx);
							}
							if(s.id < s.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.id,s.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(s.prev.id,s.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx.segment || intx.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = intx.vertex;
							o.links.clear();
							o.node = null;
							o.forced = false;
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = intx;
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = intx.vertex;
						o.links.clear();
						o.node = null;
						o.forced = false;
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = intx;
						o.vertex = null;
						o.segment = o.segment2 = null;
						o.node = null;
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
		} else if(e.type == 2) {
			var s = e.segment;
			if(s.node != null) {
				var nxt = s.next;
				var pre1 = s.prev;
				zpp_nape.geom.ZPP_Simple.sweep.remove(s);
				var o = s;
				o.left = o.right = null;
				o.prev = null;
				o.node = null;
				o.vertices.clear();
				o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
				zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
				if(nxt != null && pre1 != null && !(nxt.id < pre1.id?zpp_nape.geom.ZPP_Simple.inthash.has(nxt.id,pre1.id):zpp_nape.geom.ZPP_Simple.inthash.has(pre1.id,nxt.id))) {
					var intx = zpp_nape.geom.ZPP_Simple.sweep.intersection(nxt,pre1);
					if(intx != null) {
						if(intx.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
							var ex = (function($this) {
								var $r;
								var cur = zpp_nape.geom.ZPP_Simple.queue.parent;
								while(cur != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur.data,intx)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(ex == null) {
								var vx = (function($this) {
									var $r;
									var cur = zpp_nape.geom.ZPP_Simple.ints.parent;
									while(cur != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur.data,intx)) cur = cur.next; else break;
									$r = cur;
									return $r;
								}(this));
								if(vx != null) {
									var o = intx.vertex;
									o.links.clear();
									o.node = null;
									o.forced = false;
									o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
									zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
									intx.vertex = vx.data.vertex;
									vx.data = intx;
									zpp_nape.geom.ZPP_Simple.queue.insert(intx);
								} else {
									zpp_nape.geom.ZPP_Simple.queue.insert(intx);
									zpp_nape.geom.ZPP_Simple.ints.insert(intx);
								}
								if(nxt.id < pre1.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(nxt.id,pre1.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(pre1.id,nxt.id,true));
							} else {
								var x = ex.data;
								if(x.segment != intx.segment || intx.segment2 != x.segment2) throw "corner case 2, shiiiit.";
								var o = intx.vertex;
								o.links.clear();
								o.node = null;
								o.forced = false;
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								var o = intx;
								o.vertex = null;
								o.segment = o.segment2 = null;
								o.node = null;
								o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
								zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
							}
						} else {
							var o = intx.vertex;
							o.links.clear();
							o.node = null;
							o.forced = false;
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = intx;
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					}
				}
			}
		} else {
			var intx = e.vertex;
			var pnull = intx.node == null;
			var a = e.segment;
			var b = e.segment2;
			if(b.next != a) {
				var t = a;
				a = b;
				b = t;
			}
			var anew = (function($this) {
				var $r;
				var cur = a.vertices.parent;
				while(cur != null) if(a.vertices.lt(intx,cur.data)) cur = cur.prev; else if(a.vertices.lt(cur.data,intx)) cur = cur.next; else break;
				$r = cur;
				return $r;
			}(this)) == null;
			var bnew = (function($this) {
				var $r;
				var cur = b.vertices.parent;
				while(cur != null) if(b.vertices.lt(intx,cur.data)) cur = cur.prev; else if(b.vertices.lt(cur.data,intx)) cur = cur.next; else break;
				$r = cur;
				return $r;
			}(this)) == null;
			if(anew) {
				var aint = a.vertices.insert(intx);
				var naleft = intx == a.left?intx:a.vertices.predecessor_node(aint).data;
				var naright = intx == a.right?intx:a.vertices.successor_node(aint).data;
				naleft.links.remove(naright);
				if(intx != naleft) naleft.links.insert(intx);
				naright.links.remove(naleft);
				if(intx != naright) naright.links.insert(intx);
				if(intx != naleft) intx.links.insert(naleft);
				if(intx != naright) intx.links.insert(naright);
			}
			if(bnew) {
				var bint = b.vertices.insert(intx);
				var nbleft = intx == b.left?intx:b.vertices.predecessor_node(bint).data;
				var nbright = intx == b.right?intx:b.vertices.successor_node(bint).data;
				nbleft.links.remove(nbright);
				if(intx != nbleft) nbleft.links.insert(intx);
				nbright.links.remove(nbleft);
				if(intx != nbright) nbright.links.insert(intx);
				if(intx != nbleft) intx.links.insert(nbleft);
				if(intx != nbright) intx.links.insert(nbright);
			}
			if(pnull) intx.node = zpp_nape.geom.ZPP_Simple.vertices.insert(intx);
			intx.forced = true;
			if(pnull) {
				var an = a.node;
				var bn = b.node;
				an.data = b;
				bn.data = a;
				a.node = bn;
				b.node = an;
				b.next = a.next;
				a.next = b;
				a.prev = b.prev;
				b.prev = a;
				if(a.prev != null) a.prev.next = a;
				if(b.next != null) b.next.prev = b;
			}
			if(b.next != null && b != null && !(b.next.id < b.id?zpp_nape.geom.ZPP_Simple.inthash.has(b.next.id,b.id):zpp_nape.geom.ZPP_Simple.inthash.has(b.id,b.next.id))) {
				var intx1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(b.next,b);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx1,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur.data,intx1)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx1,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur.data,intx1)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = intx1.vertex;
								o.links.clear();
								o.node = null;
								o.forced = false;
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								intx1.vertex = vx.data.vertex;
								vx.data = intx1;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx1);
							}
							if(b.next.id < b.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.next.id,b.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(b.id,b.next.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx1.segment || intx1.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = intx1.vertex;
							o.links.clear();
							o.node = null;
							o.forced = false;
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = intx1;
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = intx1.vertex;
						o.links.clear();
						o.node = null;
						o.forced = false;
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = intx1;
						o.vertex = null;
						o.segment = o.segment2 = null;
						o.node = null;
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
			if(a != null && a.prev != null && !(a.id < a.prev.id?zpp_nape.geom.ZPP_Simple.inthash.has(a.id,a.prev.id):zpp_nape.geom.ZPP_Simple.inthash.has(a.prev.id,a.id))) {
				var intx1 = zpp_nape.geom.ZPP_Simple.sweep.intersection(a,a.prev);
				if(intx1 != null) {
					if(intx1.vertex.x >= zpp_nape.geom.ZPP_Simple.sweep.sweepx) {
						var ex = (function($this) {
							var $r;
							var cur = zpp_nape.geom.ZPP_Simple.queue.parent;
							while(cur != null) if(zpp_nape.geom.ZPP_Simple.queue.lt(intx1,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.queue.lt(cur.data,intx1)) cur = cur.next; else break;
							$r = cur;
							return $r;
						}(this));
						if(ex == null) {
							var vx = (function($this) {
								var $r;
								var cur = zpp_nape.geom.ZPP_Simple.ints.parent;
								while(cur != null) if(zpp_nape.geom.ZPP_Simple.ints.lt(intx1,cur.data)) cur = cur.prev; else if(zpp_nape.geom.ZPP_Simple.ints.lt(cur.data,intx1)) cur = cur.next; else break;
								$r = cur;
								return $r;
							}(this));
							if(vx != null) {
								var o = intx1.vertex;
								o.links.clear();
								o.node = null;
								o.forced = false;
								o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
								zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
								intx1.vertex = vx.data.vertex;
								vx.data = intx1;
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
							} else {
								zpp_nape.geom.ZPP_Simple.queue.insert(intx1);
								zpp_nape.geom.ZPP_Simple.ints.insert(intx1);
							}
							if(a.id < a.prev.id) zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.id,a.prev.id,true)); else zpp_nape.geom.ZPP_Simple.inthash.add(zpp_nape.util.Hashable2_Boolfalse.get(a.prev.id,a.id,true));
						} else {
							var x = ex.data;
							if(x.segment != intx1.segment || intx1.segment2 != x.segment2) throw "corner case 2, shiiiit.";
							var o = intx1.vertex;
							o.links.clear();
							o.node = null;
							o.forced = false;
							o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
							zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
							var o = intx1;
							o.vertex = null;
							o.segment = o.segment2 = null;
							o.node = null;
							o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
							zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
						}
					} else {
						var o = intx1.vertex;
						o.links.clear();
						o.node = null;
						o.forced = false;
						o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
						zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
						var o = intx1;
						o.vertex = null;
						o.segment = o.segment2 = null;
						o.node = null;
						o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
						zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
					}
				}
			}
			zpp_nape.geom.ZPP_Simple.ints.remove(e);
		}
		var o = e;
		o.vertex = null;
		o.segment = o.segment2 = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
	}
	var _g1 = 0, _g = zpp_nape.geom.ZPP_Simple.inthash.table.length;
	while(_g1 < _g) {
		var i = _g1++;
		var n = zpp_nape.geom.ZPP_Simple.inthash.table[i];
		if(n == null) continue;
		while(n != null) {
			var t = n.hnext;
			n.hnext = null;
			var o = n;
			o.next = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
			zpp_nape.util.Hashable2_Boolfalse.zpp_pool = o;
			n = t;
		}
		zpp_nape.geom.ZPP_Simple.inthash.table[i] = null;
	}
	if(rets == null) rets = new zpp_nape.util.ZNPList_ZPP_GeomVert();
	while(!zpp_nape.geom.ZPP_Simple.vertices.empty()) zpp_nape.geom.ZPP_Simple.clip_polygon(zpp_nape.geom.ZPP_Simple.vertices,rets);
	return rets;
}
zpp_nape.geom.ZPP_Simple.clip_polygon = function(vertices,rets) {
	var ret = null;
	var cur = vertices.first();
	var fst = cur;
	var pren = cur.links.parent;
	var nxtn = pren.prev == null?pren.next:pren.prev;
	var pre = pren.data;
	var nxt = nxtn.data;
	if((function($this) {
		var $r;
		var ux = 0.0;
		var uy = 0.0;
		{
			ux = cur.x - pre.x;
			uy = cur.y - pre.y;
		}
		var vx = 0.0;
		var vy = 0.0;
		{
			vx = nxt.x - cur.x;
			vy = nxt.y - cur.y;
		}
		$r = vy * ux - vx * uy;
		return $r;
	}(this)) < 0) nxt = pre;
	ret = (function($this) {
		var $r;
		var obj = zpp_nape.geom.ZPP_GeomVert.get(cur.x,cur.y);
		if(ret == null) ret = obj.prev = obj.next = obj; else {
			obj.prev = ret;
			obj.next = ret.next;
			ret.next.prev = obj;
			ret.next = obj;
		}
		$r = obj;
		return $r;
	}(this));
	ret.forced = cur.forced;
	while(true) {
		cur.links.remove(nxt);
		nxt.links.remove(cur);
		if(nxt == fst) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			break;
		}
		ret = (function($this) {
			var $r;
			var obj = zpp_nape.geom.ZPP_GeomVert.get(nxt.x,nxt.y);
			if(ret == null) ret = obj.prev = obj.next = obj; else {
				obj.prev = ret;
				obj.next = ret.next;
				ret.next.prev = obj;
				ret.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		ret.forced = nxt.forced;
		if(nxt.links.singular()) {
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			cur = nxt;
			nxt = nxt.links.parent.data;
		} else {
			var min = null;
			var minl = 0.0;
			if(!nxt.links.empty()) {
				var set_ite = nxt.links.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var p = set_ite.data;
					if(min == null) {
						min = p;
						minl = (function($this) {
							var $r;
							var ux = 0.0;
							var uy = 0.0;
							{
								ux = nxt.x - cur.x;
								uy = nxt.y - cur.y;
							}
							var vx = 0.0;
							var vy = 0.0;
							{
								vx = p.x - nxt.x;
								vy = p.y - nxt.y;
							}
							$r = vy * ux - vx * uy;
							return $r;
						}(this));
					} else {
						var nleft = (function($this) {
							var $r;
							var ux = 0.0;
							var uy = 0.0;
							{
								ux = nxt.x - cur.x;
								uy = nxt.y - cur.y;
							}
							var vx = 0.0;
							var vy = 0.0;
							{
								vx = p.x - nxt.x;
								vy = p.y - nxt.y;
							}
							$r = vy * ux - vx * uy;
							return $r;
						}(this));
						if(nleft > 0 && minl <= 0) {
							min = p;
							minl = nleft;
						} else if(minl * nleft >= 0) {
							var pleft = (function($this) {
								var $r;
								var ux = 0.0;
								var uy = 0.0;
								{
									ux = nxt.x - p.x;
									uy = nxt.y - p.y;
								}
								var vx = 0.0;
								var vy = 0.0;
								{
									vx = min.x - nxt.x;
									vy = min.y - nxt.y;
								}
								$r = vy * ux - vx * uy;
								return $r;
							}(this));
							if(pleft > 0) {
								min = p;
								minl = nleft;
							}
						}
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			if(cur.links.empty()) {
				vertices.remove(cur);
				var o = cur;
				o.links.clear();
				o.node = null;
				o.forced = false;
				o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
				zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
			}
			cur = nxt;
			nxt = min;
		}
	}
	vertices.remove(fst);
	var o = fst;
	o.links.clear();
	o.node = null;
	o.forced = false;
	o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
	zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
	rets.add(ret);
}
zpp_nape.geom.ZPP_Simple.isSimple = function(poly) {
	if(zpp_nape.geom.ZPP_Simple.sweep == null) {
		zpp_nape.geom.ZPP_Simple.sweep = new zpp_nape.geom.ZPP_SimpleSweep();
		zpp_nape.geom.ZPP_Simple.inthash = new zpp_nape.util.FastHash2_Hashable2_Boolfalse();
	}
	var vertices = zpp_nape.geom.ZPP_Simple.list_vertices;
	if(vertices == null) vertices = zpp_nape.geom.ZPP_Simple.list_vertices = new zpp_nape.util.ZNPList_ZPP_SimpleVert();
	var F = poly;
	var L = poly;
	if(F != null) {
		var nite = F;
		do {
			var v = nite;
			vertices.add(zpp_nape.geom.ZPP_SimpleVert.get(v.x,v.y));
			nite = nite.next;
		} while(nite != L);
	}
	var queue = zpp_nape.geom.ZPP_Simple.list_queue;
	if(queue == null) queue = zpp_nape.geom.ZPP_Simple.list_queue = new zpp_nape.util.ZNPList_ZPP_SimpleEvent();
	var cx_ite = vertices.head;
	var u = cx_ite.elt;
	cx_ite = cx_ite.next;
	while(cx_ite != null) {
		var v = cx_ite.elt;
		var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
		var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v));
		e1.segment = e2.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)?(function($this) {
			var $r;
			e1.type = 1;
			e2.type = 2;
			$r = zpp_nape.geom.ZPP_SimpleSeg.get(u,v);
			return $r;
		}(this)):(function($this) {
			var $r;
			e1.type = 2;
			e2.type = 1;
			$r = zpp_nape.geom.ZPP_SimpleSeg.get(v,u);
			return $r;
		}(this));
		u = v;
		cx_ite = cx_ite.next;
	}
	var v = vertices.head.elt;
	var e1 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(u));
	var e2 = queue.add(zpp_nape.geom.ZPP_SimpleEvent.get(v));
	e1.segment = e2.segment = zpp_nape.geom.ZPP_SimpleEvent.less_xy(e1,e2)?(function($this) {
		var $r;
		e1.type = 1;
		e2.type = 2;
		$r = zpp_nape.geom.ZPP_SimpleSeg.get(u,v);
		return $r;
	}(this)):(function($this) {
		var $r;
		e1.type = 2;
		e2.type = 1;
		$r = zpp_nape.geom.ZPP_SimpleSeg.get(v,u);
		return $r;
	}(this));
	var xxlist = queue;
	if(!(xxlist.head == null) && xxlist.head.next != null) {
		var head = xxlist.head;
		var tail = null;
		var left = null;
		var right = null;
		var nxt = null;
		var listSize = 1;
		var numMerges, leftSize, rightSize;
		do {
			numMerges = 0;
			left = head;
			tail = head = null;
			while(left != null) {
				numMerges++;
				right = left;
				leftSize = 0;
				rightSize = listSize;
				while(right != null && leftSize < listSize) {
					leftSize++;
					right = right.next;
				}
				while(leftSize > 0 || rightSize > 0 && right != null) {
					if(leftSize == 0) {
						nxt = right;
						right = right.next;
						rightSize--;
					} else if(rightSize == 0 || right == null) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else if(zpp_nape.geom.ZPP_SimpleEvent.less_xy(left.elt,right.elt)) {
						nxt = left;
						left = left.next;
						leftSize--;
					} else {
						nxt = right;
						right = right.next;
						rightSize--;
					}
					if(tail != null) tail.next = nxt; else head = nxt;
					tail = nxt;
				}
				left = right;
			}
			tail.next = null;
			listSize <<= 1;
		} while(numMerges > 1);
		xxlist.head = head;
		xxlist.modified = true;
		xxlist.pushmod = true;
	}
	var ret = true;
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		var seg = e.segment;
		if(e.type == 1) {
			zpp_nape.geom.ZPP_Simple.sweep.add(seg);
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.next) || zpp_nape.geom.ZPP_Simple.sweep.intersect(seg,seg.prev)) {
				ret = false;
				break;
			}
		} else if(e.type == 2) {
			if(zpp_nape.geom.ZPP_Simple.sweep.intersect(seg.prev,seg.next)) {
				ret = false;
				break;
			}
			zpp_nape.geom.ZPP_Simple.sweep.remove(seg);
			var o = seg;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o = e;
		o.vertex = null;
		o.segment = o.segment2 = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
	}
	while(!(queue.head == null)) {
		var e = queue.pop_unsafe();
		if(e.type == 2) {
			var o = e.segment;
			o.left = o.right = null;
			o.prev = null;
			o.node = null;
			o.vertices.clear();
			o.next = zpp_nape.geom.ZPP_SimpleSeg.zpp_pool;
			zpp_nape.geom.ZPP_SimpleSeg.zpp_pool = o;
		}
		var o = e;
		o.vertex = null;
		o.segment = o.segment2 = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_SimpleEvent.zpp_pool;
		zpp_nape.geom.ZPP_SimpleEvent.zpp_pool = o;
	}
	zpp_nape.geom.ZPP_Simple.sweep.clear();
	while(!(vertices.head == null)) {
		var o = vertices.pop_unsafe();
		o.links.clear();
		o.node = null;
		o.forced = false;
		o.next = zpp_nape.geom.ZPP_SimpleVert.zpp_pool;
		zpp_nape.geom.ZPP_SimpleVert.zpp_pool = o;
	}
	return ret;
}
zpp_nape.geom.ZPP_SimplifyV = function() {
	this.forced = false;
	this.flag = false;
	this.prev = null;
	this.next = null;
	this.y = 0.0;
	this.x = 0.0;
};
zpp_nape.geom.ZPP_SimplifyV.__name__ = ["zpp_nape","geom","ZPP_SimplifyV"];
zpp_nape.geom.ZPP_SimplifyV.get = function(v) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyV.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyV(); else {
		ret = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyV.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.x = v.x;
	ret.y = v.y;
	ret.flag = false;
	return ret;
}
zpp_nape.geom.ZPP_SimplifyV.prototype = {
	alloc: function() {
	}
	,free: function() {
	}
	,__class__: zpp_nape.geom.ZPP_SimplifyV
}
zpp_nape.geom.ZPP_SimplifyP = function() {
	this.max = null;
	this.min = null;
	this.next = null;
};
zpp_nape.geom.ZPP_SimplifyP.__name__ = ["zpp_nape","geom","ZPP_SimplifyP"];
zpp_nape.geom.ZPP_SimplifyP.get = function(min,max) {
	var ret;
	if(zpp_nape.geom.ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.geom.ZPP_SimplifyP(); else {
		ret = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.min = min;
	ret.max = max;
	return ret;
}
zpp_nape.geom.ZPP_SimplifyP.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.min = this.max = null;
	}
	,__class__: zpp_nape.geom.ZPP_SimplifyP
}
zpp_nape.geom.ZPP_Simplify = function() { }
zpp_nape.geom.ZPP_Simplify.__name__ = ["zpp_nape","geom","ZPP_Simplify"];
zpp_nape.geom.ZPP_Simplify.lessval = function(a,b) {
	return a.x - b.x + (a.y - b.y);
}
zpp_nape.geom.ZPP_Simplify.less = function(a,b) {
	return a.x - b.x + (a.y - b.y) < 0.0;
}
zpp_nape.geom.ZPP_Simplify.distance = function(v,a,b) {
	var nx = 0.0;
	var ny = 0.0;
	nx = b.x - a.x;
	ny = b.y - a.y;
	var cx = 0.0;
	var cy = 0.0;
	cx = v.x - a.x;
	cy = v.y - a.y;
	var den = nx * nx + ny * ny;
	if(den == 0.0) return cx * cx + cy * cy; else {
		var t = (cx * nx + cy * ny) / (nx * nx + ny * ny);
		if(t <= 0) return cx * cx + cy * cy; else if(t >= 1) return zpp_nape.geom.ZPP_VecMath.vec_dsq(v.x,v.y,b.x,b.y); else {
			var t1 = t;
			cx -= nx * t1;
			cy -= ny * t1;
			return cx * cx + cy * cy;
		}
	}
}
zpp_nape.geom.ZPP_Simplify.simplify = function(P,epsilon) {
	var ret = null;
	var min = null;
	var max = null;
	epsilon *= epsilon;
	if(zpp_nape.geom.ZPP_Simplify.stack == null) zpp_nape.geom.ZPP_Simplify.stack = new zpp_nape.util.ZNPList_ZPP_SimplifyP();
	var pre = null;
	var fst = null;
	var cur = P;
	do {
		var v = zpp_nape.geom.ZPP_SimplifyV.get(cur);
		v.forced = cur.forced;
		if(v.forced) {
			v.flag = true;
			if(pre != null) zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,v)); else fst = v;
			pre = v;
		}
		ret = (function($this) {
			var $r;
			var obj = v;
			if(ret == null) ret = obj.prev = obj.next = obj; else {
				obj.prev = ret;
				obj.next = ret.next;
				ret.next.prev = obj;
				ret.next = obj;
			}
			$r = obj;
			return $r;
		}(this));
		if(min == null) {
			min = ret;
			max = ret;
		} else {
			if(ret.x - min.x + (ret.y - min.y) < 0.0) min = ret;
			if(max.x - ret.x + (max.y - ret.y) < 0.0) max = ret;
		}
		cur = cur.next;
	} while(cur != P);
	if(zpp_nape.geom.ZPP_Simplify.stack.head == null) {
		if(fst == null) {
			min.flag = max.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,max));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,min));
		} else {
			var d1 = min.x - fst.x + (min.y - fst.y);
			if(d1 < 0) d1 = -d1;
			var d2 = max.x - fst.x + (max.y - fst.y);
			if(d2 < 0) d2 = -d2;
			if(d1 > d2) {
				min.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,min));
			} else {
				max.flag = fst.flag = true;
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(max,fst));
				zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(fst,max));
			}
		}
	} else zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(pre,fst));
	while(!(zpp_nape.geom.ZPP_Simplify.stack.head == null)) {
		var cur1 = zpp_nape.geom.ZPP_Simplify.stack.pop_unsafe();
		var min1 = cur1.min;
		var max1 = cur1.max;
		var o = cur1;
		o.min = o.max = null;
		o.next = zpp_nape.geom.ZPP_SimplifyP.zpp_pool;
		zpp_nape.geom.ZPP_SimplifyP.zpp_pool = o;
		var dmax = epsilon;
		var dv = null;
		var ite = min1.next;
		while(ite != max1) {
			var dist = zpp_nape.geom.ZPP_Simplify.distance(ite,min1,max1);
			if(dist > dmax) {
				dmax = dist;
				dv = ite;
			}
			ite = ite.next;
		}
		if(dv != null) {
			dv.flag = true;
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(min1,dv));
			zpp_nape.geom.ZPP_Simplify.stack.add(zpp_nape.geom.ZPP_SimplifyP.get(dv,max1));
		}
	}
	var retp = null;
	while(ret != null) {
		if(ret.flag) {
			retp = (function($this) {
				var $r;
				var obj = zpp_nape.geom.ZPP_GeomVert.get(ret.x,ret.y);
				if(retp == null) retp = obj.prev = obj.next = obj; else {
					obj.prev = retp;
					obj.next = retp.next;
					retp.next.prev = obj;
					retp.next = obj;
				}
				$r = obj;
				return $r;
			}(this));
			retp.forced = ret.forced;
		}
		ret = ret != null && ret.prev == ret?(function($this) {
			var $r;
			ret.next = ret.prev = null;
			{
				var o = ret;
				o.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
				zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o;
			}
			$r = ret = null;
			return $r;
		}(this)):(function($this) {
			var $r;
			var retnodes = ret.next;
			ret.prev.next = ret.next;
			ret.next.prev = ret.prev;
			ret.next = ret.prev = null;
			{
				var o = ret;
				o.next = zpp_nape.geom.ZPP_SimplifyV.zpp_pool;
				zpp_nape.geom.ZPP_SimplifyV.zpp_pool = o;
			}
			ret = null;
			$r = retnodes;
			return $r;
		}(this));
	}
	return retp;
}
zpp_nape.geom.ZPP_ToiEvent = function() {
	this.kinematic = false;
	this.failed = false;
	this.slipped = false;
	this.axis = null;
	this.c2 = null;
	this.c1 = null;
	this.frozen2 = false;
	this.frozen1 = false;
	this.arbiter = null;
	this.s2 = null;
	this.s1 = null;
	this.toi = 0.0;
	this.next = null;
	this.c1 = new zpp_nape.geom.ZPP_Vec2();
	this.c2 = new zpp_nape.geom.ZPP_Vec2();
	this.axis = new zpp_nape.geom.ZPP_Vec2();
};
zpp_nape.geom.ZPP_ToiEvent.__name__ = ["zpp_nape","geom","ZPP_ToiEvent"];
zpp_nape.geom.ZPP_ToiEvent.prototype = {
	free: function() {
	}
	,alloc: function() {
		this.failed = false;
		this.s1 = this.s2 = null;
		this.arbiter = null;
	}
	,__class__: zpp_nape.geom.ZPP_ToiEvent
}
zpp_nape.geom.ZPP_SweepDistance = function() { }
zpp_nape.geom.ZPP_SweepDistance.__name__ = ["zpp_nape","geom","ZPP_SweepDistance"];
zpp_nape.geom.ZPP_SweepDistance.dynamicSweep = function(toi,timeStep,lowerBound,negRadius,userAPI) {
	if(userAPI == null) userAPI = false;
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = b2.velx - b1.velx;
	deltay = b2.vely - b1.vely;
	var ang1 = b1.angvel;
	if(ang1 < 0) ang1 = -ang1;
	var ang2 = b2.angvel;
	if(ang2 < 0) ang2 = -ang2;
	var angBias = s1.sweepCoef * ang1 + s2.sweepCoef * ang2;
	if(!userAPI && !toi.kinematic && deltax * deltax + deltay * deltay < nape.Config.dynamicSweepLinearThreshold * nape.Config.dynamicSweepLinearThreshold && angBias < nape.Config.dynamicSweepAngularThreshold) {
		toi.toi = -1;
		toi.failed = true;
		return;
	}
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		b2.sweepIntegrate(curTOI * timeStep);
		b2.sweepValidate(s2);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			if(userAPI) break;
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var d2x = 0.0;
			var d2y = 0.0;
			d2x = c2.x - b2.posx;
			d2y = c2.y - b2.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			b2.sweepIntegrate(curTOI * timeStep);
			b2.sweepValidate(s2);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				if(userAPI) break;
				var d1x = 0.0;
				var d1y = 0.0;
				d1x = c1.x - b1.posx;
				d1y = c1.y - b1.posy;
				var d2x = 0.0;
				var d2y = 0.0;
				d2x = c2.x - b2.posx;
				d2y = c2.y - b2.posy;
				var proj = dot1 - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y) + b2.sweep_angvel * (axis.y * d2x - axis.x * d2y);
				if(proj > 0) toi.slipped = true;
				if(proj <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
}
zpp_nape.geom.ZPP_SweepDistance.staticSweep = function(toi,timeStep,lowerBound,negRadius) {
	var s1 = toi.s1;
	var s2 = toi.s2;
	var b1 = s1.body;
	var b2 = s2.body;
	var deltax = 0.0;
	var deltay = 0.0;
	deltax = -b1.velx;
	deltay = -b1.vely;
	var ang1 = b1.sweep_angvel;
	if(ang1 < 0) ang1 = -ang1;
	var angBias = s1.sweepCoef * ang1;
	var c1 = toi.c1;
	var c2 = toi.c2;
	var axis = toi.axis;
	var curTOI = lowerBound;
	var curIter = 0;
	while(true) {
		b1.sweepIntegrate(curTOI * timeStep);
		b1.sweepValidate(s1);
		var sep = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
		var dot = deltax * axis.x + deltay * axis.y;
		if(sep < nape.Config.distanceThresholdCCD) {
			var d1x = 0.0;
			var d1y = 0.0;
			d1x = c1.x - b1.posx;
			d1y = c1.y - b1.posy;
			var proj = dot - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
			if(proj > 0) toi.slipped = true;
			if(proj <= 0 || sep < nape.Config.distanceThresholdCCD * 0.5) break;
		}
		var denom = (angBias - dot) * timeStep;
		if(denom <= 0) {
			curTOI = -1;
			break;
		}
		var delta = sep / denom;
		if(delta < 1e-6) delta = 1e-6;
		curTOI += delta;
		if(curTOI >= 1) {
			curTOI = 1;
			b1.sweepIntegrate(curTOI * timeStep);
			b1.sweepValidate(s1);
			var sep1 = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,c1,c2,axis,null) + negRadius;
			var dot1 = deltax * axis.x + deltay * axis.y;
			if(sep1 < nape.Config.distanceThresholdCCD) {
				var d1x = 0.0;
				var d1y = 0.0;
				d1x = c1.x - b1.posx;
				d1y = c1.y - b1.posy;
				var proj = dot1 - b1.sweep_angvel * (axis.y * d1x - axis.x * d1y);
				if(proj > 0) toi.slipped = true;
				if(proj <= 0 || sep1 < nape.Config.distanceThresholdCCD * 0.5) break;
			}
			curTOI = -1;
			break;
		}
		if(++curIter >= 40) {
			if(sep > negRadius) toi.failed = true;
			break;
		}
	}
	toi.toi = curTOI;
}
zpp_nape.geom.ZPP_SweepDistance.distanceBody = function(b1,b2,w1,w2) {
	var t1;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t1 = new zpp_nape.geom.ZPP_Vec2(); else {
		t1 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t1.next;
		t1.next = null;
	}
	t1.weak = false;
	var t2;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) t2 = new zpp_nape.geom.ZPP_Vec2(); else {
		t2 = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = t2.next;
		t2.next = null;
	}
	t2.weak = false;
	var ax;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ax = new zpp_nape.geom.ZPP_Vec2(); else {
		ax = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ax.next;
		ax.next = null;
	}
	ax.weak = false;
	var min = 1e100;
	var cx_ite = b1.shapes.head;
	while(cx_ite != null) {
		var s1 = cx_ite.elt;
		var cx_ite1 = b2.shapes.head;
		while(cx_ite1 != null) {
			var s2 = cx_ite1.elt;
			var dist = zpp_nape.geom.ZPP_SweepDistance.distance(s1,s2,t1,t2,ax,min);
			if(dist < min) {
				min = dist;
				w1.x = t1.x;
				w1.y = t1.y;
				w2.x = t2.x;
				w2.y = t2.y;
			}
			cx_ite1 = cx_ite1.next;
		}
		cx_ite = cx_ite.next;
	}
	var o = t1;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	var o = t2;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	var o = ax;
	if(o.outer != null) {
		o.outer.zpp_inner = null;
		o.outer = null;
	}
	o._isimmutable = null;
	o._validate = null;
	o._invalidate = null;
	o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
	zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
	return min;
}
zpp_nape.geom.ZPP_SweepDistance.distance = function(s1,s2,w1,w2,axis,upperBound) {
	if(upperBound == null) upperBound = 1e100;
	if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
		var c1 = s1.circle;
		var c2 = s2.circle;
		var dist;
		var nx = 0.0;
		var ny = 0.0;
		nx = c2.worldCOMx - c1.worldCOMx;
		ny = c2.worldCOMy - c1.worldCOMy;
		var len = Math.sqrt(nx * nx + ny * ny);
		dist = len - (c1.radius + c2.radius);
		if(dist < upperBound) {
			if(len == 0) {
				nx = 1;
				ny = 0;
			} else {
				var t = 1.0 / len;
				nx *= t;
				ny *= t;
			}
			var t = c1.radius;
			w1.x = c1.worldCOMx + nx * t;
			w1.y = c1.worldCOMy + ny * t;
			var t = -c2.radius;
			w2.x = c2.worldCOMx + nx * t;
			w2.y = c2.worldCOMy + ny * t;
			axis.x = nx;
			axis.y = ny;
		}
		return dist;
	} else {
		var swapped = false;
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
			var tmp = s1;
			s1 = s2;
			s2 = tmp;
			var tmp2 = w1;
			w1 = w2;
			w2 = tmp2;
			swapped = true;
		}
		if(s1.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON && s2.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			var poly = s1.polygon;
			var circle = s2.circle;
			var best = -1e+100;
			var a0 = null;
			var cx_ite = poly.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var dist = a.gnormx * circle.worldCOMx + a.gnormy * circle.worldCOMy - a.gprojection - circle.radius;
				if(dist > upperBound) {
					best = dist;
					break;
				}
				if(dist > 0) {
					if(dist > best) {
						best = dist;
						a0 = a;
					}
				} else if(best < 0 && dist > best) {
					best = dist;
					a0 = a;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var v0 = a0.gp0;
				var v1 = a0.gp1;
				var dt = circle.worldCOMy * a0.gnormx - circle.worldCOMx * a0.gnormy;
				if(dt <= v0.y * a0.gnormx - v0.x * a0.gnormy) {
					var nx = 0.0;
					var ny = 0.0;
					nx = circle.worldCOMx - v0.x;
					ny = circle.worldCOMy - v0.y;
					var len = Math.sqrt(nx * nx + ny * ny);
					best = len - circle.radius;
					if(best < upperBound) {
						if(len == 0) {
							nx = 1;
							ny = 0;
						} else {
							var t = 1.0 / len;
							nx *= t;
							ny *= t;
						}
						var t = 0;
						w1.x = v0.x + nx * t;
						w1.y = v0.y + ny * t;
						var t = -circle.radius;
						w2.x = circle.worldCOMx + nx * t;
						w2.y = circle.worldCOMy + ny * t;
						axis.x = nx;
						axis.y = ny;
					}
				} else if(dt >= v1.y * a0.gnormx - v1.x * a0.gnormy) {
					var nx = 0.0;
					var ny = 0.0;
					nx = circle.worldCOMx - v1.x;
					ny = circle.worldCOMy - v1.y;
					var len = Math.sqrt(nx * nx + ny * ny);
					best = len - circle.radius;
					if(best < upperBound) {
						if(len == 0) {
							nx = 1;
							ny = 0;
						} else {
							var t = 1.0 / len;
							nx *= t;
							ny *= t;
						}
						var t = 0;
						w1.x = v1.x + nx * t;
						w1.y = v1.y + ny * t;
						var t = -circle.radius;
						w2.x = circle.worldCOMx + nx * t;
						w2.y = circle.worldCOMy + ny * t;
						axis.x = nx;
						axis.y = ny;
					}
				} else {
					var t = -circle.radius;
					w2.x = circle.worldCOMx + a0.gnormx * t;
					w2.y = circle.worldCOMy + a0.gnormy * t;
					var t = -best;
					w1.x = w2.x + a0.gnormx * t;
					w1.y = w2.y + a0.gnormy * t;
					axis.x = a0.gnormx;
					axis.y = a0.gnormy;
				}
			}
			if(swapped) {
				axis.x = -axis.x;
				axis.y = -axis.y;
			}
			return best;
		} else {
			var p1 = s1.polygon;
			var p2 = s2.polygon;
			var best = -1e+100;
			var a1 = null;
			var a2 = null;
			var besti = 0;
			var cx_ite = p1.edges.head;
			while(cx_ite != null) {
				var a = cx_ite.elt;
				var min = 1e100;
				var cx_ite1 = p2.gverts.next;
				while(cx_ite1 != null) {
					var v = cx_ite1;
					var k = a.gnormx * v.x + a.gnormy * v.y;
					if(k < min) min = k;
					cx_ite1 = cx_ite1.next;
				}
				min -= a.gprojection;
				if(min > upperBound) {
					best = min;
					break;
				}
				if(min > 0) {
					if(min > best) {
						best = min;
						a1 = a;
						besti = 1;
					}
				} else if(best < 0 && min > best) {
					best = min;
					a1 = a;
					besti = 1;
				}
				cx_ite = cx_ite.next;
			}
			if(best < upperBound) {
				var cx_ite = p2.edges.head;
				while(cx_ite != null) {
					var a = cx_ite.elt;
					var min = 1e100;
					var cx_ite1 = p1.gverts.next;
					while(cx_ite1 != null) {
						var v = cx_ite1;
						var k = a.gnormx * v.x + a.gnormy * v.y;
						if(k < min) min = k;
						cx_ite1 = cx_ite1.next;
					}
					min -= a.gprojection;
					if(min > upperBound) {
						best = min;
						break;
					}
					if(min > 0) {
						if(min > best) {
							best = min;
							a2 = a;
							besti = 2;
						}
					} else if(best < 0 && min > best) {
						best = min;
						a2 = a;
						besti = 2;
					}
					cx_ite = cx_ite.next;
				}
				if(best < upperBound) {
					var q1, q2;
					var ax;
					if(besti == 1) {
						q1 = p1;
						q2 = p2;
						ax = a1;
					} else {
						q1 = p2;
						q2 = p1;
						ax = a2;
						var tmp = w1;
						w1 = w2;
						w2 = tmp;
						swapped = !swapped;
					}
					var ay = null;
					var min = 1e100;
					var cx_ite = q2.edges.head;
					while(cx_ite != null) {
						var a = cx_ite.elt;
						var k = ax.gnormx * a.gnormx + ax.gnormy * a.gnormy;
						if(k < min) {
							min = k;
							ay = a;
						}
						cx_ite = cx_ite.next;
					}
					if(swapped) {
						axis.x = -ax.gnormx;
						axis.y = -ax.gnormy;
					} else {
						axis.x = ax.gnormx;
						axis.y = ax.gnormy;
					}
					if(best >= 0) {
						var v0 = ax.gp0;
						var v1 = ax.gp1;
						var q0 = ay.gp0;
						var q11 = ay.gp1;
						var vx = 0.0;
						var vy = 0.0;
						var qx = 0.0;
						var qy = 0.0;
						vx = v1.x - v0.x;
						vy = v1.y - v0.y;
						qx = q11.x - q0.x;
						qy = q11.y - q0.y;
						var vdot = 1 / (vx * vx + vy * vy);
						var qdot = 1 / (qx * qx + qy * qy);
						var t1 = -(vx * (v0.x - q0.x) + vy * (v0.y - q0.y)) * vdot;
						var t2 = -(vx * (v0.x - q11.x) + vy * (v0.y - q11.y)) * vdot;
						var s11 = -(qx * (q0.x - v0.x) + qy * (q0.y - v0.y)) * qdot;
						var s21 = -(qx * (q0.x - v1.x) + qy * (q0.y - v1.y)) * qdot;
						if(t1 < 0) t1 = 0; else if(t1 > 1) t1 = 1;
						if(t2 < 0) t2 = 0; else if(t2 > 1) t2 = 1;
						if(s11 < 0) s11 = 0; else if(s11 > 1) s11 = 1;
						if(s21 < 0) s21 = 0; else if(s21 > 1) s21 = 1;
						var f1x = 0.0;
						var f1y = 0.0;
						var t = t1;
						f1x = v0.x + vx * t;
						f1y = v0.y + vy * t;
						var f2x = 0.0;
						var f2y = 0.0;
						var t = t2;
						f2x = v0.x + vx * t;
						f2y = v0.y + vy * t;
						var g1x = 0.0;
						var g1y = 0.0;
						var t = s11;
						g1x = q0.x + qx * t;
						g1y = q0.y + qy * t;
						var g2x = 0.0;
						var g2y = 0.0;
						var t = s21;
						g2x = q0.x + qx * t;
						g2y = q0.y + qy * t;
						var d1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f1x,f1y,q0.x,q0.y);
						var d2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(f2x,f2y,q11.x,q11.y);
						var e1 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g1x,g1y,v0.x,v0.y);
						var e2 = zpp_nape.geom.ZPP_VecMath.vec_dsq(g2x,g2y,v1.x,v1.y);
						var minfx = 0.0;
						var minfy = 0.0;
						var minq = null;
						if(d1 < d2) {
							minfx = f1x;
							minfy = f1y;
							minq = q0;
						} else {
							minfx = f2x;
							minfy = f2y;
							minq = q11;
							d1 = d2;
						}
						var mingx = 0.0;
						var mingy = 0.0;
						var minv = null;
						if(e1 < e2) {
							mingx = g1x;
							mingy = g1y;
							minv = v0;
						} else {
							mingx = g2x;
							mingy = g2y;
							minv = v1;
							e1 = e2;
						}
						if(d1 < e1) {
							w1.x = minfx;
							w1.y = minfy;
							w2.x = minq.x;
							w2.y = minq.y;
							best = Math.sqrt(d1);
						} else {
							w2.x = mingx;
							w2.y = mingy;
							w1.x = minv.x;
							w1.y = minv.y;
							best = Math.sqrt(e1);
						}
						if(best != 0) {
							axis.x = w2.x - w1.x;
							axis.y = w2.y - w1.y;
							var t = 1.0 / best;
							axis.x *= t;
							axis.y *= t;
							if(swapped) {
								axis.x = -axis.x;
								axis.y = -axis.y;
							}
						}
						return best;
					} else {
						var c0x = 0.0;
						var c0y = 0.0;
						c0x = ay.gp0.x;
						c0y = ay.gp0.y;
						var c1x = 0.0;
						var c1y = 0.0;
						c1x = ay.gp1.x;
						c1y = ay.gp1.y;
						var dvx = 0.0;
						var dvy = 0.0;
						dvx = c1x - c0x;
						dvy = c1y - c0y;
						var d0 = ax.gnormy * c0x - ax.gnormx * c0y;
						var d1 = ax.gnormy * c1x - ax.gnormx * c1y;
						var den = 1 / (d1 - d0);
						var t = (-ax.tp1 - d0) * den;
						if(t > nape.Config.epsilon) {
							var t1 = t;
							c0x += dvx * t1;
							c0y += dvy * t1;
						}
						var t1 = (-ax.tp0 - d1) * den;
						if(t1 < -nape.Config.epsilon) {
							var t2 = t1;
							c1x += dvx * t2;
							c1y += dvy * t2;
						}
						var c0d = c0x * ax.gnormx + c0y * ax.gnormy - ax.gprojection;
						var c1d = c1x * ax.gnormx + c1y * ax.gnormy - ax.gprojection;
						if(c0d < c1d) {
							w2.x = c0x;
							w2.y = c0y;
							var t2 = -c0d;
							w1.x = w2.x + ax.gnormx * t2;
							w1.y = w2.y + ax.gnormy * t2;
							return c0d;
						} else {
							w2.x = c1x;
							w2.y = c1y;
							var t2 = -c1d;
							w1.x = w2.x + ax.gnormx * t2;
							w1.y = w2.y + ax.gnormy * t2;
							return c1d;
						}
					}
				} else return upperBound;
			} else return upperBound;
		}
	}
}
zpp_nape.geom.ZPP_PartitionPair = function() {
	this.node = null;
	this.di = 0;
	this.id = 0;
	this.b = null;
	this.a = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
};
zpp_nape.geom.ZPP_PartitionPair.__name__ = ["zpp_nape","geom","ZPP_PartitionPair"];
zpp_nape.geom.ZPP_PartitionPair.get = function(a,b) {
	var ret;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) ret = new zpp_nape.geom.ZPP_PartitionPair(); else {
		ret = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.a = a;
	ret.b = b;
	if(a.id < b.id) {
		ret.id = a.id;
		ret.di = b.id;
	} else {
		ret.id = b.id;
		ret.di = a.id;
	}
	return ret;
}
zpp_nape.geom.ZPP_PartitionPair.edge_swap = function(a,b) {
	var t = a.node;
	a.node = b.node;
	b.node = t;
}
zpp_nape.geom.ZPP_PartitionPair.edge_lt = function(a,b) {
	return a.id < b.id || a.id == b.id && a.di < b.di;
}
zpp_nape.geom.ZPP_PartitionPair.prototype = {
	alloc: function() {
	}
	,free: function() {
		this.a = this.b = null;
		this.node = null;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it:null;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.next == null;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
	}
	,clear: function() {
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.next;
	}
	,elem: function() {
		return this;
	}
	,__class__: zpp_nape.geom.ZPP_PartitionPair
}
zpp_nape.geom.ZPP_Triangular = function() { }
zpp_nape.geom.ZPP_Triangular.__name__ = ["zpp_nape","geom","ZPP_Triangular"];
zpp_nape.geom.ZPP_Triangular.lt = function(p,q) {
	return p.y < q.y || p.y == q.y && p.x < q.x;
}
zpp_nape.geom.ZPP_Triangular.right_turn = function(a,b,c) {
	var ux = 0.0;
	var uy = 0.0;
	ux = c.x - b.x;
	uy = c.y - b.y;
	var vx = 0.0;
	var vy = 0.0;
	vx = b.x - a.x;
	vy = b.y - a.y;
	return vy * ux - vx * uy;
}
zpp_nape.geom.ZPP_Triangular.delaunay = function(A,B,C,D) {
	var ux = 0.0;
	var uy = 0.0;
	var vx = 0.0;
	var vy = 0.0;
	if((function($this) {
		var $r;
		{
			ux = C.x - B.x;
			uy = C.y - B.y;
		}
		{
			vx = B.x - A.x;
			vy = B.y - A.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = D.x - C.x;
			uy = D.y - C.y;
		}
		{
			vx = C.x - B.x;
			vy = C.y - B.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = A.x - D.x;
			uy = A.y - D.y;
		}
		{
			vx = D.x - C.x;
			vy = D.y - C.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this)) || (function($this) {
		var $r;
		{
			ux = B.x - A.x;
			uy = B.y - A.y;
		}
		{
			vx = A.x - D.x;
			vy = A.y - D.y;
		}
		$r = vy * ux - vx * uy >= 0;
		return $r;
	}(this))) return true;
	return B.x * (C.y * D.mag - C.mag * D.y) - C.x * (B.y * D.mag - B.mag * D.y) + D.x * (B.y * C.mag - B.mag * C.y) - (A.x * (C.y * D.mag - C.mag * D.y) - C.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * C.mag - A.mag * C.y)) + (A.x * (B.y * D.mag - B.mag * D.y) - B.x * (A.y * D.mag - A.mag * D.y) + D.x * (A.y * B.mag - A.mag * B.y)) - (A.x * (B.y * C.mag - B.mag * C.y) - B.x * (A.y * C.mag - A.mag * C.y) + C.x * (A.y * B.mag - A.mag * B.y)) > 0;
	return B.x * (C.y * D.mag - C.mag * D.y) + B.y * (C.mag * D.x - C.x * D.mag) + B.mag * (C.x * D.y - C.y * D.x) + A.x * (C.mag * D.y - C.y * D.mag + B.mag * (C.y - D.y) + B.y * (D.mag - C.mag)) + A.y * (C.x * D.mag - C.mag * D.x + B.mag * (D.x - C.x) + B.x * (C.mag - D.mag)) + A.mag * (C.y * D.x - C.x * D.y + B.x * (D.y - C.y) + B.y * (C.x - D.x)) > 0;
}
zpp_nape.geom.ZPP_Triangular.optimise = function(P) {
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			p.sort();
			p.mag = p.x * p.x + p.y * p.y;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.edgeSet == null) {
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) zpp_nape.geom.ZPP_Triangular.edgeSet = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			zpp_nape.geom.ZPP_Triangular.edgeSet = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = zpp_nape.geom.ZPP_Triangular.edgeSet.next;
			zpp_nape.geom.ZPP_Triangular.edgeSet.next = null;
		}
		null;
		zpp_nape.geom.ZPP_Triangular.edgeSet.lt = zpp_nape.geom.ZPP_PartitionPair.edge_lt;
		zpp_nape.geom.ZPP_Triangular.edgeSet.swapped = zpp_nape.geom.ZPP_PartitionPair.edge_swap;
	}
	var edgeStack;
	if(zpp_nape.geom.ZPP_PartitionPair.zpp_pool == null) edgeStack = new zpp_nape.geom.ZPP_PartitionPair(); else {
		edgeStack = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = edgeStack.next;
		edgeStack.next = null;
	}
	null;
	var F = P.vertices;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			var q0 = p.next;
			p.diagonals.reverse();
			var cx_ite = p.diagonals.head;
			while(cx_ite != null) {
				var q = cx_ite.elt;
				if(q.id < p.id) {
					q0 = q;
					cx_ite = cx_ite.next;
					continue;
				}
				var q1 = cx_ite.next == null?p.prev:cx_ite.next.elt;
				if(!zpp_nape.geom.ZPP_Triangular.delaunay(p,q0,q,q1)) {
					var edge = zpp_nape.geom.ZPP_PartitionPair.get(p,q);
					edgeStack.add(edge);
					edge.node = zpp_nape.geom.ZPP_Triangular.edgeSet.insert(edge);
				}
				q0 = q;
				cx_ite = cx_ite.next;
			}
			nite = nite.next;
		} while(nite != L);
	}
	while(!(edgeStack.next == null)) {
		var edge = edgeStack.pop_unsafe();
		var A = edge.a;
		var C = edge.b;
		var B = A.next;
		var D = null;
		var cx_ite = A.diagonals.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p == C) {
				cx_ite = cx_ite.next;
				D = cx_ite == null?A.prev:cx_ite.elt;
				break;
			}
			B = p;
			cx_ite = cx_ite.next;
		}
		A.diagonals.remove(C);
		C.diagonals.remove(A);
		if(C == B.next) B.diagonals.add(D); else {
			var cx_ite = B.diagonals.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p == C) {
					B.diagonals.insert(cx_ite,D);
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		if(A == D.next) D.diagonals.add(B); else {
			var cx_ite = D.diagonals.head;
			while(cx_ite != null) {
				var p = cx_ite.elt;
				if(p == A) {
					D.diagonals.insert(cx_ite,B);
					break;
				}
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.geom.ZPP_Triangular.edgeSet.remove_node(edge.node);
		var o = edge;
		o.a = o.b = null;
		o.node = null;
		o.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
		zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o;
	}
	var o = edgeStack;
	o.a = o.b = null;
	o.node = null;
	o.next = zpp_nape.geom.ZPP_PartitionPair.zpp_pool;
	zpp_nape.geom.ZPP_PartitionPair.zpp_pool = o;
}
zpp_nape.geom.ZPP_Triangular.triangulate = function(P) {
	var min = P.vertices;
	var max = P.vertices;
	var F = P.vertices.next;
	var L = P.vertices;
	if(F != null) {
		var nite = F;
		do {
			var p = nite;
			if(p.y < min.y || p.y == min.y && p.x < min.x) min = p;
			if(max.y < p.y || max.y == p.y && max.x < p.x) max = p;
			nite = nite.next;
		} while(nite != L);
	}
	if(zpp_nape.geom.ZPP_Triangular.queue == null) zpp_nape.geom.ZPP_Triangular.queue = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	var rp = max.prev;
	var lp = max.next;
	zpp_nape.geom.ZPP_Triangular.queue.add(max);
	while(rp != min || lp != min) if(rp == min || lp != min && (rp.y < lp.y || rp.y == lp.y && rp.x < lp.x)) {
		zpp_nape.geom.ZPP_Triangular.queue.add(lp);
		lp.rightchain = false;
		lp = lp.next;
	} else {
		zpp_nape.geom.ZPP_Triangular.queue.add(rp);
		rp.rightchain = true;
		rp = rp.prev;
	}
	zpp_nape.geom.ZPP_Triangular.queue.add(min);
	if(zpp_nape.geom.ZPP_Triangular.stack == null) zpp_nape.geom.ZPP_Triangular.stack = new zpp_nape.util.ZNPList_ZPP_PartitionVertex();
	zpp_nape.geom.ZPP_Triangular.stack.add(zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe());
	var pre = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
	zpp_nape.geom.ZPP_Triangular.stack.add(pre);
	while(true) {
		var p = zpp_nape.geom.ZPP_Triangular.queue.pop_unsafe();
		if(zpp_nape.geom.ZPP_Triangular.queue.head == null) break;
		if(p.rightchain != zpp_nape.geom.ZPP_Triangular.stack.head.elt.rightchain) {
			while(true) {
				var s = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
				if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
				P.add_diagonal(s,p);
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(pre);
		} else {
			var q = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
				var s = zpp_nape.geom.ZPP_Triangular.stack.head.elt;
				var right = zpp_nape.geom.ZPP_Triangular.right_turn(s,q,p);
				if(p.rightchain && right >= 0 || !p.rightchain && right <= 0) break;
				P.add_diagonal(s,p);
				q = s;
				zpp_nape.geom.ZPP_Triangular.stack.pop();
			}
			zpp_nape.geom.ZPP_Triangular.stack.add(q);
		}
		zpp_nape.geom.ZPP_Triangular.stack.add(p);
		pre = p;
	}
	if(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
		zpp_nape.geom.ZPP_Triangular.stack.pop();
		while(!(zpp_nape.geom.ZPP_Triangular.stack.head == null)) {
			var s = zpp_nape.geom.ZPP_Triangular.stack.pop_unsafe();
			if(zpp_nape.geom.ZPP_Triangular.stack.head == null) break;
			P.add_diagonal(max,s);
		}
	}
	return P;
}
zpp_nape.geom.ZPP_Vec2 = function() {
	this.y = 0.0;
	this.x = 0.0;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.weak = false;
	this.outer = null;
	this._isimmutable = null;
	this._immutable = false;
	this._validate = null;
	this._invalidate = null;
};
zpp_nape.geom.ZPP_Vec2.__name__ = ["zpp_nape","geom","ZPP_Vec2"];
zpp_nape.geom.ZPP_Vec2.get = function(x,y,immutable) {
	if(immutable == null) immutable = false;
	var ret;
	if(zpp_nape.geom.ZPP_Vec2.zpp_pool == null) ret = new zpp_nape.geom.ZPP_Vec2(); else {
		ret = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.weak = false;
	ret._immutable = immutable;
	ret.x = x;
	ret.y = y;
	return ret;
}
zpp_nape.geom.ZPP_Vec2.prototype = {
	toString: function() {
		return "{ x: " + this.x + " y: " + this.y + " }";
	}
	,copy: function() {
		return zpp_nape.geom.ZPP_Vec2.get(this.x,this.y,null);
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it:null;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.next == null;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
	}
	,clear: function() {
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.next;
	}
	,elem: function() {
		return this;
	}
	,alloc: function() {
		this.weak = false;
	}
	,free: function() {
		if(this.outer != null) {
			this.outer.zpp_inner = null;
			this.outer = null;
		}
		this._isimmutable = null;
		this._validate = null;
		this._invalidate = null;
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.geom.Vec2();
			var o = this.outer.zpp_inner;
			if(o.outer != null) {
				o.outer.zpp_inner = null;
				o.outer = null;
			}
			o._isimmutable = null;
			o._validate = null;
			o._invalidate = null;
			o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
			zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,immutable: function() {
		if(this._immutable) throw "Error: Vec2 is immutable";
		if(this._isimmutable != null) this._isimmutable();
	}
	,invalidate: function() {
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_nape.geom.ZPP_Vec2
}
zpp_nape.geom.ZPP_Vec3 = function() {
	this._validate = null;
	this.immutable = false;
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.outer = null;
	this.immutable = false;
	this._validate = null;
};
zpp_nape.geom.ZPP_Vec3.__name__ = ["zpp_nape","geom","ZPP_Vec3"];
zpp_nape.geom.ZPP_Vec3.prototype = {
	validate: function() {
		if(this._validate != null) this._validate();
	}
	,__class__: zpp_nape.geom.ZPP_Vec3
}
zpp_nape.geom.ZPP_VecMath = function() { }
zpp_nape.geom.ZPP_VecMath.__name__ = ["zpp_nape","geom","ZPP_VecMath"];
zpp_nape.geom.ZPP_VecMath.vec_dsq = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return dx * dx + dy * dy;
}
zpp_nape.geom.ZPP_VecMath.vec_distance = function(ax,ay,bx,by) {
	var dx = 0.0;
	var dy = 0.0;
	dx = ax - bx;
	dy = ay - by;
	return Math.sqrt(dx * dx + dy * dy);
}
zpp_nape.phys = {}
zpp_nape.phys.ZPP_Interactor = function() {
	this.wrap_cbTypes = null;
	this.cbSet = null;
	this.cbTypes = null;
	this.group = null;
	this.cbsets = null;
	this.icompound = null;
	this.ibody = null;
	this.ishape = null;
	this.userData = null;
	this.id = 0;
	this.outer_i = null;
	this.id = zpp_nape.ZPP_ID.Interactor();
	this.cbsets = new zpp_nape.util.ZNPList_ZPP_CallbackSet();
	this.cbTypes = new zpp_nape.util.ZNPList_ZPP_CbType();
};
zpp_nape.phys.ZPP_Interactor.__name__ = ["zpp_nape","phys","ZPP_Interactor"];
zpp_nape.phys.ZPP_Interactor.get = function(i1,i2) {
	var id = i1.id < i2.id?i1.id:i2.id;
	var di = i1.id < i2.id?i2.id:i1.id;
	var xs = i1.cbsets.length < i2.cbsets.length?i1.cbsets:i2.cbsets;
	var ret = null;
	var cx_ite = xs.head;
	while(cx_ite != null) {
		var x = cx_ite.elt;
		if(x.id == id && x.di == di) {
			ret = x;
			break;
		}
		cx_ite = cx_ite.next;
	}
	return ret;
}
zpp_nape.phys.ZPP_Interactor.int_callback = function(set,x,cb) {
	var o1 = set.int1;
	var o2 = set.int2;
	if(x.options1.compatible(o1.cbTypes) && x.options2.compatible(o2.cbTypes)) {
		cb.int1 = o1;
		cb.int2 = o2;
	} else {
		cb.int1 = o2;
		cb.int2 = o1;
	}
}
zpp_nape.phys.ZPP_Interactor.prototype = {
	copyto: function(ret) {
		ret.zpp_inner_i.group = this.group;
		var $it0 = this.outer_i.get_cbTypes().iterator();
		while( $it0.hasNext() ) {
			var cb = $it0.next();
			((function($this) {
				var $r;
				if(ret.zpp_inner_i.wrap_cbTypes == null) ret.zpp_inner_i.setupcbTypes();
				$r = ret.zpp_inner_i.wrap_cbTypes;
				return $r;
			}(this))).add(cb);
		}
		if(this.userData != null) ret.zpp_inner_i.userData = Reflect.copy(this.userData);
	}
	,lookup_group: function() {
		var cur = this;
		while(cur != null && cur.group == null) if(cur.ishape != null) cur = cur.ishape.body; else if(cur.icompound != null) cur = cur.icompound.compound; else cur = cur.ibody.compound;
		return cur == null?null:cur.group;
	}
	,immutable_midstep: function(n) {
		if(this.ibody != null) this.ibody.__immutable_midstep(n); else if(this.ishape != null) this.ishape.__immutable_midstep(n); else this.icompound.__imutable_midstep(n);
	}
	,setGroup: function(group) {
		if(this.group != group) {
			var inspace = (this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space) != null;
			if(inspace && this.group != null) this.group.interactors.remove(this);
			this.group = group;
			if(inspace && group != null) group.interactors.add(this);
			if(inspace) {
				if(this.ishape != null) this.ishape.body.wake(); else if(this.ibody != null) this.ibody.wake(); else this.icompound.wake();
			}
		}
	}
	,dealloc_cbSet: function() {
		var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
		if(this.cbSet != null) {
			this.cbSet.interactors.remove(this);
			space.nullInteractorType(this);
			if(--this.cbSet.count == 0) {
				space.cbsets.remove(this.cbSet);
				var o = this.cbSet;
				o.free();
				o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
				zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
			}
			this.cbSet = null;
		}
	}
	,alloc_cbSet: function() {
		var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
		if((this.cbSet = space.cbsets.get(this.cbTypes)) != null) {
			this.cbSet.count++;
			this.cbSet.interactors.add(this);
			this.cbSet.validate();
			space.freshInteractorType(this);
		}
	}
	,insert_cbtype: function(cb) {
		if(!this.cbTypes.has(cb)) {
			var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.add(this);
			}
			var pre = null;
			var cx_ite = this.cbTypes.head;
			while(cx_ite != null) {
				var j = cx_ite.elt;
				if(cb.id < j.id) break;
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			this.cbTypes.inlined_insert(pre,cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,wrap_cbTypes_adder: function(cb) {
		this.insert_cbtype(cb.zpp_inner);
		return false;
	}
	,wrap_cbTypes_subber: function(pcb) {
		var cb = pcb.zpp_inner;
		if(this.cbTypes.has(cb)) {
			var space = this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
			if(space != null) {
				this.dealloc_cbSet();
				cb.interactors.remove(this);
			}
			this.cbTypes.remove(cb);
			if(space != null) {
				this.alloc_cbSet();
				this.wake();
			}
		}
	}
	,immutable_cbTypes: function() {
		this.immutable_midstep("Interactor::cbTypes");
	}
	,setupcbTypes: function() {
		this.wrap_cbTypes = zpp_nape.util.ZPP_CbTypeList.get(this.cbTypes);
		this.wrap_cbTypes.zpp_inner.adder = $bind(this,this.wrap_cbTypes_adder);
		this.wrap_cbTypes.zpp_inner.subber = $bind(this,this.wrap_cbTypes_subber);
		this.wrap_cbTypes.zpp_inner.dontremove = true;
		this.wrap_cbTypes.zpp_inner._modifiable = $bind(this,this.immutable_cbTypes);
	}
	,getSpace: function() {
		return this.ishape != null?this.ishape.body == null?null:this.ishape.body.space:this.ibody != null?this.ibody.space:this.icompound.space;
	}
	,wake: function() {
		if(this.ishape != null) {
			var body = this.ishape.body;
			if(body != null && body.space != null) body.space.non_inlined_wake(body);
			true;
		} else if(this.ibody != null) {
			if(this.ibody.space != null) this.ibody.space.non_inlined_wake(this.ibody); else false;
		} else {
			if(this.icompound.space != null) this.icompound.space.wakeCompound(this.icompound);
			true;
		}
	}
	,__iremovedFromSpace: function() {
		if(this.group != null) this.group.interactors.remove(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.remove(this);
			cx_ite = cx_ite.next;
		}
		this.dealloc_cbSet();
	}
	,__iaddedToSpace: function() {
		if(this.group != null) this.group.interactors.add(this);
		var cx_ite = this.cbTypes.head;
		while(cx_ite != null) {
			var cb = cx_ite.elt;
			cb.interactors.add(this);
			cx_ite = cx_ite.next;
		}
		this.alloc_cbSet();
	}
	,isCompound: function() {
		return this.icompound != null;
	}
	,isBody: function() {
		return this.ibody != null;
	}
	,isShape: function() {
		return this.ishape != null;
	}
	,__class__: zpp_nape.phys.ZPP_Interactor
}
zpp_nape.phys.ZPP_Body = function() {
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_aabb = false;
	this.aabb = null;
	this.norotate = false;
	this.sinertia = 0.0;
	this.iinertia = 0.0;
	this.cinertia = 0.0;
	this.zip_inertia = false;
	this.inertia = 0.0;
	this.inertiaMode = 0;
	this.zip_gravMassScale = false;
	this.gravMassScale = 0.0;
	this.gravMassMode = 0;
	this.zip_gravMass = false;
	this.gravMass = 0.0;
	this.nomove = false;
	this.cmass = 0.0;
	this.smass = 0.0;
	this.imass = 0.0;
	this.massMode = 0;
	this.zip_mass = false;
	this.mass = 0.0;
	this.zip_axis = false;
	this.axisy = 0.0;
	this.axisx = 0.0;
	this.rot = 0.0;
	this.pre_rot = 0.0;
	this.kinangvel = 0.0;
	this.torque = 0.0;
	this.angvel = 0.0;
	this.wrapcvel = null;
	this.wrap_svel = null;
	this.svely = 0.0;
	this.svelx = 0.0;
	this.wrap_kinvel = null;
	this.kinvely = 0.0;
	this.kinvelx = 0.0;
	this.wrap_force = null;
	this.forcey = 0.0;
	this.forcex = 0.0;
	this.wrap_vel = null;
	this.vely = 0.0;
	this.velx = 0.0;
	this.wrap_pos = null;
	this.posy = 0.0;
	this.posx = 0.0;
	this.pre_posy = 0.0;
	this.pre_posx = 0.0;
	this.disableCCD = false;
	this.bulletEnabled = false;
	this.bullet = false;
	this.sweepRadius = 0.0;
	this.sweepFrozen = false;
	this.sweep_angvel = 0.0;
	this.sweepTime = 0.0;
	this.graph_depth = 0;
	this.component = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_arbiters = null;
	this.arbiters = null;
	this.space = null;
	this.wrap_shapes = null;
	this.shapes = null;
	this.compound = null;
	this.type = 0;
	this.world = false;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.ibody = this;
	this.world = false;
	this.bulletEnabled = false;
	this.sweepTime = 0;
	this.sweep_angvel = 0;
	this.norotate = this.nomove = false;
	this.disableCCD = false;
	this.posx = 0;
	this.posy = 0;
	this.rot = 0;
	this.axisx = 0;
	this.axisy = 1;
	this.svelx = 0;
	this.svely = 0;
	this.velx = 0;
	this.vely = 0;
	this.kinvelx = 0;
	this.kinvely = 0;
	this.forcex = 0;
	this.forcey = 0;
	this.torque = this.angvel = this.kinangvel = 0;
	this.pre_posx = Math.POSITIVE_INFINITY;
	this.pre_posy = Math.POSITIVE_INFINITY;
	this.pre_rot = Math.POSITIVE_INFINITY;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.zip_aabb = true;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
	this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
	this.gravMassScale = 1.0;
	this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.wrap_shapes = zpp_nape.util.ZPP_ShapeList.get(this.shapes);
	this.wrap_shapes.zpp_inner.adder = $bind(this,this.shapes_adder);
	this.wrap_shapes.zpp_inner.subber = $bind(this,this.shapes_subber);
	this.wrap_shapes.zpp_inner._invalidate = $bind(this,this.shapes_invalidate);
	this.wrap_shapes.zpp_inner._modifiable = $bind(this,this.shapes_modifiable);
	this.kinematicDelaySleep = false;
};
zpp_nape.phys.ZPP_Body.__name__ = ["zpp_nape","phys","ZPP_Body"];
zpp_nape.phys.ZPP_Body.bodysetlt = function(a,b) {
	return a.id < b.id;
}
zpp_nape.phys.ZPP_Body.__static = function() {
	var ret = new nape.phys.Body((function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
		return $r;
	}(this)));
	var si = ret.zpp_inner;
	si.world = true;
	si.wrap_shapes.zpp_inner.immutable = true;
	si.smass = si.imass = si.cmass = si.mass = si.gravMass = 0.0;
	si.sinertia = si.iinertia = si.cinertia = si.inertia = 0.0;
	si.cbTypes.clear();
	return ret;
}
zpp_nape.phys.ZPP_Body.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Body.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	copy: function() {
		var ret = new nape.phys.Body().zpp_inner;
		ret.type = this.type;
		ret.bulletEnabled = this.bulletEnabled;
		ret.disableCCD = this.disableCCD;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			ret.outer.zpp_inner.wrap_shapes.add(s.outer.copy());
			cx_ite = cx_ite.next;
		}
		ret.posx = this.posx;
		ret.posy = this.posy;
		ret.velx = this.velx;
		ret.vely = this.vely;
		ret.forcex = this.forcex;
		ret.forcey = this.forcey;
		ret.rot = this.rot;
		ret.angvel = this.angvel;
		ret.torque = this.torque;
		ret.kinvelx = this.kinvelx;
		ret.kinvely = this.kinvely;
		ret.kinangvel = this.kinangvel;
		ret.svelx = this.svelx;
		ret.svely = this.svely;
		if(!this.zip_axis) {
			ret.axisx = this.axisx;
			ret.axisy = this.axisy;
		} else ret.invalidate_rot();
		ret.rot = this.rot;
		ret.massMode = this.massMode;
		ret.gravMassMode = this.gravMassMode;
		ret.inertiaMode = this.inertiaMode;
		ret.norotate = this.norotate;
		ret.nomove = this.nomove;
		ret.cmass = this.cmass;
		ret.cinertia = this.cinertia;
		if(!this.zip_mass) ret.mass = this.mass; else ret.invalidate_mass();
		if(!this.zip_gravMass) ret.gravMass = this.gravMass; else ret.invalidate_gravMass();
		if(!this.zip_gravMassScale) ret.gravMassScale = this.gravMassScale; else ret.invalidate_gravMassScale();
		if(!this.zip_inertia) ret.inertia = this.inertia; else ret.invalidate_inertia();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else ret.zip_aabb = true;
		if(!this.zip_localCOM) {
			ret.localCOMx = this.localCOMx;
			ret.localCOMy = this.localCOMy;
		} else {
			ret.zip_localCOM = true;
			ret.zip_worldCOM = true;
		}
		if(!this.zip_worldCOM) {
			ret.worldCOMx = this.worldCOMx;
			ret.worldCOMy = this.worldCOMy;
		} else ret.zip_worldCOM = true;
		this.copyto(ret.outer);
		return ret.outer;
	}
	,removedFromSpace: function() {
		while(!(this.arbiters.head == null)) {
			var arb = this.arbiters.pop_unsafe();
			arb.cleared = true;
			if(arb.b2 == this) arb.b1.arbiters.inlined_try_remove(arb);
			if(arb.b1 == this) arb.b2.arbiters.inlined_try_remove(arb);
			if(arb.pair != null) {
				arb.pair.arb = null;
				arb.pair = null;
			}
			arb.active = false;
			this.space.f_arbiters.modified = true;
		}
		var o = this.component;
		o.body = null;
		o.constraint = null;
		null;
		o.next = zpp_nape.space.ZPP_Component.zpp_pool;
		zpp_nape.space.ZPP_Component.zpp_pool = o;
		this.component = null;
		this.__iremovedFromSpace();
	}
	,addedToSpace: function() {
		if(zpp_nape.space.ZPP_Component.zpp_pool == null) this.component = new zpp_nape.space.ZPP_Component(); else {
			this.component = zpp_nape.space.ZPP_Component.zpp_pool;
			zpp_nape.space.ZPP_Component.zpp_pool = this.component.next;
			this.component.next = null;
		}
		null;
		this.component.isBody = true;
		this.component.body = this;
		this.__iaddedToSpace();
	}
	,shapes_modifiable: function() {
		this.immutable_midstep("Body::shapes");
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
	}
	,shapes_invalidate: function(_) {
		this.invalidate_shapes();
	}
	,shapes_subber: function(s) {
		if(this.space != null) this.space.removed_shape(s.zpp_inner);
		s.zpp_inner.body = null;
		s.zpp_inner.removedFromBody();
	}
	,shapes_adder: function(s) {
		if(s.zpp_inner.body != this) {
			if(s.zpp_inner.body != null) s.zpp_inner.body.wrap_shapes.remove(s);
			s.zpp_inner.body = this;
			s.zpp_inner.addedToBody();
			if(this.space != null) this.space.added_shape(s.zpp_inner,null);
			if(s.zpp_inner.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.zpp_inner.polygon.invalidate_gaxi();
				s.zpp_inner.polygon.invalidate_gverts();
			}
			return true;
		} else return false;
	}
	,aabb_validate: function() {
		if(this.shapes.head == null) throw "Error: bounds only makes sense when Body has shapes";
		this.validate_aabb();
	}
	,clear: function() {
		if(this.space != null) throw "Error: Cannot clear a Body if it is currently being used by a Space!";
		if(!(this.constraints.head == null)) throw "Error: Cannot clear a Body if it is currently being used by a constraint!";
		while(!(this.shapes.head == null)) {
			var s = this.shapes.pop_unsafe();
			s.removedFromBody();
			s.body = null;
		}
		this.invalidate_shapes();
		this.pre_posx = 0;
		this.pre_posy = 0;
		this.posx = 0;
		this.posy = 0;
		this.velx = 0;
		this.vely = 0;
		this.forcex = 0;
		this.forcey = 0;
		this.kinvelx = 0;
		this.kinvely = 0;
		this.svelx = 0;
		this.svely = 0;
		this.angvel = this.torque = this.kinangvel = this.pre_rot = this.rot = 0;
		this.invalidate_pos();
		this.invalidate_rot();
		this.axisx = 0;
		this.axisy = 1;
		this.zip_axis = false;
		this.massMode = zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT;
		this.gravMassMode = zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT;
		this.gravMassScale = 1.0;
		this.inertiaMode = zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT;
		this.norotate = false;
		this.nomove = false;
	}
	,__immutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw "Error: " + name + " cannot be set during a space step()";
	}
	,getworldCOM: function() {
		if(this.shapes.head == null) throw "Error: worldCOM only makes sense when Body has Shapes";
		this.validate_worldCOM();
	}
	,getlocalCOM: function() {
		if(this.shapes.head == null) throw "Error: localCOM only makes sense when Body has Shapes";
		this.validate_localCOM();
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			this.zip_worldCOM = false;
			this.validate_localCOM();
			if(this.zip_axis) {
				this.zip_axis = false;
				this.axisx = Math.sin(this.rot);
				this.axisy = Math.cos(this.rot);
				null;
			}
			this.worldCOMx = this.posx + (this.axisy * this.localCOMx - this.axisx * this.localCOMy);
			this.worldCOMy = this.posy + (this.localCOMx * this.axisx + this.localCOMy * this.axisy);
			if(this.wrap_worldCOM != null) {
				this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
				this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
			}
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			var tempx = 0;
			var tempy = 0;
			var msum = 0.0;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.validate_area_inertia();
				var t = s.area * s.material.density;
				tempx += s.localCOMx * t;
				tempy += s.localCOMy * t;
				msum += s.area * s.material.density;
				cx_ite = cx_ite.next;
			}
			if(msum != 0) {
				var t = 1.0 / msum;
				this.localCOMx = tempx * t;
				this.localCOMy = tempy * t;
			}
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
			if(this.zip_mass && this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
				this.zip_mass = false;
				this.cmass = msum;
				if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					this.mass = this.cmass;
					this.imass = this.smass = 1.0 / this.mass;
				} else {
					this.mass = Math.POSITIVE_INFINITY;
					this.imass = this.smass = 0.0;
				}
			}
		}
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
	}
	,validate_aabb: function() {
		if(this.shapes.head == null) throw "Error: Body bounds only makes sense if it contains shapes";
		if(this.zip_aabb) {
			this.zip_aabb = false;
			this.aabb.minx = Math.POSITIVE_INFINITY;
			this.aabb.miny = Math.POSITIVE_INFINITY;
			this.aabb.maxx = Math.NEGATIVE_INFINITY;
			this.aabb.maxy = Math.NEGATIVE_INFINITY;
			var cx_ite = this.shapes.head;
			while(cx_ite != null) {
				var s = cx_ite.elt;
				if(s.zip_aabb) {
					if(s.body != null) {
						s.zip_aabb = false;
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
					}
				}
				this.aabb.combine(s.aabb);
				cx_ite = cx_ite.next;
			}
		}
	}
	,invalidate_wake: function() {
		this.wake();
	}
	,validate_inertia: function() {
		var exist = false;
		if(this.zip_inertia || this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT && exist) {
			this.zip_inertia = false;
			if(this.inertiaMode == zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT) {
				this.cinertia = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cinertia += s.inertia * s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.norotate) {
				this.inertia = this.cinertia;
				this.sinertia = this.iinertia = 1.0 / this.inertia;
			} else {
				this.inertia = Math.POSITIVE_INFINITY;
				this.sinertia = this.iinertia = 0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_inertia: function() {
		this.zip_inertia = true;
		this.wake();
	}
	,validate_gravMassScale: function() {
		if(this.zip_gravMassScale) {
			this.zip_gravMassScale = false;
			if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) this.gravMassScale = 1.0; else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) {
				this.validate_mass();
				this.gravMassScale = this.gravMass / this.cmass;
			}
		}
	}
	,invalidate_gravMassScale: function() {
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true; else this.invalidate_gravMass();
	}
	,validate_gravMass: function() {
		if(this.zip_gravMass) {
			this.zip_gravMass = false;
			this.validate_mass();
			if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT) {
				this.validate_mass();
				this.gravMass = this.cmass;
			} else if(this.gravMassMode == zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) {
				this.validate_mass();
				this.gravMass = this.cmass * this.gravMassScale;
			}
		}
	}
	,invalidate_gravMass: function() {
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED) this.zip_gravMass = true;
		if(this.gravMassMode != zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED) this.zip_gravMassScale = true;
		this.wake();
	}
	,validate_mass: function() {
		var exist = false;
		if(this.zip_mass || this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT && exist) {
			this.zip_mass = false;
			if(this.massMode == zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT) {
				this.cmass = 0;
				var cx_ite = this.shapes.head;
				while(cx_ite != null) {
					var s = cx_ite.elt;
					s.refmaterial.density = s.material.density;
					s.validate_area_inertia();
					this.cmass += s.area * s.material.density;
					cx_ite = cx_ite.next;
				}
			}
			if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && !this.nomove) {
				this.mass = this.cmass;
				this.imass = this.smass = 1.0 / this.mass;
			} else {
				this.mass = Math.POSITIVE_INFINITY;
				this.imass = this.smass = 0.0;
			}
			if(exist) this.invalidate_inertia();
		}
	}
	,invalidate_mass: function() {
		this.zip_mass = true;
		this.invalidate_gravMass();
	}
	,delta_rot: function(dr) {
		this.rot += dr;
		if(dr * dr > 0.0001) {
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		} else {
			var d2 = dr * dr;
			var p = 1 - 0.5 * d2;
			var m = 1 - d2 * d2 / 8;
			var nx = (p * this.axisx + dr * this.axisy) * m;
			this.axisy = (p * this.axisy - dr * this.axisx) * m;
			this.axisx = nx;
		}
	}
	,quick_validate_axis: function() {
		this.axisx = Math.sin(this.rot);
		this.axisy = Math.cos(this.rot);
	}
	,validate_axis: function() {
		if(this.zip_axis) {
			this.zip_axis = false;
			this.axisx = Math.sin(this.rot);
			this.axisy = Math.cos(this.rot);
			null;
		}
	}
	,invalidate_rot: function() {
		this.zip_axis = true;
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,setup_cvel: function() {
		var me = this;
		this.wrapcvel = nape.geom.Vec3.get();
		this.wrapcvel.zpp_inner.immutable = true;
		this.wrapcvel.zpp_inner._validate = $bind(this,this.cvel_validate);
	}
	,cvel_validate: function() {
		this.wrapcvel.zpp_inner.x = this.velx + this.kinvelx;
		this.wrapcvel.zpp_inner.y = this.vely + this.kinvely;
		this.wrapcvel.zpp_inner.z = this.angvel + this.kinangvel;
	}
	,setupForce: function() {
		this.wrap_force = nape.geom.Vec2.get(this.forcex,this.forcey,null);
		this.wrap_force.zpp_inner._inuse = true;
		if(this.world) this.wrap_force.zpp_inner._immutable = true; else {
			this.wrap_force.zpp_inner._invalidate = $bind(this,this.force_invalidate);
			this.wrap_force.zpp_inner._validate = $bind(this,this.force_validate);
		}
	}
	,setupsvel: function() {
		this.wrap_svel = nape.geom.Vec2.get(this.svelx,this.svely,null);
		this.wrap_svel.zpp_inner._inuse = true;
		if(this.world) this.wrap_svel.zpp_inner._immutable = true; else {
			this.wrap_svel.zpp_inner._invalidate = $bind(this,this.svel_invalidate);
			this.wrap_svel.zpp_inner._validate = $bind(this,this.svel_validate);
		}
	}
	,setupkinvel: function() {
		this.wrap_kinvel = nape.geom.Vec2.get(this.kinvelx,this.kinvely,null);
		this.wrap_kinvel.zpp_inner._inuse = true;
		if(this.world) this.wrap_kinvel.zpp_inner._immutable = true; else {
			this.wrap_kinvel.zpp_inner._invalidate = $bind(this,this.kinvel_invalidate);
			this.wrap_kinvel.zpp_inner._validate = $bind(this,this.kinvel_validate);
		}
	}
	,setupVelocity: function() {
		this.wrap_vel = nape.geom.Vec2.get(this.velx,this.vely,null);
		this.wrap_vel.zpp_inner._inuse = true;
		if(this.world) this.wrap_vel.zpp_inner._immutable = true; else {
			this.wrap_vel.zpp_inner._invalidate = $bind(this,this.vel_invalidate);
			this.wrap_vel.zpp_inner._validate = $bind(this,this.vel_validate);
		}
	}
	,setupPosition: function() {
		this.wrap_pos = nape.geom.Vec2.get(this.posx,this.posy,null);
		this.wrap_pos.zpp_inner._inuse = true;
		if(this.world) this.wrap_pos.zpp_inner._immutable = true; else {
			this.wrap_pos.zpp_inner._invalidate = $bind(this,this.pos_invalidate);
			this.wrap_pos.zpp_inner._validate = $bind(this,this.pos_validate);
		}
	}
	,force_validate: function() {
		this.wrap_force.zpp_inner.x = this.forcex;
		this.wrap_force.zpp_inner.y = this.forcey;
	}
	,force_invalidate: function(force) {
		if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) throw "Error: Non-dynamic body cannot have force applied.";
		this.forcex = force.x;
		this.forcey = force.y;
		this.wake();
	}
	,svel_validate: function() {
		this.wrap_svel.zpp_inner.x = this.svelx;
		this.wrap_svel.zpp_inner.y = this.svely;
	}
	,svel_invalidate: function(vel) {
		this.svelx = vel.x;
		this.svely = vel.y;
		this.wake();
	}
	,kinvel_validate: function() {
		this.wrap_kinvel.zpp_inner.x = this.kinvelx;
		this.wrap_kinvel.zpp_inner.y = this.kinvely;
	}
	,kinvel_invalidate: function(vel) {
		this.kinvelx = vel.x;
		this.kinvely = vel.y;
		this.wake();
	}
	,vel_validate: function() {
		this.wrap_vel.zpp_inner.x = this.velx;
		this.wrap_vel.zpp_inner.y = this.vely;
	}
	,vel_invalidate: function(vel) {
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) throw "Error: Static body cannot have its velocity set.";
		this.velx = vel.x;
		this.vely = vel.y;
		this.wake();
	}
	,pos_validate: function() {
		this.wrap_pos.zpp_inner.x = this.posx;
		this.wrap_pos.zpp_inner.y = this.posy;
	}
	,pos_invalidate: function(pos) {
		this.immutable_midstep("Body::position");
		if(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.space != null) throw "Error: Cannot move a static object once inside a Space";
		if(!(this.posx == pos.x && this.posy == pos.y)) {
			this.posx = pos.x;
			this.posy = pos.y;
			this.invalidate_pos();
			this.wake();
		}
	}
	,invalidate_pos: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.invalidate_gverts();
				s.polygon.invalidate_gaxi();
			}
			s.invalidate_worldCOM();
			cx_ite = cx_ite.next;
		}
		this.zip_worldCOM = true;
	}
	,sweepValidate: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
			s.worldCOMx = this.posx + (this.axisy * s.localCOMx - this.axisx * s.localCOMy);
			s.worldCOMy = this.posy + (s.localCOMx * this.axisx + s.localCOMy * this.axisy);
		} else {
			var p = s.polygon;
			var li = p.lverts.next;
			var cx_ite = p.gverts.next;
			while(cx_ite != null) {
				var g = cx_ite;
				var l = li;
				li = li.next;
				g.x = this.posx + (this.axisy * l.x - this.axisx * l.y);
				g.y = this.posy + (l.x * this.axisx + l.y * this.axisy);
				cx_ite = cx_ite.next;
			}
			var ite = p.edges.head;
			var cx_ite = p.gverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var e = ite.elt;
				ite = ite.next;
				e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
				e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
				e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
				e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
				u = v;
				cx_ite = cx_ite.next;
			}
			var v = p.gverts.next;
			var e = ite.elt;
			ite = ite.next;
			e.gnormx = this.axisy * e.lnormx - this.axisx * e.lnormy;
			e.gnormy = e.lnormx * this.axisx + e.lnormy * this.axisy;
			e.gprojection = this.posx * e.gnormx + this.posy * e.gnormy + e.lprojection;
			e.tp0 = u.y * e.gnormx - u.x * e.gnormy;
			e.tp1 = v.y * e.gnormx - v.x * e.gnormy;
		}
	}
	,sweepIntegrate: function(dt) {
		var delta = dt - this.sweepTime;
		if(delta != 0) {
			this.sweepTime = dt;
			var t = delta;
			this.posx += this.velx * t;
			this.posy += this.vely * t;
			if(this.angvel != 0) this.delta_rot(this.sweep_angvel * delta);
		}
	}
	,refreshArbiters: function() {
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			arb.invalidated = true;
			cx_ite = cx_ite.next;
		}
	}
	,atRest: function(dt) {
		if(!(this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) return this.component.sleeping; else {
			var linSq = nape.Config.linearSleepThreshold;
			linSq *= linSq;
			var cansleep = this.velx * this.velx + this.vely * this.vely > linSq?false:zpp_nape.geom.ZPP_VecMath.vec_dsq(this.posx,this.posy,this.pre_posx,this.pre_posy) > 0.25 * linSq * dt * dt?false:(function($this) {
				var $r;
				var dx = 0.0;
				var dy = 0.0;
				{
					dx = $this.aabb.maxx - $this.aabb.minx;
					dy = $this.aabb.maxy - $this.aabb.miny;
				}
				var idl = dx * dx + dy * dy;
				var angSq = nape.Config.angularSleepThreshold;
				angSq *= angSq;
				$r = 4 * $this.angvel * $this.angvel * idl > angSq?false:(function($this) {
					var $r;
					var dr = $this.rot - $this.pre_rot;
					$r = dr * dr * idl > angSq * dt * dt?false:true;
					return $r;
				}($this));
				return $r;
			}(this));
			if(!cansleep) this.component.waket = this.space.stamp;
			return this.component.waket + nape.Config.sleepDelay < this.space.stamp;
		}
	}
	,interactingBodies: function(arbiter_type,depth,output) {
		var _g = this;
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
		null;
		var ret = output == null?new nape.phys.BodyList():output;
		zpp_nape.phys.ZPP_Body.bodyset.insert(this);
		zpp_nape.phys.ZPP_Body.bodystack.add(this);
		this.graph_depth = 0;
		while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
			var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			var cx_ite = cur.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if((arb.type & arbiter_type) != 0) {
					var other = arb.b1 == cur?arb.b2:arb.b1;
					if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(other)) {
						zpp_nape.phys.ZPP_Body.bodystack.add(other);
						other.graph_depth = cur.graph_depth + 1;
					}
				}
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,connectedBodies: function(depth,output) {
		var _g = this;
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
		null;
		var ret = output == null?new nape.phys.BodyList():output;
		zpp_nape.phys.ZPP_Body.bodystack.add(this);
		zpp_nape.phys.ZPP_Body.bodyset.insert(this);
		this.graph_depth = 0;
		while(!(zpp_nape.phys.ZPP_Body.bodystack.head == null)) {
			var cur = zpp_nape.phys.ZPP_Body.bodystack.pop_unsafe();
			if(cur.graph_depth == depth) continue;
			zpp_nape.phys.ZPP_Body.cur_graph_depth = cur.graph_depth;
			var cx_ite = cur.constraints.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				c.outer.visitBodies($bind(this,this.connectedBodies_cont));
				cx_ite = cx_ite.next;
			}
		}
		zpp_nape.phys.ZPP_Body.bodyset.clear_with(function(b) {
			if(b != _g) ret.add(b.outer);
		});
		return ret;
	}
	,connectedBodies_cont: function(b) {
		if(zpp_nape.phys.ZPP_Body.bodyset.try_insert_bool(b.zpp_inner)) {
			zpp_nape.phys.ZPP_Body.bodystack.add(b.zpp_inner);
			b.zpp_inner.graph_depth = zpp_nape.phys.ZPP_Body.cur_graph_depth + 1;
		}
	}
	,init_bodysetlist: function() {
		if(zpp_nape.phys.ZPP_Body.bodyset == null) {
			zpp_nape.phys.ZPP_Body.bodyset = new zpp_nape.util.ZPP_Set_ZPP_Body();
			zpp_nape.phys.ZPP_Body.bodyset.lt = zpp_nape.phys.ZPP_Body.bodysetlt;
			zpp_nape.phys.ZPP_Body.bodystack = new zpp_nape.util.ZNPList_ZPP_Body();
		}
	}
	,invalidate_shapes: function() {
		this.zip_aabb = true;
		this.zip_localCOM = true;
		this.zip_worldCOM = true;
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,invalidate_type: function() {
		this.invalidate_mass();
		this.invalidate_inertia();
	}
	,isKinematic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
	}
	,isDynamic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC;
	}
	,isStatic: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC;
	}
	,__class__: zpp_nape.phys.ZPP_Body
});
zpp_nape.phys.ZPP_Compound = function() {
	this.space = null;
	this.compound = null;
	this.depth = 0;
	this.wrap_compounds = null;
	this.wrap_constraints = null;
	this.wrap_bodies = null;
	this.compounds = null;
	this.constraints = null;
	this.bodies = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.icompound = this;
	this.depth = 1;
	var me = this;
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
};
zpp_nape.phys.ZPP_Compound.__name__ = ["zpp_nape","phys","ZPP_Compound"];
zpp_nape.phys.ZPP_Compound.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.phys.ZPP_Compound.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	copy: function(dict,todo) {
		var root = dict == null;
		if(dict == null) dict = new Array();
		if(todo == null) todo = new Array();
		var ret = new nape.phys.Compound();
		var cx_ite = this.compounds.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			var cc = c.copy(dict,todo);
			cc.zpp_inner.immutable_midstep("Compound::compound");
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
				if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_compounds.remove(cc);
				if(ret != null) ret.zpp_inner.wrap_compounds.add(cc);
			}
			if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			var bc = b.outer.copy();
			dict.push(zpp_nape.constraint.ZPP_CopyHelper.dict(b.id,bc));
			if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != ret) {
				if((bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer) != null) (bc.zpp_inner.compound == null?null:bc.zpp_inner.compound.outer).zpp_inner.wrap_bodies.remove(bc);
				if(ret != null) ret.zpp_inner.wrap_bodies.add(bc);
			}
			if(bc.zpp_inner.compound == null) null; else bc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.constraints.head;
		while(cx_ite != null) {
			var c = cx_ite.elt;
			var cc = c.copy(dict,todo);
			if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != ret) {
				if((cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer) != null) (cc.zpp_inner.compound == null?null:cc.zpp_inner.compound.outer).zpp_inner.wrap_constraints.remove(cc);
				if(ret != null) ret.zpp_inner.wrap_constraints.add(cc);
			}
			if(cc.zpp_inner.compound == null) null; else cc.zpp_inner.compound.outer;
			cx_ite = cx_ite.next;
		}
		if(root) while(todo.length > 0) {
			var xcb = todo.pop();
			var _g = 0;
			while(_g < dict.length) {
				var idc = dict[_g];
				++_g;
				if(idc.id == xcb.id) {
					xcb.cb(idc.bc);
					break;
				}
			}
		}
		this.copyto(ret);
		return ret;
	}
	,compounds_modifiable: function() {
		this.immutable_midstep("Compound::" + "compounds");
	}
	,compounds_subber: function(x) {
		x.zpp_inner.compound = null;
		x.zpp_inner.depth = 1;
		if(this.space != null) this.space.remCompound(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		var cur = this;
		while(cur != null && cur != x.zpp_inner) cur = cur.compound;
		if(cur == x.zpp_inner) {
			throw "Error: Assignment would cause a cycle in the Compound tree: assigning " + x.toString() + ".compound = " + this.outer.toString();
			return false;
		}
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_compounds.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			x.zpp_inner.compound = this;
			x.zpp_inner.depth = this.depth + 1;
			if(this.space != null) this.space.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_modifiable: function() {
		this.immutable_midstep("Compound::" + "constraints");
	}
	,constraints_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remConstraint(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_constraints.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_constraints.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_modifiable: function() {
		this.immutable_midstep("Compound::" + "bodies");
	}
	,bodies_subber: function(x) {
		x.zpp_inner.compound = null;
		if(this.space != null) this.space.remBody(x.zpp_inner);
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != this) {
			if(x.zpp_inner.compound != null) x.zpp_inner.compound.wrap_bodies.remove(x); else if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_bodies.remove(x);
			x.zpp_inner.compound = this;
			if(this.space != null) this.space.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,breakApart: function() {
		if(this.space != null) {
			this.__iremovedFromSpace();
			this.space.nullInteractorType(this);
		}
		if(this.compound != null) this.compound.compounds.remove(this); else if(this.space != null) this.space.compounds.remove(this);
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if((b.compound = this.compound) != null) this.compound.bodies.add(b); else if(this.space != null) this.space.bodies.add(b);
			if(this.space != null) this.space.freshInteractorType(b);
		}
		while(!(this.constraints.head == null)) {
			var c = this.constraints.pop_unsafe();
			if((c.compound = this.compound) != null) this.compound.constraints.add(c); else if(this.space != null) this.space.constraints.add(c);
		}
		while(!(this.compounds.head == null)) {
			var c = this.compounds.pop_unsafe();
			if((c.compound = this.compound) != null) this.compound.compounds.add(c); else if(this.space != null) this.space.compounds.add(c);
			if(this.space != null) this.space.freshInteractorType(c);
		}
		this.compound = null;
		this.space = null;
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
	}
	,__imutable_midstep: function(name) {
		if(this.space != null && this.space.midstep) throw "Error: " + name + " cannot be set during space step()";
	}
	,__class__: zpp_nape.phys.ZPP_Compound
});
zpp_nape.phys.ZPP_FluidProperties = function() {
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.density = 0.0;
	this.viscosity = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.density = this.viscosity = 1;
	this.wrap_gravity = null;
	this.gravityx = 0;
	this.gravityy = 0;
};
zpp_nape.phys.ZPP_FluidProperties.__name__ = ["zpp_nape","phys","ZPP_FluidProperties"];
zpp_nape.phys.ZPP_FluidProperties.prototype = {
	invalidate: function() {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			shape.invalidate_fluidprops();
			cx_ite = cx_ite.next;
		}
	}
	,getgravity: function() {
		this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,gravity_invalidate: function(x) {
		this.gravityx = x.x;
		this.gravityy = x.y;
		this.invalidate();
	}
	,copy: function() {
		var ret;
		if(zpp_nape.phys.ZPP_FluidProperties.zpp_pool == null) ret = new zpp_nape.phys.ZPP_FluidProperties(); else {
			ret = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = ret.next;
			ret.next = null;
		}
		null;
		ret.viscosity = this.viscosity;
		ret.density = this.density;
		return ret;
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,alloc: function() {
	}
	,free: function() {
		this.outer = null;
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.phys.FluidProperties();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.phys.ZPP_FluidProperties.zpp_pool;
			zpp_nape.phys.ZPP_FluidProperties.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_nape.phys.ZPP_FluidProperties
}
zpp_nape.phys.ZPP_Material = function() {
	this.rollingFriction = 0.0;
	this.elasticity = 0.0;
	this.density = 0.0;
	this.staticFriction = 0.0;
	this.dynamicFriction = 0.0;
	this.wrap_shapes = null;
	this.shapes = null;
	this.outer = null;
	this.userData = null;
	this.next = null;
	this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	this.elasticity = 0;
	this.dynamicFriction = 1;
	this.staticFriction = 2;
	this.density = 0.001;
	this.rollingFriction = 0.01;
};
zpp_nape.phys.ZPP_Material.__name__ = ["zpp_nape","phys","ZPP_Material"];
zpp_nape.phys.ZPP_Material.prototype = {
	invalidate: function(x) {
		var cx_ite = this.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			s.invalidate_material(x);
			cx_ite = cx_ite.next;
		}
	}
	,set: function(x) {
		this.dynamicFriction = x.dynamicFriction;
		this.staticFriction = x.staticFriction;
		this.density = x.density;
		this.elasticity = x.elasticity;
		this.rollingFriction = x.rollingFriction;
	}
	,copy: function() {
		var ret = new zpp_nape.phys.ZPP_Material();
		ret.dynamicFriction = this.dynamicFriction;
		ret.staticFriction = this.staticFriction;
		ret.density = this.density;
		ret.elasticity = this.elasticity;
		ret.rollingFriction = this.rollingFriction;
		return ret;
	}
	,remShape: function(shape) {
		this.shapes.remove(shape);
	}
	,addShape: function(shape) {
		this.shapes.add(shape);
	}
	,feature_cons: function() {
		this.shapes = new zpp_nape.util.ZNPList_ZPP_Shape();
	}
	,alloc: function() {
	}
	,free: function() {
		this.outer = null;
	}
	,wrapper: function() {
		if(this.outer == null) {
			this.outer = new nape.phys.Material();
			var o = this.outer.zpp_inner;
			o.outer = null;
			o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
			zpp_nape.phys.ZPP_Material.zpp_pool = o;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,__class__: zpp_nape.phys.ZPP_Material
}
zpp_nape.shape = {}
zpp_nape.shape.ZPP_Shape = function(type) {
	this.zip_aabb = false;
	this.aabb = null;
	this.pairs = null;
	this.node = null;
	this.sweep = null;
	this.sensorEnabled = false;
	this.fluidEnabled = false;
	this.fluidProperties = null;
	this.filter = null;
	this.material = null;
	this.refmaterial = null;
	this.polygon = null;
	this.circle = null;
	this.sweepCoef = 0.0;
	this.zip_sweepRadius = false;
	this.sweepRadius = 0.0;
	this.wrap_worldCOM = null;
	this.wrap_localCOM = null;
	this.zip_worldCOM = false;
	this.worldCOMy = 0.0;
	this.worldCOMx = 0.0;
	this.zip_localCOM = false;
	this.localCOMy = 0.0;
	this.localCOMx = 0.0;
	this.zip_angDrag = false;
	this.angDrag = 0.0;
	this.inertia = 0.0;
	this.zip_area_inertia = false;
	this.area = 0.0;
	this.type = 0;
	this.body = null;
	this.outer = null;
	zpp_nape.phys.ZPP_Interactor.call(this);
	this.pairs = new zpp_nape.util.ZNPList_ZPP_AABBPair();
	this.ishape = this;
	this.type = type;
	this.aabb = zpp_nape.geom.ZPP_AABB.get(0,0,0,0);
	this.aabb._immutable = true;
	var me = this;
	this.aabb._validate = $bind(this,this.aabb_validate);
	this.zip_area_inertia = this.zip_angDrag = this.zip_localCOM = this.zip_sweepRadius = true;
	this.localCOMx = 0;
	this.localCOMy = 0;
	this.worldCOMx = 0;
	this.worldCOMy = 0;
	this.fluidEnabled = false;
	this.sensorEnabled = false;
	this.fluidProperties = null;
	this.body = null;
	this.refmaterial = new zpp_nape.phys.ZPP_Material();
	this.sweepRadius = this.sweepCoef = 0;
};
zpp_nape.shape.ZPP_Shape.__name__ = ["zpp_nape","shape","ZPP_Shape"];
zpp_nape.shape.ZPP_Shape.__super__ = zpp_nape.phys.ZPP_Interactor;
zpp_nape.shape.ZPP_Shape.prototype = $extend(zpp_nape.phys.ZPP_Interactor.prototype,{
	copy: function() {
		var ret = null;
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ret = this.circle.__copy(); else ret = this.polygon.__copy();
		if(!this.zip_area_inertia) {
			ret.area = this.area;
			ret.inertia = this.inertia;
		} else ret.invalidate_area_inertia();
		if(!this.zip_sweepRadius) {
			ret.sweepRadius = this.sweepRadius;
			ret.sweepCoef = this.sweepCoef;
		} else ret.zip_sweepRadius = true;
		if(!this.zip_angDrag) ret.angDrag = this.angDrag; else ret.invalidate_angDrag();
		if(!this.zip_aabb) {
			ret.aabb.minx = this.aabb.minx;
			ret.aabb.miny = this.aabb.miny;
			ret.aabb.maxx = this.aabb.maxx;
			ret.aabb.maxy = this.aabb.maxy;
		} else {
			ret.zip_aabb = true;
			if(ret.body != null) ret.body.zip_aabb = true;
		}
		var o = ret.material;
		o.outer = null;
		o.next = zpp_nape.phys.ZPP_Material.zpp_pool;
		zpp_nape.phys.ZPP_Material.zpp_pool = o;
		var o = ret.filter;
		o.outer = null;
		o.next = zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool;
		zpp_nape.dynamics.ZPP_InteractionFilter.zpp_pool = o;
		ret.material = this.material;
		ret.filter = this.filter;
		if(this.fluidProperties != null) ret.fluidProperties = this.fluidProperties;
		ret.fluidEnabled = this.fluidEnabled;
		ret.sensorEnabled = this.sensorEnabled;
		if(this.userData != null) ret.userData = Reflect.copy(this.userData);
		this.copyto(ret.outer);
		return ret.outer;
	}
	,removedFromSpace: function() {
		this.__iremovedFromSpace();
		this.material.shapes.remove(this);
		this.filter.shapes.remove(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
	}
	,addedToSpace: function() {
		this.__iaddedToSpace();
		this.material.shapes.add(this);
		this.filter.shapes.add(this);
		if(this.fluidProperties != null) this.fluidProperties.shapes.add(this);
	}
	,removedFromBody: function() {
	}
	,addedToBody: function() {
		this.invalidate_worldCOM();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,__immutable_midstep: function(name) {
		if(this.body != null && this.body.space != null && this.body.space.midstep) throw "Error: " + name + " cannot be set during a space step()";
	}
	,setFluid: function(fluid) {
		if(this.fluidProperties != fluid) {
			if(this.body != null && this.body.space != null) {
				if(this.fluidProperties != null) this.fluidProperties.shapes.remove(this);
			}
			this.fluidProperties = fluid;
			if(this.body != null && this.body.space != null) fluid.shapes.add(this);
			if(this.fluidEnabled) this.wake();
		}
	}
	,setFilter: function(filter) {
		if(this.filter != filter) {
			if(this.body != null && this.body.space != null) {
				if(this.filter != null) this.filter.shapes.remove(this);
			}
			this.filter = filter;
			if(this.body != null && this.body.space != null) filter.shapes.add(this);
			this.wake();
		}
	}
	,setMaterial: function(material) {
		if(this.material != material) {
			if(this.body != null && this.body.space != null) {
				if(this.material != null) this.material.shapes.remove(this);
			}
			this.material = material;
			if(this.body != null && this.body.space != null) material.shapes.add(this);
			this.wake();
			if(this.body != null) this.body.refreshArbiters();
		}
	}
	,aabb_validate: function() {
		if(this.body == null) throw "Error: bounds only makes sense when Shape belongs to a Body";
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,invalidate_fluidprops: function() {
		if(this.fluidEnabled) this.wake();
	}
	,invalidate_filter: function() {
		this.wake();
	}
	,invalidate_material: function(flags) {
		if((flags & zpp_nape.phys.ZPP_Material.WAKE) != 0) this.wake();
		if((flags & zpp_nape.phys.ZPP_Material.ARBITERS) != 0) {
			if(this.body != null) this.body.refreshArbiters();
		}
		if((flags & zpp_nape.phys.ZPP_Material.PROPS) != 0) {
			if(this.body != null) {
				this.body.invalidate_localCOM();
				this.body.invalidate_mass();
				this.body.invalidate_inertia();
			}
		}
		if((flags & zpp_nape.phys.ZPP_Material.ANGDRAG) != 0) this.invalidate_angDrag();
		this.refmaterial.set(this.material);
	}
	,invalidate_worldCOM: function() {
		this.zip_worldCOM = true;
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,invalidate_localCOM: function() {
		this.zip_localCOM = true;
		this.invalidate_area_inertia();
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.zip_sweepRadius = true;
		this.invalidate_angDrag();
		this.invalidate_worldCOM();
		if(this.body != null) this.body.invalidate_localCOM();
	}
	,invalidate_angDrag: function() {
		this.zip_angDrag = true;
	}
	,invalidate_area_inertia: function() {
		this.zip_area_inertia = true;
		if(this.body != null) {
			this.body.invalidate_localCOM();
			this.body.invalidate_mass();
			this.body.invalidate_inertia();
		}
	}
	,getworldCOM: function() {
		if(this.body == null) throw "Error: worldCOM only makes sense when Shape belongs to a Body";
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		this.wrap_worldCOM.zpp_inner.x = this.worldCOMx;
		this.wrap_worldCOM.zpp_inner.y = this.worldCOMy;
	}
	,validate_worldCOM: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
	}
	,validate_localCOM: function() {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,validate_angDrag: function() {
		if(this.zip_angDrag || this.refmaterial.dynamicFriction != this.material.dynamicFriction) {
			this.zip_angDrag = false;
			this.refmaterial.dynamicFriction = this.material.dynamicFriction;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_angDrag(); else this.polygon.__validate_angDrag();
		}
	}
	,validate_area_inertia: function() {
		if(this.zip_area_inertia) {
			this.zip_area_inertia = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_area_inertia(); else this.polygon.__validate_area_inertia();
		}
	}
	,invalidate_aabb: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
	}
	,force_validate_aabb: function() {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle._force_validate_aabb(); else this.polygon._force_validate_aabb();
	}
	,validate_aabb: function() {
		if(this.zip_aabb) {
			if(this.body != null) {
				this.zip_aabb = false;
				if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_aabb(); else this.polygon.__validate_aabb();
			}
		}
	}
	,clear: function() {
		if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__clear(); else this.polygon.__clear();
	}
	,validate_sweepRadius: function() {
		if(this.zip_sweepRadius) {
			this.zip_sweepRadius = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) this.circle.__validate_sweepRadius(); else this.polygon.__validate_sweepRadius();
		}
	}
	,invalidate_sweepRadius: function() {
		this.zip_sweepRadius = true;
	}
	,isPolygon: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON;
	}
	,isCircle: function() {
		return this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE;
	}
	,__class__: zpp_nape.shape.ZPP_Shape
});
zpp_nape.shape.ZPP_Circle = function() {
	this.radius = 0.0;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE);
	this.circle = this;
	this.zip_localCOM = false;
};
zpp_nape.shape.ZPP_Circle.__name__ = ["zpp_nape","shape","ZPP_Circle"];
zpp_nape.shape.ZPP_Circle.__super__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Circle.prototype = $extend(zpp_nape.shape.ZPP_Shape.prototype,{
	__copy: function() {
		var ret = new nape.shape.Circle(this.radius).zpp_inner_zn;
		ret.localCOMx = this.localCOMx;
		ret.localCOMy = this.localCOMy;
		ret.zip_localCOM = false;
		return ret;
	}
	,__transform: function(m) {
		var det = m.zpp_inner.a * m.zpp_inner.d - m.zpp_inner.b * m.zpp_inner.c;
		if(det < 0) det = -det;
		this.radius *= Math.sqrt(det);
		var t = m.zpp_inner.a * this.localCOMx + m.zpp_inner.b * this.localCOMy + m.zpp_inner.tx;
		this.localCOMy = m.zpp_inner.c * this.localCOMx + m.zpp_inner.d * this.localCOMy + m.zpp_inner.ty;
		this.localCOMx = t;
		this.invalidate_radius();
		this.invalidate_localCOM();
	}
	,__rotate: function(x,y) {
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			var tx = 0.0;
			var ty = 0.0;
			tx = y * this.localCOMx - x * this.localCOMy;
			ty = this.localCOMx * x + this.localCOMy * y;
			this.localCOMx = tx;
			this.localCOMy = ty;
			this.invalidate_localCOM();
		}
	}
	,__translate: function(x,y) {
		var t = 1.0;
		this.localCOMx += x * t;
		this.localCOMy += y * t;
		this.invalidate_localCOM();
	}
	,__scale: function(sx,sy) {
		var factor = ((sx < 0?-sx:sx) + (sy < 0?-sy:sy)) / 2;
		this.radius *= factor < 0?-factor:factor;
		this.invalidate_radius();
		if(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy > 0) {
			this.localCOMx *= sx;
			this.localCOMy *= sy;
			this.invalidate_localCOM();
		}
	}
	,__validate_angDrag: function() {
		var lc = this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy;
		var r2 = this.radius * this.radius;
		var skin = this.material.dynamicFriction * nape.Config.fluidAngularDragFriction;
		this.angDrag = (lc + 2 * r2) * skin + 0.5 * nape.Config.fluidAngularDrag * (1 + nape.Config.fluidVacuumDrag) * lc;
		this.angDrag /= 2 * (lc + 0.5 * r2);
	}
	,__validate_area_inertia: function() {
		var r2 = this.radius * this.radius;
		this.area = r2 * Math.PI;
		this.inertia = r2 * 0.5 + (this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
	}
	,__validate_sweepRadius: function() {
		this.sweepCoef = Math.sqrt(this.localCOMx * this.localCOMx + this.localCOMy * this.localCOMy);
		this.sweepRadius = this.sweepCoef + this.radius;
	}
	,_force_validate_aabb: function() {
		this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
		this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
		this.aabb.minx = this.worldCOMx - this.radius;
		this.aabb.miny = this.worldCOMy - this.radius;
		this.aabb.maxx = this.worldCOMx + this.radius;
		this.aabb.maxy = this.worldCOMy + this.radius;
	}
	,__validate_aabb: function() {
		if(this.zip_worldCOM) {
			if(this.body != null) {
				this.zip_worldCOM = false;
				if(this.zip_localCOM) {
					this.zip_localCOM = false;
					if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
					if(this.wrap_localCOM != null) {
						this.wrap_localCOM.zpp_inner.x = this.localCOMx;
						this.wrap_localCOM.zpp_inner.y = this.localCOMy;
					}
				}
				this.body.validate_axis();
				this.worldCOMx = this.body.posx + (this.body.axisy * this.localCOMx - this.body.axisx * this.localCOMy);
				this.worldCOMy = this.body.posy + (this.localCOMx * this.body.axisx + this.localCOMy * this.body.axisy);
			}
		}
		var rx = this.radius;
		var ry = this.radius;
		this.aabb.minx = this.worldCOMx - rx;
		this.aabb.miny = this.worldCOMy - ry;
		this.aabb.maxx = this.worldCOMx + rx;
		this.aabb.maxy = this.worldCOMy + ry;
	}
	,setupLocalCOM: function() {
		var me = this;
		this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
		this.wrap_localCOM.zpp_inner._isimmutable = $bind(this,this.localCOM_immutable);
	}
	,localCOM_immutable: function() {
		if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modify localCOM of Circle added to a static Body whilst within a Space";
	}
	,localCOM_invalidate: function(x) {
		this.localCOMx = x.x;
		this.localCOMy = x.y;
		this.invalidate_localCOM();
		if(this.body != null) this.body.wake();
	}
	,localCOM_validate: function() {
		this.wrap_localCOM.zpp_inner.x = this.localCOMx;
		this.wrap_localCOM.zpp_inner.y = this.localCOMy;
	}
	,invalidate_radius: function() {
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		if(this.body != null) this.body.wake();
	}
	,__clear: function() {
	}
	,__class__: zpp_nape.shape.ZPP_Circle
});
zpp_nape.shape.ZPP_Edge = function() {
	this.tp1 = 0.0;
	this.tp0 = 0.0;
	this.gp1 = null;
	this.lp1 = null;
	this.gp0 = null;
	this.lp0 = null;
	this.gprojection = 0.0;
	this.lprojection = 0.0;
	this.length = 0.0;
	this.wrap_gnorm = null;
	this.gnormy = 0.0;
	this.gnormx = 0.0;
	this.wrap_lnorm = null;
	this.lnormy = 0.0;
	this.lnormx = 0.0;
	this.outer = null;
	this.polygon = null;
	this.next = null;
	this.lnormx = 0;
	this.lnormy = 0;
	this.gnormx = 0;
	this.gnormy = 0;
	this.length = 0;
	this.lprojection = 0;
	this.gprojection = 0;
};
zpp_nape.shape.ZPP_Edge.__name__ = ["zpp_nape","shape","ZPP_Edge"];
zpp_nape.shape.ZPP_Edge.prototype = {
	getgnorm: function() {
		this.wrap_gnorm = nape.geom.Vec2.get(this.gnormx,this.gnormy,null);
		this.wrap_gnorm.zpp_inner._immutable = true;
		this.wrap_gnorm.zpp_inner._validate = $bind(this,this.gnorm_validate);
	}
	,getlnorm: function() {
		this.wrap_lnorm = nape.geom.Vec2.get(this.lnormx,this.lnormy,null);
		this.wrap_lnorm.zpp_inner._immutable = true;
		this.wrap_lnorm.zpp_inner._validate = $bind(this,this.lnorm_validate);
	}
	,gnorm_validate: function() {
		if(this.polygon == null) throw "Error: Edge not currently in use";
		if(this.polygon.body == null) throw "Error: Edge worldNormal only makes sense if the parent Polygon is contained within a rigid body";
		this.polygon.validate_gaxi();
		this.wrap_gnorm.zpp_inner.x = this.gnormx;
		this.wrap_gnorm.zpp_inner.y = this.gnormy;
	}
	,lnorm_validate: function() {
		if(this.polygon == null) throw "Error: Edge not currently in use";
		this.polygon.validate_laxi();
		this.wrap_lnorm.zpp_inner.x = this.lnormx;
		this.wrap_lnorm.zpp_inner.y = this.lnormy;
	}
	,wrapper: function() {
		if(this.outer == null) {
			zpp_nape.shape.ZPP_Edge.internal = true;
			this.outer = new nape.shape.Edge();
			zpp_nape.shape.ZPP_Edge.internal = false;
			this.outer.zpp_inner = this;
		}
		return this.outer;
	}
	,alloc: function() {
	}
	,free: function() {
		this.polygon = null;
	}
	,__class__: zpp_nape.shape.ZPP_Edge
}
zpp_nape.shape.ZPP_Polygon = function() {
	this.zip_sanitation = false;
	this.zip_valid = false;
	this.zip_gaxi = false;
	this.zip_gverts = false;
	this.zip_laxi = false;
	this.zip_lverts = false;
	this.reverse_flag = false;
	this.edgeCnt = 0;
	this.wrap_edges = null;
	this.edges = null;
	this.wrap_gverts = null;
	this.gverts = null;
	this.wrap_lverts = null;
	this.lverts = null;
	this.outer_zn = null;
	zpp_nape.shape.ZPP_Shape.call(this,zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON);
	this.polygon = this;
	this.lverts = new zpp_nape.geom.ZPP_Vec2();
	this.gverts = new zpp_nape.geom.ZPP_Vec2();
	this.edges = new zpp_nape.util.ZNPList_ZPP_Edge();
	this.edgeCnt = 0;
};
zpp_nape.shape.ZPP_Polygon.__name__ = ["zpp_nape","shape","ZPP_Polygon"];
zpp_nape.shape.ZPP_Polygon.__super__ = zpp_nape.shape.ZPP_Shape;
zpp_nape.shape.ZPP_Polygon.prototype = $extend(zpp_nape.shape.ZPP_Shape.prototype,{
	__copy: function() {
		var ret = new nape.shape.Polygon(this.outer_zn.get_localVerts()).zpp_inner_zn;
		return ret;
	}
	,__transform: function(mat) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = mat.zpp_inner.a * p.x + mat.zpp_inner.b * p.y + mat.zpp_inner.tx;
			p.y = mat.zpp_inner.c * p.x + mat.zpp_inner.d * p.y + mat.zpp_inner.ty;
			p.x = t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__rotate: function(ax,ay) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var tempx = 0.0;
			var tempy = 0.0;
			tempx = ay * p.x - ax * p.y;
			tempy = p.x * ax + p.y * ay;
			p.x = tempx;
			p.y = tempy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__scale: function(sx,sy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			p.x *= sx;
			p.y *= sy;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,__translate: function(dx,dy) {
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += dx * t;
			p.y += dy * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,setupLocalCOM: function() {
		this.wrap_localCOM = nape.geom.Vec2.get(this.localCOMx,this.localCOMy,null);
		this.wrap_localCOM.zpp_inner._inuse = true;
		this.wrap_localCOM.zpp_inner._validate = $bind(this,this.localCOM_validate);
		this.wrap_localCOM.zpp_inner._invalidate = $bind(this,this.localCOM_invalidate);
	}
	,localCOM_invalidate: function(x) {
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
		var delx = 0;
		var dely = 0;
		delx = x.x - this.localCOMx;
		dely = x.y - this.localCOMy;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var t = 1.0;
			p.x += delx * t;
			p.y += dely * t;
			cx_ite = cx_ite.next;
		}
		this.invalidate_lverts();
	}
	,localCOM_validate: function() {
		if(this.lverts.next == null) throw "Error: An empty polygon does not have any meaningful localCOM";
		if(this.zip_localCOM) {
			this.zip_localCOM = false;
			if(this.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) this.polygon.__validate_localCOM();
			if(this.wrap_localCOM != null) {
				this.wrap_localCOM.zpp_inner.x = this.localCOMx;
				this.wrap_localCOM.zpp_inner.y = this.localCOMy;
			}
		}
	}
	,__validate_localCOM: function() {
		if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful localCOM";
		if(this.lverts.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
		} else if(this.lverts.next.next.next == null) {
			this.localCOMx = this.lverts.next.x;
			this.localCOMy = this.lverts.next.y;
			var t = 1.0;
			this.localCOMx += this.lverts.next.next.x * t;
			this.localCOMy += this.lverts.next.next.y * t;
			var t = 0.5;
			this.localCOMx *= t;
			this.localCOMy *= t;
		} else {
			this.localCOMx = 0;
			this.localCOMy = 0;
			var area = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				area += v.x * (w.y - u.y);
				var cf = w.y * v.x - w.x * v.y;
				this.localCOMx += (v.x + w.x) * cf;
				this.localCOMy += (v.y + w.y) * cf;
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			area += v.x * (w.y - u.y);
			var cf = w.y * v.x - w.x * v.y;
			this.localCOMx += (v.x + w.x) * cf;
			this.localCOMy += (v.y + w.y) * cf;
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w1 = cx_ite;
			area += v.x * (w1.y - u.y);
			var cf = w1.y * v.x - w1.x * v.y;
			this.localCOMx += (v.x + w1.x) * cf;
			this.localCOMy += (v.y + w1.y) * cf;
			area = 1 / (3 * area);
			var t = area;
			this.localCOMx *= t;
			this.localCOMy *= t;
		}
	}
	,__validate_angDrag: function() {
		if(this.lverts.length < 3) throw "Error: Polygon's with less than 3 vertices have no meaningful angDrag";
		this.validate_area_inertia();
		this.validate_laxi();
		var accum = 0.0;
		var ei = this.edges.head;
		var perim = 0.0;
		var cx_cont = true;
		var cx_itei = this.lverts.next;
		var u = cx_itei;
		var cx_itej = cx_itei.next;
		while(cx_itej != null) {
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta = t > 1?1:t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape.Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb = t < 0?0:t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = tb;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * cx - edge.lnormx * cy;
				var dotb = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * nape.Config.fluidVacuumDrag * (1 - tb) * edge.length * nape.Config.fluidAngularDrag;
			}
			cx_itei = cx_itej;
			u = v;
			cx_itej = cx_itej.next;
		}
		if(cx_cont) do {
			cx_itej = this.lverts.next;
			var v = cx_itej;
			var edge = ei.elt;
			ei = ei.next;
			perim += edge.length;
			var dx = 0.0;
			var dy = 0.0;
			dx = v.x - u.x;
			dy = v.y - u.y;
			accum += edge.length * nape.Config.fluidAngularDragFriction * this.material.dynamicFriction * edge.lprojection * edge.lprojection;
			var t = -(u.y * edge.lnormx - u.x * edge.lnormy) / (dy * edge.lnormx - dx * edge.lnormy);
			if(t > 0) {
				var ta = t > 1?1:t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = ta;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * u.x - edge.lnormx * u.y;
				var dotb = edge.lnormy * cx - edge.lnormx * cy;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * ta * edge.length * nape.Config.fluidAngularDrag;
			}
			if(t < 1) {
				var tb = t < 0?0:t;
				var cx = 0.0;
				var cy = 0.0;
				cx = u.x;
				cy = u.y;
				var t1 = tb;
				cx += dx * t1;
				cy += dy * t1;
				var dota = edge.lnormy * cx - edge.lnormx * cy;
				var dotb = edge.lnormy * v.x - edge.lnormx * v.y;
				var dots = (dotb * dotb * dotb - dota * dota * dota) / (3 * (dotb - dota));
				accum += dots * nape.Config.fluidVacuumDrag * (1 - tb) * edge.length * nape.Config.fluidAngularDrag;
			}
		} while(false);
		this.angDrag = accum / (this.inertia * perim);
	}
	,__validate_area_inertia: function() {
		if(this.lverts.next == null || this.lverts.next.next == null || this.lverts.next.next.next == null) {
			this.area = 0;
			this.inertia = 0;
		} else {
			this.area = 0.0;
			var s1 = 0.0;
			var s2 = 0.0;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			var v = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var w = cx_ite;
				var a = v.y * u.x - v.x * u.y;
				var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
				s1 += a * b;
				s2 += a;
				this.area += v.x * (w.y - u.y);
				u = v;
				v = w;
				cx_ite = cx_ite.next;
			}
			cx_ite = this.lverts.next;
			var w = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a * b;
			s2 += a;
			this.area += v.x * (w.y - u.y);
			u = v;
			v = w;
			cx_ite = cx_ite.next;
			var w1 = cx_ite;
			var a = v.y * u.x - v.x * u.y;
			var b = v.x * v.x + v.y * v.y + (v.x * u.x + v.y * u.y) + (u.x * u.x + u.y * u.y);
			s1 += a * b;
			s2 += a;
			this.area += v.x * (w1.y - u.y);
			this.inertia = s1 / (6 * s2);
			this.area *= 0.5;
			if(this.area < 0) {
				this.area = -this.area;
				this.reverse_vertices();
			}
		}
	}
	,__validate_sweepRadius: function() {
		var maxRadius = 0.0;
		var minRadius = 0.0;
		this.validate_laxi();
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var x = cx_ite;
			var r = x.x * x.x + x.y * x.y;
			if(r > maxRadius) maxRadius = r;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.edges.head;
		while(cx_ite != null) {
			var e = cx_ite.elt;
			if(e.lprojection < minRadius) {
				minRadius = e.lprojection;
				if(minRadius < 0) break;
			}
			cx_ite = cx_ite.next;
		}
		if(minRadius < 0) minRadius = 0;
		this.sweepRadius = Math.sqrt(maxRadius);
		this.sweepCoef = this.sweepRadius - minRadius;
	}
	,_force_validate_aabb: function() {
		var li = this.lverts.next;
		var p0 = this.gverts.next;
		var l = li;
		li = li.next;
		p0.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
		p0.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			var l1 = li;
			li = li.next;
			p.x = this.body.posx + (this.body.axisy * l1.x - this.body.axisx * l1.y);
			p.y = this.body.posy + (l1.x * this.body.axisx + l1.y * this.body.axisy);
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,__validate_aabb: function() {
		this.validate_gverts();
		if(this.lverts.next == null) throw "Error: An empty polygon has no meaningful bounds";
		var p0 = this.gverts.next;
		this.aabb.minx = p0.x;
		this.aabb.miny = p0.y;
		this.aabb.maxx = p0.x;
		this.aabb.maxy = p0.y;
		var cx_ite = this.gverts.next.next;
		while(cx_ite != null) {
			var p = cx_ite;
			if(p.x < this.aabb.minx) this.aabb.minx = p.x;
			if(p.x > this.aabb.maxx) this.aabb.maxx = p.x;
			if(p.y < this.aabb.miny) this.aabb.miny = p.y;
			if(p.y > this.aabb.maxy) this.aabb.maxy = p.y;
			cx_ite = cx_ite.next;
		}
	}
	,validate_gaxi: function() {
		if(this.zip_gaxi) {
			if(this.body != null) {
				this.zip_gaxi = false;
				this.validate_laxi();
				this.body.validate_axis();
				this.validate_gverts();
				var ite = this.edges.head;
				var cx_ite = this.gverts.next;
				var u = cx_ite;
				cx_ite = cx_ite.next;
				while(cx_ite != null) {
					var v = cx_ite;
					var e = ite.elt;
					ite = ite.next;
					e.gp0 = u;
					e.gp1 = v;
					e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
					e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
					e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
					if(e.wrap_gnorm != null) {
						e.wrap_gnorm.zpp_inner.x = e.gnormx;
						e.wrap_gnorm.zpp_inner.y = e.gnormy;
					}
					e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
					e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
					u = v;
					cx_ite = cx_ite.next;
				}
				var v = this.gverts.next;
				var e = ite.elt;
				ite = ite.next;
				e.gp0 = u;
				e.gp1 = v;
				e.gnormx = this.body.axisy * e.lnormx - this.body.axisx * e.lnormy;
				e.gnormy = e.lnormx * this.body.axisx + e.lnormy * this.body.axisy;
				e.gprojection = this.body.posx * e.gnormx + this.body.posy * e.gnormy + e.lprojection;
				if(e.wrap_gnorm != null) {
					e.wrap_gnorm.zpp_inner.x = e.gnormx;
					e.wrap_gnorm.zpp_inner.y = e.gnormy;
				}
				e.tp0 = e.gp0.y * e.gnormx - e.gp0.x * e.gnormy;
				e.tp1 = e.gp1.y * e.gnormx - e.gp1.x * e.gnormy;
			}
		}
	}
	,validate_gverts: function() {
		if(this.zip_gverts) {
			if(this.body != null) {
				this.zip_gverts = false;
				this.validate_lverts();
				this.body.validate_axis();
				var li = this.lverts.next;
				var cx_ite = this.gverts.next;
				while(cx_ite != null) {
					var g = cx_ite;
					var l = li;
					li = li.next;
					g.x = this.body.posx + (this.body.axisy * l.x - this.body.axisx * l.y);
					g.y = this.body.posy + (l.x * this.body.axisx + l.y * this.body.axisy);
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,validate_laxi: function() {
		if(this.zip_laxi) {
			this.zip_laxi = false;
			this.validate_lverts();
			var ite = this.edges.head;
			var cx_ite = this.lverts.next;
			var u = cx_ite;
			cx_ite = cx_ite.next;
			while(cx_ite != null) {
				var v = cx_ite;
				var edge = ite.elt;
				ite = ite.next;
				edge.lp0 = u;
				edge.lp1 = v;
				var dx = 0.0;
				var dy = 0.0;
				dx = u.x - v.x;
				dy = u.y - v.y;
				var l = Math.sqrt(dx * dx + dy * dy);
				edge.length = l;
				var t = 1.0 / l;
				dx *= t;
				dy *= t;
				var t = dx;
				dx = -dy;
				dy = t;
				edge.lprojection = dx * u.x + dy * u.y;
				edge.lnormx = dx;
				edge.lnormy = dy;
				if(edge.wrap_lnorm != null) {
					edge.wrap_lnorm.zpp_inner.x = dx;
					edge.wrap_lnorm.zpp_inner.y = dy;
				}
				u = v;
				cx_ite = cx_ite.next;
			}
			var v = this.lverts.next;
			var edge = ite.elt;
			ite = ite.next;
			edge.lp0 = u;
			edge.lp1 = v;
			var dx = 0.0;
			var dy = 0.0;
			dx = u.x - v.x;
			dy = u.y - v.y;
			var l = Math.sqrt(dx * dx + dy * dy);
			edge.length = l;
			var t = 1.0 / l;
			dx *= t;
			dy *= t;
			var t = dx;
			dx = -dy;
			dy = t;
			edge.lprojection = dx * u.x + dy * u.y;
			edge.lnormx = dx;
			edge.lnormy = dy;
			if(edge.wrap_lnorm != null) {
				edge.wrap_lnorm.zpp_inner.x = dx;
				edge.wrap_lnorm.zpp_inner.y = dy;
			}
		}
	}
	,reverse_vertices: function() {
		this.lverts.reverse();
		this.gverts.reverse();
		this.edges.reverse();
		var ite = this.edges.iterator_at(this.edgeCnt - 1);
		var elem = this.edges.pop_unsafe();
		this.edges.insert(ite,elem);
		this.reverse_flag = !this.reverse_flag;
		if(this.wrap_lverts != null) this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_gverts != null) this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		if(this.wrap_edges != null) this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,splice_collinear_real: function() {
		if(this.lverts.next == null) return;
		if(this.lverts.next.next == null) return;
		if(this.lverts.next.next.next == null) return;
		var pre = null;
		var cur = this.lverts.next;
		while(cur != null) {
			var nxt = cur.next == null?this.lverts.next:cur.next;
			var u = cur;
			var v = nxt;
			if(zpp_nape.geom.ZPP_VecMath.vec_dsq(u.x,u.y,v.x,v.y) < nape.Config.epsilon * nape.Config.epsilon) {
				this.cleanup_lvert(cur);
				cur = this.lverts.erase(pre);
			} else {
				pre = cur;
				cur = cur.next;
			}
		}
		if(this.lverts.next == null) return;
		var removed;
		do {
			removed = false;
			var pre1 = this.lverts.next;
			while(pre1 != null) {
				var cur1 = pre1.next == null?this.lverts.next:pre1.next;
				var nxt = cur1.next == null?this.lverts.next:cur1.next;
				var u = pre1;
				var v = cur1;
				var w = nxt;
				var ax = 0.0;
				var ay = 0.0;
				ax = v.x - u.x;
				ay = v.y - u.y;
				var bx = 0.0;
				var by = 0.0;
				bx = w.x - v.x;
				by = w.y - v.y;
				var crs = by * ax - bx * ay;
				if(crs * crs >= nape.Config.epsilon * nape.Config.epsilon) pre1 = pre1.next; else {
					this.cleanup_lvert(cur1);
					this.lverts.erase(pre1.next == null?null:pre1);
					removed = true;
					pre1 = pre1.next;
				}
			}
		} while(removed);
	}
	,splice_collinear: function() {
		if(this.zip_sanitation) {
			this.zip_sanitation = false;
			this.splice_collinear_real();
		}
	}
	,cleanup_lvert: function(x) {
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x) break; else {
				ite = ite == null?this.gverts.next:ite.next;
				ite2 = ite2 == null?this.edges.head:ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var rem = ite == null?this.gverts.next:ite.next;
		this.gverts.erase(ite);
		var o = rem;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		if(this.edgeCnt == 2) {
			var rem1 = this.edges.pop_unsafe();
			var o = rem1;
			o.polygon = null;
			o.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o;
			rem1 = this.edges.pop_unsafe();
			var o = rem1;
			o.polygon = null;
			o.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o;
			this.edgeCnt = 0;
		} else if(this.edgeCnt != 0) {
			var rem1 = ite2 == null?this.edges.head.elt:ite2.next.elt;
			this.edges.erase(ite2);
			var o = rem1;
			o.polygon = null;
			o.next = zpp_nape.shape.ZPP_Edge.zpp_pool;
			zpp_nape.shape.ZPP_Edge.zpp_pool = o;
			this.edgeCnt--;
		}
	}
	,validate_lverts: function() {
		if(this.zip_lverts) {
			this.zip_lverts = false;
			if(this.lverts.length > 2) {
				this.validate_area_inertia();
				if(this.area < 0) {
					this.reverse_vertices();
					this.area = -this.area;
				}
			}
		}
	}
	,valid: function() {
		if(this.zip_valid) {
			this.zip_valid = false;
			if(this.zip_sanitation) {
				this.zip_sanitation = false;
				this.splice_collinear_real();
			}
			if(this.lverts.length < 3) return this.validation = (function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
				return $r;
			}(this)); else {
				this.validate_lverts();
				this.validate_area_inertia();
				if(this.area < nape.Config.epsilon) return this.validation = (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_DEGENERATE;
					return $r;
				}(this)); else {
					var neg = false;
					var pos = false;
					var cx_cont = true;
					var cx_ite = this.lverts.next;
					var u = cx_ite;
					cx_ite = cx_ite.next;
					var v = cx_ite;
					cx_ite = cx_ite.next;
					while(cx_ite != null) {
						var w = cx_ite;
						var ax = 0.0;
						var ay = 0.0;
						ax = w.x - v.x;
						ay = w.y - v.y;
						var bx = 0.0;
						var by = 0.0;
						bx = v.x - u.x;
						by = v.y - u.y;
						var dot = by * ax - bx * ay;
						if(dot > nape.Config.epsilon) pos = true; else if(dot < -nape.Config.epsilon) neg = true;
						if(pos && neg) {
							cx_cont = false;
							break;
						}
						u = v;
						v = w;
						cx_ite = cx_ite.next;
					}
					if(cx_cont) {
						cx_ite = this.lverts.next;
						var w = cx_ite;
						do {
							var ax = 0.0;
							var ay = 0.0;
							ax = w.x - v.x;
							ay = w.y - v.y;
							var bx = 0.0;
							var by = 0.0;
							bx = v.x - u.x;
							by = v.y - u.y;
							var dot = by * ax - bx * ay;
							if(dot > nape.Config.epsilon) pos = true; else if(dot < -nape.Config.epsilon) neg = true;
							if(pos && neg) {
								cx_cont = false;
								break;
							}
						} while(false);
						if(cx_cont) {
							u = v;
							v = w;
							cx_ite = cx_ite.next;
							var w1 = cx_ite;
							do {
								var ax = 0.0;
								var ay = 0.0;
								ax = w1.x - v.x;
								ay = w1.y - v.y;
								var bx = 0.0;
								var by = 0.0;
								bx = v.x - u.x;
								by = v.y - u.y;
								var dot = by * ax - bx * ay;
								if(dot > nape.Config.epsilon) pos = true; else if(dot < -nape.Config.epsilon) neg = true;
								if(pos && neg) break;
							} while(false);
						}
					}
					if(pos && neg) return this.validation = (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.ValidationResult_CONCAVE;
						return $r;
					}(this)); else {
						var cont = true;
						var cx_cont = true;
						var cx_ite = this.lverts.next;
						var u = cx_ite;
						cx_ite = cx_ite.next;
						while(cx_ite != null) {
							var v = cx_ite;
							if(!cont) {
								cx_cont = false;
								break;
							}
							var cx_cont1 = true;
							var cx_ite1 = this.lverts.next;
							var a = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var b = cx_ite1;
								if(u == a || u == b || v == a || v == b) {
									a = b;
									cx_ite1 = cx_ite1.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape.Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
											cont = false;
											cx_cont1 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite1 = cx_ite1.next;
							}
							if(cx_cont1) do {
								var b = this.lverts.next;
								if(u == a || u == b || v == a || v == b) break;
								var sx = 0.0;
								var sy = 0.0;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape.Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
							u = v;
							cx_ite = cx_ite.next;
						}
						if(cx_cont) do {
							var v = this.lverts.next;
							if(!cont) break;
							var cx_cont1 = true;
							var cx_ite1 = this.lverts.next;
							var a = cx_ite1;
							cx_ite1 = cx_ite1.next;
							while(cx_ite1 != null) {
								var b = cx_ite1;
								if(u == a || u == b || v == a || v == b) {
									a = b;
									cx_ite1 = cx_ite1.next;
									continue;
								}
								var sx = 0.0;
								var sy = 0.0;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape.Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
											cont = false;
											cx_cont1 = false;
											break;
										}
									}
								}
								a = b;
								cx_ite1 = cx_ite1.next;
							}
							if(cx_cont1) do {
								var b = this.lverts.next;
								if(u == a || u == b || v == a || v == b) break;
								var sx = 0.0;
								var sy = 0.0;
								sx = u.x - a.x;
								sy = u.y - a.y;
								var vx = 0.0;
								var vy = 0.0;
								vx = v.x - u.x;
								vy = v.y - u.y;
								var qx = 0.0;
								var qy = 0.0;
								qx = b.x - a.x;
								qy = b.y - a.y;
								var den = vy * qx - vx * qy;
								if(den * den > nape.Config.epsilon) {
									den = 1 / den;
									var t = (qy * sx - qx * sy) * den;
									if(t > nape.Config.epsilon && t < 1 - nape.Config.epsilon) {
										var s = (vy * sx - vx * sy) * den;
										if(s > nape.Config.epsilon && s < 1 - nape.Config.epsilon) {
											cont = false;
											break;
										}
									}
								}
							} while(false);
						} while(false);
						if(!cont) return this.validation = (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = zpp_nape.util.ZPP_Flags.ValidationResult_SELF_INTERSECTING;
							return $r;
						}(this)); else return this.validation = (function($this) {
							var $r;
							if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
								zpp_nape.util.ZPP_Flags.internal = true;
								zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
								zpp_nape.util.ZPP_Flags.internal = false;
							}
							$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
							return $r;
						}(this));
					}
				}
			}
		} else return this.validation;
	}
	,invalidate_gaxi: function() {
		this.zip_gaxi = true;
	}
	,invalidate_gverts: function() {
		this.zip_aabb = true;
		if(this.body != null) this.body.zip_aabb = true;
		this.zip_gverts = true;
	}
	,invalidate_laxi: function() {
		this.invalidate_gaxi();
		this.zip_sweepRadius = true;
		this.zip_laxi = true;
	}
	,invalidate_lverts: function() {
		this.invalidate_laxi();
		this.invalidate_area_inertia();
		this.invalidate_angDrag();
		this.invalidate_localCOM();
		this.invalidate_gverts();
		this.zip_lverts = true;
		this.zip_valid = true;
		this.zip_sanitation = true;
		if(this.body != null) this.body.wake();
	}
	,getedges: function() {
		var me = this;
		this.wrap_edges = zpp_nape.util.ZPP_EdgeList.get(this.edges,true);
		this.wrap_edges.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_edges.zpp_inner._validate = $bind(this,this.edges_validate);
	}
	,getgverts: function() {
		var me = this;
		this.wrap_gverts = zpp_nape.util.ZPP_MixVec2List.get(this.gverts,true);
		this.wrap_gverts.zpp_inner.reverse_flag = this.reverse_flag;
		this.wrap_gverts.zpp_inner._validate = $bind(this,this.gverts_validate);
	}
	,getlverts: function() {
		var me = this;
		this.wrap_lverts = zpp_nape.util.ZPP_MixVec2List.get(this.lverts);
		this.wrap_lverts.zpp_inner.post_adder = $bind(this,this.lverts_post_adder);
		this.wrap_lverts.zpp_inner.subber = $bind(this,this.lverts_subber);
		this.wrap_lverts.zpp_inner._invalidate = $bind(this,this.lverts_invalidate);
		this.wrap_lverts.zpp_inner._validate = $bind(this,this.lverts_validate);
		this.wrap_lverts.zpp_inner._modifiable = $bind(this,this.lverts_modifiable);
		this.wrap_lverts.zpp_inner.reverse_flag = this.reverse_flag;
	}
	,edges_validate: function() {
		this.validate_lverts();
	}
	,gverts_validate: function() {
		this.validate_gverts();
	}
	,lverts_modifiable: function() {
		this.immutable_midstep("Polygon::localVerts");
		if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modifiy shapes of static object once added to Space";
	}
	,lverts_validate: function() {
		this.validate_lverts();
	}
	,lverts_invalidate: function(_) {
		this.invalidate_lverts();
	}
	,lverts_subber: function(x) {
		this.cleanup_lvert(x.zpp_inner);
	}
	,lverts_post_adder: function(x) {
		x.zpp_inner._invalidate = $bind(this,this.lverts_pa_invalidate);
		x.zpp_inner._isimmutable = $bind(this,this.lverts_pa_immutable);
		var ite = null;
		var ite2 = null;
		var cx_ite = this.lverts.next;
		while(cx_ite != null) {
			var i = cx_ite;
			if(i == x.zpp_inner) break; else {
				ite = ite == null?this.gverts.next:ite.next;
				ite2 = ite2 == null?this.edges.head:ite2.next;
			}
			cx_ite = cx_ite.next;
		}
		var vec = zpp_nape.geom.ZPP_Vec2.get(0,0,true);
		this.gverts.insert(ite,vec);
		if(this.lverts.next.next != null) {
			if(this.lverts.next.next.next == null) {
				var ed;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed = new zpp_nape.shape.ZPP_Edge(); else {
					ed = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				null;
				ed.polygon = this;
				this.edges.add(ed);
				var ed1;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed1 = new zpp_nape.shape.ZPP_Edge(); else {
					ed1 = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed1.next;
					ed1.next = null;
				}
				null;
				ed1.polygon = this;
				this.edges.add(ed1);
				this.edgeCnt += 2;
			} else {
				var ed;
				if(zpp_nape.shape.ZPP_Edge.zpp_pool == null) ed = new zpp_nape.shape.ZPP_Edge(); else {
					ed = zpp_nape.shape.ZPP_Edge.zpp_pool;
					zpp_nape.shape.ZPP_Edge.zpp_pool = ed.next;
					ed.next = null;
				}
				null;
				ed.polygon = this;
				this.edges.insert(ite2,ed);
				this.edgeCnt++;
			}
		}
		vec._validate = $bind(this,this.gverts_pa_validate);
	}
	,gverts_pa_validate: function() {
		if(this.body == null) throw "Error: World vertex only makes sense when Polygon is contained in a rigid body";
		this.validate_gverts();
	}
	,lverts_pa_immutable: function() {
		if(this.body != null && this.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && this.body.space != null) throw "Error: Cannot modify local vertex of Polygon added to a static body whilst within a Space";
	}
	,lverts_pa_invalidate: function(x) {
		this.invalidate_lverts();
	}
	,__clear: function() {
	}
	,__class__: zpp_nape.shape.ZPP_Polygon
});
zpp_nape.space = {}
zpp_nape.space.ZPP_Broadphase = function() {
	this.circShape = null;
	this.matrix = null;
	this.aabbShape = null;
	this.dynab = null;
	this.sweep = null;
	this.is_sweep = false;
	this.space = null;
};
zpp_nape.space.ZPP_Broadphase.__name__ = ["zpp_nape","space","ZPP_Broadphase"];
zpp_nape.space.ZPP_Broadphase.prototype = {
	rayMultiCast: function(ray,inner,filter,output) {
		return null;
	}
	,rayCast: function(ray,inner,filter) {
		return null;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		return null;
	}
	,validateShape: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.validate_gaxi();
		if(s.zip_aabb) {
			if(s.body != null) {
				s.zip_aabb = false;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.__validate_aabb(); else s.polygon.__validate_aabb();
			}
		}
		if(s.zip_worldCOM) {
			if(s.body != null) {
				s.zip_worldCOM = false;
				if(s.zip_localCOM) {
					s.zip_localCOM = false;
					if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) s.polygon.__validate_localCOM();
					if(s.wrap_localCOM != null) {
						s.wrap_localCOM.zpp_inner.x = s.localCOMx;
						s.wrap_localCOM.zpp_inner.y = s.localCOMy;
					}
				}
				s.body.validate_axis();
				s.worldCOMx = s.body.posx + (s.body.axisy * s.localCOMx - s.body.axisx * s.localCOMy);
				s.worldCOMy = s.body.posy + (s.localCOMx * s.body.axisx + s.localCOMy * s.body.axisy);
			}
		}
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		return null;
	}
	,updateCircShape: function(x,y,r) {
		if(this.circShape == null) {
			var body = new nape.phys.Body((function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.circShape = new nape.shape.Circle(r,nape.geom.Vec2.get(x,y,null)));
		} else {
			var ci = this.circShape.zpp_inner.circle;
			var ss = r / ci.radius;
			if(this.matrix == null) this.matrix = new nape.geom.Mat23();
			this.matrix.set_a(this.matrix.set_d(ss));
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_tx(x - ss * ci.localCOMx);
			this.matrix.set_ty(y - ss * ci.localCOMy);
			this.circShape.transform(this.matrix);
		}
		this.circShape.zpp_inner.validate_aabb();
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		return null;
	}
	,updateAABBShape: function(aabb) {
		if(this.aabbShape == null) {
			var body = new nape.phys.Body((function($this) {
				var $r;
				if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
					zpp_nape.util.ZPP_Flags.internal = true;
					zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
					zpp_nape.util.ZPP_Flags.internal = false;
				}
				$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
				return $r;
			}(this)));
			body.zpp_inner.wrap_shapes.add(this.aabbShape = new nape.shape.Polygon(nape.shape.Polygon.rect(aabb.minx,aabb.miny,aabb.maxx - aabb.minx,aabb.maxy - aabb.miny)));
		} else {
			var ab = this.aabbShape.zpp_inner.aabb;
			var sx = (aabb.maxx - aabb.minx) / (ab.maxx - ab.minx);
			var sy = (aabb.maxy - aabb.miny) / (ab.maxy - ab.miny);
			if(this.matrix == null) this.matrix = new nape.geom.Mat23();
			this.matrix.set_a(sx);
			this.matrix.set_b(this.matrix.set_c(0));
			this.matrix.set_d(sy);
			this.matrix.set_tx(aabb.minx - sx * ab.minx);
			this.matrix.set_ty(aabb.miny - sy * ab.miny);
			this.aabbShape.transform(this.matrix);
		}
		this.aabbShape.zpp_inner.validate_aabb();
		this.aabbShape.zpp_inner.polygon.validate_gaxi();
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return null;
	}
	,clear: function() {
	}
	,broadphase: function(space,discrete) {
	}
	,sync: function(shape) {
		if(this.is_sweep) {
			if(!this.sweep.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
		} else this.dynab.__sync(shape);
	}
	,remove: function(shape) {
		if(this.is_sweep) this.sweep.__remove(shape); else this.dynab.__remove(shape);
	}
	,insert: function(shape) {
		if(this.is_sweep) this.sweep.__insert(shape); else this.dynab.__insert(shape);
	}
	,__class__: zpp_nape.space.ZPP_Broadphase
}
zpp_nape.space.ZPP_AABBNode = function() {
	this.first_sync = false;
	this.synced = false;
	this.snext = null;
	this.moved = false;
	this.mnext = null;
	this.next = null;
	this.rayt = 0.0;
	this.height = 0;
	this.child2 = null;
	this.child1 = null;
	this.parent = null;
	this.dyn = false;
	this.shape = null;
	this.aabb = null;
	this.height = -1;
};
zpp_nape.space.ZPP_AABBNode.__name__ = ["zpp_nape","space","ZPP_AABBNode"];
zpp_nape.space.ZPP_AABBNode.prototype = {
	isLeaf: function() {
		return this.child1 == null;
	}
	,free: function() {
		this.height = -1;
		var o = this.aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		this.child1 = this.child2 = this.parent = null;
		this.next = null;
		this.snext = null;
		this.mnext = null;
	}
	,alloc: function() {
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) this.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			this.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = this.aabb.next;
			this.aabb.next = null;
		}
		null;
		this.moved = false;
		this.synced = false;
		this.first_sync = false;
	}
	,__class__: zpp_nape.space.ZPP_AABBNode
}
zpp_nape.space.ZPP_AABBPair = function() {
	this.next = null;
	this.arb = null;
	this.di = 0;
	this.id = 0;
	this.sleeping = false;
	this.first = false;
	this.n2 = null;
	this.n1 = null;
};
zpp_nape.space.ZPP_AABBPair.__name__ = ["zpp_nape","space","ZPP_AABBPair"];
zpp_nape.space.ZPP_AABBPair.prototype = {
	free: function() {
		this.n1 = this.n2 = null;
		this.sleeping = false;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.space.ZPP_AABBPair
}
zpp_nape.space.ZPP_AABBTree = function() {
	this.root = null;
};
zpp_nape.space.ZPP_AABBTree.__name__ = ["zpp_nape","space","ZPP_AABBTree"];
zpp_nape.space.ZPP_AABBTree.prototype = {
	balance: function(a) {
		if(a.child1 == null || a.height < 2) return a; else {
			var b = a.child1;
			var c = a.child2;
			var balance = c.height - b.height;
			if(balance > 1) {
				var f = c.child1;
				var g = c.child2;
				c.child1 = a;
				c.parent = a.parent;
				a.parent = c;
				if(c.parent != null) {
					if(c.parent.child1 == a) c.parent.child1 = c; else c.parent.child2 = c;
				} else this.root = c;
				if(f.height > g.height) {
					c.child2 = f;
					a.child2 = g;
					g.parent = a;
					a.aabb.setCombine(b.aabb,g.aabb);
					c.aabb.setCombine(a.aabb,f.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = b.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x = a.height;
						var y = f.height;
						$r = x > y?x:y;
						return $r;
					}(this));
				} else {
					c.child2 = g;
					a.child2 = f;
					f.parent = a;
					a.aabb.setCombine(b.aabb,f.aabb);
					c.aabb.setCombine(a.aabb,g.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = b.height;
						var y = f.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					c.height = 1 + (function($this) {
						var $r;
						var x = a.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
				}
				return c;
			} else if(balance < -1) {
				var f = b.child1;
				var g = b.child2;
				b.child1 = a;
				b.parent = a.parent;
				a.parent = b;
				if(b.parent != null) {
					if(b.parent.child1 == a) b.parent.child1 = b; else b.parent.child2 = b;
				} else this.root = b;
				if(f.height > g.height) {
					b.child2 = f;
					a.child1 = g;
					g.parent = a;
					a.aabb.setCombine(c.aabb,g.aabb);
					b.aabb.setCombine(a.aabb,f.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = c.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x = a.height;
						var y = f.height;
						$r = x > y?x:y;
						return $r;
					}(this));
				} else {
					b.child2 = g;
					a.child1 = f;
					f.parent = a;
					a.aabb.setCombine(c.aabb,f.aabb);
					b.aabb.setCombine(a.aabb,g.aabb);
					a.height = 1 + (function($this) {
						var $r;
						var x = c.height;
						var y = f.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					b.height = 1 + (function($this) {
						var $r;
						var x = a.height;
						var y = g.height;
						$r = x > y?x:y;
						return $r;
					}(this));
				}
				return b;
			} else return a;
		}
	}
	,inlined_removeLeaf: function(leaf) {
		if(leaf == this.root) {
			this.root = null;
			return;
		} else {
			var parent = leaf.parent;
			var gparent = parent.parent;
			var sibling = parent.child1 == leaf?parent.child2:parent.child1;
			if(gparent != null) {
				if(gparent.child1 == parent) gparent.child1 = sibling; else gparent.child2 = sibling;
				sibling.parent = gparent;
				var o = parent;
				o.free();
				o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
				var node = gparent;
				while(node != null) {
					node = this.balance(node);
					var child1 = node.child1;
					var child2 = node.child2;
					node.aabb.setCombine(child1.aabb,child2.aabb);
					node.height = 1 + (function($this) {
						var $r;
						var x = child1.height;
						var y = child2.height;
						$r = x > y?x:y;
						return $r;
					}(this));
					node = node.parent;
				}
			} else {
				this.root = sibling;
				sibling.parent = null;
				var o = parent;
				o.free();
				o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
			}
		}
	}
	,removeLeaf: function(leaf) {
		this.inlined_removeLeaf(leaf);
	}
	,inlined_insertLeaf: function(leaf) {
		if(this.root == null) {
			this.root = leaf;
			this.root.parent = null;
		} else {
			var leafaabb = leaf.aabb;
			var node = this.root;
			while(!(node.child1 == null)) {
				var child1 = node.child1;
				var child2 = node.child2;
				var area = node.aabb.perimeter();
				zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(node.aabb,leafaabb);
				var carea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
				var cost = 2 * carea;
				var icost = 2 * (carea - area);
				var cost1 = (function($this) {
					var $r;
					zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child1.aabb);
					$r = child1.child1 == null?zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost:(function($this) {
						var $r;
						var oarea = child1.aabb.perimeter();
						var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
						$r = narea - oarea + icost;
						return $r;
					}($this));
					return $r;
				}(this));
				var cost2 = (function($this) {
					var $r;
					zpp_nape.space.ZPP_AABBTree.tmpaabb.setCombine(leafaabb,child2.aabb);
					$r = child2.child1 == null?zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter() + icost:(function($this) {
						var $r;
						var oarea = child2.aabb.perimeter();
						var narea = zpp_nape.space.ZPP_AABBTree.tmpaabb.perimeter();
						$r = narea - oarea + icost;
						return $r;
					}($this));
					return $r;
				}(this));
				if(cost < cost1 && cost < cost2) break; else node = cost1 < cost2?child1:child2;
			}
			var sibling = node;
			var oparent = sibling.parent;
			var nparent;
			if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) nparent = new zpp_nape.space.ZPP_AABBNode(); else {
				nparent = zpp_nape.space.ZPP_AABBNode.zpp_pool;
				zpp_nape.space.ZPP_AABBNode.zpp_pool = nparent.next;
				nparent.next = null;
			}
			if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) nparent.aabb = new zpp_nape.geom.ZPP_AABB(); else {
				nparent.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
				zpp_nape.geom.ZPP_AABB.zpp_pool = nparent.aabb.next;
				nparent.aabb.next = null;
			}
			null;
			nparent.moved = false;
			nparent.synced = false;
			nparent.first_sync = false;
			nparent.parent = oparent;
			nparent.aabb.setCombine(leafaabb,sibling.aabb);
			nparent.height = sibling.height + 1;
			if(oparent != null) {
				if(oparent.child1 == sibling) oparent.child1 = nparent; else oparent.child2 = nparent;
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
			} else {
				nparent.child1 = sibling;
				nparent.child2 = leaf;
				sibling.parent = nparent;
				leaf.parent = nparent;
				this.root = nparent;
			}
			node = leaf.parent;
			while(node != null) {
				node = this.balance(node);
				var child1 = node.child1;
				var child2 = node.child2;
				node.height = 1 + (function($this) {
					var $r;
					var x = child1.height;
					var y = child2.height;
					$r = x > y?x:y;
					return $r;
				}(this));
				node.aabb.setCombine(child1.aabb,child2.aabb);
				node = node.parent;
			}
		}
	}
	,insertLeaf: function(leaf) {
		this.inlined_insertLeaf(leaf);
	}
	,clear: function() {
		if(this.root == null) return;
		var stack = null;
		this.root.next = stack;
		stack = this.root;
		while(stack != null) {
			var node = (function($this) {
				var $r;
				var ret = stack;
				stack = ret.next;
				ret.next = null;
				$r = ret;
				return $r;
			}(this));
			if(node.child1 == null) {
				node.shape.node = null;
				node.shape.removedFromSpace();
				node.shape = null;
			} else {
				if(node.child1 != null) {
					node.child1.next = stack;
					stack = node.child1;
				}
				if(node.child2 != null) {
					node.child2.next = stack;
					stack = node.child2;
				}
			}
			var o = node;
			o.free();
			o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
		}
		this.root = null;
	}
	,__class__: zpp_nape.space.ZPP_AABBTree
}
zpp_nape.space.ZPP_DynAABBPhase = function(space) {
	this.openlist = null;
	this.failed = null;
	this.treeStack2 = null;
	this.treeStack = null;
	this.moves = null;
	this.syncs = null;
	this.pairs = null;
	this.dtree = null;
	this.stree = null;
	this.space = space;
	this.is_sweep = false;
	this.dynab = this;
	this.stree = new zpp_nape.space.ZPP_AABBTree();
	this.dtree = new zpp_nape.space.ZPP_AABBTree();
};
zpp_nape.space.ZPP_DynAABBPhase.__name__ = ["zpp_nape","space","ZPP_DynAABBPhase"];
zpp_nape.space.ZPP_DynAABBPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_DynAABBPhase.prototype = $extend(zpp_nape.space.ZPP_Broadphase.prototype,{
	rayMultiCast: function(ray,inner,filter,output) {
		if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var inf = ray.maxdist >= Math.POSITIVE_INFINITY;
		var ret = output == null?new nape.geom.RayResultList():output;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				if(inf) this.openlist.add(this.dtree.root); else {
					var t = ray.aabbsect(this.dtree.root.aabb);
					if(t >= 0 && t < ray.maxdist) this.openlist.add(this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				if(inf) this.openlist.add(this.stree.root); else {
					var t = ray.aabbsect(this.stree.root.aabb);
					if(t >= 0 && t < ray.maxdist) this.openlist.add(this.stree.root);
				}
			}
		}
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(shape.circle,inner,ret); else if(ray.aabbtest(shape.aabb)) ray.polysect2(shape.polygon,inner,ret);
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						if(inf) this.openlist.add(cnode.child1); else {
							var t = ray.aabbsect(cnode.child1.aabb);
							if(t >= 0 && t < ray.maxdist) this.openlist.add(cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						if(inf) this.openlist.add(cnode.child2); else {
							var t = ray.aabbsect(cnode.child2.aabb);
							if(t >= 0 && t < ray.maxdist) this.openlist.add(cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		if(this.openlist == null) this.openlist = new zpp_nape.util.ZNPList_ZPP_AABBNode();
		this.sync_broadphase();
		ray.validate_dir();
		var mint = ray.maxdist;
		if(this.dtree.root != null) {
			if(ray.aabbtest(this.dtree.root.aabb)) {
				var t = ray.aabbsect(this.dtree.root.aabb);
				if(t >= 0 && t < mint) {
					this.dtree.root.rayt = t;
					var pre = null;
					var cx_ite = this.openlist.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(this.dtree.root.rayt < j.rayt) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					this.openlist.inlined_insert(pre,this.dtree.root);
				}
			}
		}
		if(this.stree.root != null) {
			if(ray.aabbtest(this.stree.root.aabb)) {
				var t = ray.aabbsect(this.stree.root.aabb);
				if(t >= 0 && t < mint) {
					this.stree.root.rayt = t;
					var pre = null;
					var cx_ite = this.openlist.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if(this.stree.root.rayt < j.rayt) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					this.openlist.inlined_insert(pre,this.stree.root);
				}
			}
		}
		var minres = null;
		while(!(this.openlist.head == null)) {
			var cnode = this.openlist.pop_unsafe();
			if(cnode.rayt >= mint) break;
			if(cnode.child1 == null) {
				var shape = cnode.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					var result = shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?ray.circlesect(shape.circle,inner,mint):ray.aabbtest(shape.aabb)?ray.polysect(shape.polygon,inner,mint):null;
					if(result != null) {
						mint = (function($this) {
							var $r;
							if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							$r = result.zpp_inner.toiDistance;
							return $r;
						}(this));
						if(minres != null) {
							if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							minres.zpp_inner.free();
						}
						minres = result;
					}
				}
			} else {
				if(cnode.child1 != null) {
					if(ray.aabbtest(cnode.child1.aabb)) {
						var t = ray.aabbsect(cnode.child1.aabb);
						if(t >= 0 && t < mint) {
							cnode.child1.rayt = t;
							var pre = null;
							var cx_ite = this.openlist.head;
							while(cx_ite != null) {
								var j = cx_ite.elt;
								if(cnode.child1.rayt < j.rayt) break;
								pre = cx_ite;
								cx_ite = cx_ite.next;
							}
							this.openlist.inlined_insert(pre,cnode.child1);
						}
					}
				}
				if(cnode.child2 != null) {
					if(ray.aabbtest(cnode.child2.aabb)) {
						var t = ray.aabbsect(cnode.child2.aabb);
						if(t >= 0 && t < mint) {
							cnode.child2.rayt = t;
							var pre = null;
							var cx_ite = this.openlist.head;
							while(cx_ite != null) {
								var j = cx_ite.elt;
								if(cnode.child2.rayt < j.rayt) break;
								pre = cx_ite;
								cx_ite = cx_ite.next;
							}
							this.openlist.inlined_insert(pre,cnode.child2);
						}
					}
				}
			}
		}
		this.openlist.clear();
		return minres;
	}
	,bodiesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shp,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shp);
		var ab = shp.aabb;
		var ret = output == null?new nape.shape.ShapeList():output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(shp,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,shp)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(!this.failed.has(body)) {
									var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret = output == null?new nape.shape.ShapeList():output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(containment) {
								if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.circShape.zpp_inner)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							var body = node.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) {
									var body = node1.shape.body.outer;
									if(!ret.has(body)) ret.push(body);
								}
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body)) {
										var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body) && col) ret.push(body); else if(!col) {
											ret.remove(body);
											this.failed.push(body);
										}
									}
								} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body);
							} else if(containment) {
								if(!this.failed.has(body)) {
									var col = ab.contains(node.shape.aabb);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && ab.contains(node.shape.aabb)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							var body = node.shape.body.outer;
							if(!ret.has(body)) ret.push(body);
						}
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) {
									var body = node1.shape.body.outer;
									if(!ret.has(body)) ret.push(body);
								}
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(!this.failed.has(body)) {
										var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape);
										if(!ret.has(body) && col) ret.push(body); else if(!col) {
											ret.remove(body);
											this.failed.push(body);
										}
									}
								} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(body);
							} else if(containment) {
								if(!this.failed.has(body)) {
									var col = ab.contains(node.shape.aabb);
									if(!ret.has(body) && col) ret.push(body); else if(!col) {
										ret.remove(body);
										this.failed.push(body);
									}
								}
							} else if(!ret.has(body) && ab.contains(node.shape.aabb)) ret.push(body);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		this.failed.clear();
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret = output == null?new nape.shape.ShapeList():output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
								} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(ab.contains(node.aabb)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) ret.push(node.shape.outer);
					} else {
						if(this.treeStack2 == null) this.treeStack2 = new zpp_nape.util.ZNPList_ZPP_AABBNode();
						this.treeStack2.add(node);
						while(!(this.treeStack2.head == null)) {
							var node1 = this.treeStack2.pop_unsafe();
							if(node1.child1 == null) {
								if(filter == null || node1.shape.filter.shouldCollide(filter)) ret.push(node1.shape.outer);
							} else {
								if(node1.child1 != null) this.treeStack2.add(node1.child1);
								if(node1.child2 != null) this.treeStack2.add(node1.child2);
							}
						}
					}
				} else if(node.aabb.intersect(ab)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(strict) {
								if(containment) {
									if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,node.shape)) ret.push(node.shape.outer);
								} else if(ab.contains(node.shape.aabb)) ret.push(node.shape.outer); else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(node.shape,this.aabbShape.zpp_inner)) ret.push(node.shape.outer);
							} else if(!containment || ab.contains(node.shape.aabb)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							if(filter == null || node.shape.filter.shouldCollide(filter)) {
								if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
									if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
								} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
							}
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						var body = node.shape.body.outer;
						if(!ret.has(body)) {
							if(filter == null || node.shape.filter.shouldCollide(filter)) {
								if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
									if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(body);
								} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(body);
							}
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret = output == null?new nape.shape.ShapeList():output;
		if(this.stree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.stree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		if(this.dtree.root != null) {
			if(this.treeStack == null) this.treeStack = new zpp_nape.util.ZNPList_ZPP_AABBNode();
			this.treeStack.add(this.dtree.root);
			while(!(this.treeStack.head == null)) {
				var node = this.treeStack.pop_unsafe();
				if(node.aabb.containsPoint(v)) {
					if(node.child1 == null) {
						if(filter == null || node.shape.filter.shouldCollide(filter)) {
							if(node.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
								if(zpp_nape.geom.ZPP_Collide.circleContains(node.shape.circle,v)) ret.push(node.shape.outer);
							} else if(zpp_nape.geom.ZPP_Collide.polyContains(node.shape.polygon,v)) ret.push(node.shape.outer);
						}
					} else {
						if(node.child1 != null) this.treeStack.add(node.child1);
						if(node.child2 != null) this.treeStack.add(node.child2);
					}
				}
			}
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,clear: function() {
		while(this.syncs != null) {
			var next = this.syncs.snext;
			this.syncs.snext = null;
			if(this.syncs.first_sync) {
				this.syncs.shape.node = null;
				this.syncs.shape.removedFromSpace();
				this.syncs.shape = null;
			}
			this.syncs = next;
		}
		while(this.moves != null) {
			var next = this.moves.mnext;
			this.moves.mnext = null;
			if(this.moves.first_sync) {
				this.moves.shape.node = null;
				this.moves.shape.removedFromSpace();
				this.moves.shape = null;
			}
			this.moves = next;
		}
		while(this.pairs != null) {
			var nxt = this.pairs.next;
			if(this.pairs.arb != null) this.pairs.arb.pair = null;
			this.pairs.arb = null;
			this.pairs.n1.shape.pairs.inlined_try_remove(this.pairs);
			this.pairs.n2.shape.pairs.inlined_try_remove(this.pairs);
			var o = this.pairs;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
			this.pairs = nxt;
		}
		this.dtree.clear();
		this.stree.clear();
	}
	,broadphase: function(space,discrete) {
		var node = this.syncs;
		while(node != null) {
			var shape = node.shape;
			if(!node.first_sync) {
				var tree = node.dyn?this.dtree:this.stree;
				tree.inlined_removeLeaf(node);
			} else node.first_sync = false;
			var aabb = node.aabb;
			if(!space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			aabb.setExpand(shape.aabb,3.0);
			var tree = (node.dyn = shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping)?this.dtree:this.stree;
			tree.inlined_insertLeaf(node);
			node.synced = false;
			node = node.snext;
		}
		while(this.syncs != null) {
			var leaf = (function($this) {
				var $r;
				var ret = $this.syncs;
				$this.syncs = ret.snext;
				ret.snext = null;
				$r = ret;
				return $r;
			}(this));
			if(leaf.moved) continue;
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) continue;
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var node1 = (function($this) {
					var $r;
					var ret = stack;
					stack = ret.next;
					ret.next = null;
					$r = ret;
					return $r;
				}(this));
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape = node1.shape;
					if(shape.body != lshape.body && !(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape.id) {
								id = lshape.id;
								di = shape.id;
							} else {
								id = shape.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape.pairs.length?lshape:shape;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
								p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node1 = (function($this) {
					var $r;
					var ret = stack;
					stack = ret.next;
					ret.next = null;
					$r = ret;
					return $r;
				}(this));
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape = node1.shape;
					if(shape.body != lshape.body && !(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape.id) {
								id = lshape.id;
								di = shape.id;
							} else {
								id = shape.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape.pairs.length?lshape:shape;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
								p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
		}
		while(this.moves != null) {
			var leaf = (function($this) {
				var $r;
				var ret = $this.moves;
				$this.moves = ret.mnext;
				ret.mnext = null;
				$r = ret;
				return $r;
			}(this));
			leaf.moved = false;
			var lshape = leaf.shape;
			var lbody = lshape.body;
			if(lbody.component.sleeping) continue;
			var ab = leaf.aabb;
			var stack = null;
			if(this.dtree.root != null) {
				this.dtree.root.next = stack;
				stack = this.dtree.root;
			}
			while(stack != null) {
				var node1 = (function($this) {
					var $r;
					var ret = stack;
					stack = ret.next;
					ret.next = null;
					$r = ret;
					return $r;
				}(this));
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape = node1.shape;
					if(shape.body != lshape.body && !(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape.id) {
								id = lshape.id;
								di = shape.id;
							} else {
								id = shape.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape.pairs.length?lshape:shape;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
								p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
			if(this.stree.root != null) {
				this.stree.root.next = stack;
				stack = this.stree.root;
			}
			while(stack != null) {
				var node1 = (function($this) {
					var $r;
					var ret = stack;
					stack = ret.next;
					ret.next = null;
					$r = ret;
					return $r;
				}(this));
				if(node1 == leaf) continue;
				if(node1.child1 == null) {
					var shape = node1.shape;
					if(shape.body != lshape.body && !(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && lshape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
						if(ab.intersect(node1.aabb)) {
							var id;
							var di;
							if(lshape.id < shape.id) {
								id = lshape.id;
								di = shape.id;
							} else {
								id = shape.id;
								di = lshape.id;
							}
							var s = lshape.pairs.length < shape.pairs.length?lshape:shape;
							var p = null;
							var cx_ite = s.pairs.head;
							while(cx_ite != null) {
								var px = cx_ite.elt;
								if(px.id == id && px.di == di) {
									p = px;
									break;
								}
								cx_ite = cx_ite.next;
							}
							if(p != null) {
								if(p.sleeping) {
									p.sleeping = false;
									p.next = this.pairs;
									this.pairs = p;
									p.first = true;
								}
								continue;
							}
							if(zpp_nape.space.ZPP_AABBPair.zpp_pool == null) p = new zpp_nape.space.ZPP_AABBPair(); else {
								p = zpp_nape.space.ZPP_AABBPair.zpp_pool;
								zpp_nape.space.ZPP_AABBPair.zpp_pool = p.next;
								p.next = null;
							}
							null;
							p.n1 = leaf;
							p.n2 = node1;
							p.id = id;
							p.di = di;
							p.next = this.pairs;
							this.pairs = p;
							p.first = true;
							lshape.pairs.inlined_add(p);
							shape.pairs.inlined_add(p);
						}
					}
				} else if(ab.intersect(node1.aabb)) {
					if(node1.child1 != null) {
						node1.child1.next = stack;
						stack = node1.child1;
					}
					if(node1.child2 != null) {
						node1.child2.next = stack;
						stack = node1.child2;
					}
				}
			}
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			if(!cur.first && !cur.n1.aabb.intersect(cur.n2.aabb)) {
				if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
				cur.n1.shape.pairs.inlined_try_remove(cur);
				cur.n2.shape.pairs.inlined_try_remove(cur);
				var nxt = cur.next;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
				zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			var s1 = cur.n1.shape;
			var b1 = s1.body;
			var s2 = cur.n2.shape;
			var b2 = s2.body;
			if(!cur.first) {
				if((b1.component.sleeping || b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) && (b2.component.sleeping || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					cur.sleeping = true;
					if(pre == null) this.pairs = cur.next; else pre.next = cur.next;
					cur = cur.next;
					continue;
				}
			}
			cur.first = false;
			if(s1.aabb.intersect(s2.aabb)) {
				var oarb = cur.arb;
				if(discrete) cur.arb = space.narrowPhase(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false); else cur.arb = space.continuousEvent(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),cur.arb,false);
				if(cur.arb == null) {
					if(oarb != null) oarb.pair = null;
				} else cur.arb.pair = cur;
			}
			pre = cur;
			cur = cur.next;
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.syncs != null) {
			if(this.moves == null) {
				var node = this.syncs;
				while(node != null) {
					var shape = node.shape;
					if(!node.first_sync) {
						var tree = node.dyn?this.dtree:this.stree;
						tree.inlined_removeLeaf(node);
					} else node.first_sync = false;
					var aabb = node.aabb;
					if(!this.space.continuous) {
						if(shape.zip_aabb) {
							if(shape.body != null) {
								shape.zip_aabb = false;
								if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
							}
						}
					}
					aabb.setExpand(shape.aabb,3.0);
					var tree = (node.dyn = shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping)?this.dtree:this.stree;
					tree.inlined_insertLeaf(node);
					node.synced = false;
					node.moved = true;
					node.mnext = node.snext;
					node.snext = null;
					node = node.mnext;
				}
				var t = this.syncs;
				this.syncs = this.moves;
				this.moves = t;
			} else while(this.syncs != null) {
				var node = (function($this) {
					var $r;
					var ret = $this.syncs;
					$this.syncs = ret.snext;
					ret.snext = null;
					$r = ret;
					return $r;
				}(this));
				var shape = node.shape;
				if(!node.first_sync) {
					var tree = node.dyn?this.dtree:this.stree;
					tree.inlined_removeLeaf(node);
				} else node.first_sync = false;
				var aabb = node.aabb;
				if(!this.space.continuous) {
					if(shape.zip_aabb) {
						if(shape.body != null) {
							shape.zip_aabb = false;
							if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
						}
					}
				}
				aabb.setExpand(shape.aabb,3.0);
				var tree = (node.dyn = shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping)?this.dtree:this.stree;
				tree.inlined_insertLeaf(node);
				node.synced = false;
				if(!node.moved) {
					node.moved = true;
					node.mnext = this.moves;
					this.moves = node;
				}
			}
		}
	}
	,__sync: function(shape) {
		var node = shape.node;
		if(!node.synced) {
			if(!this.space.continuous) {
				if(shape.zip_aabb) {
					if(shape.body != null) {
						shape.zip_aabb = false;
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
					}
				}
			}
			var sync = node.dyn != (shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC?false:!shape.body.component.sleeping) || !node.aabb.contains(shape.aabb);
			if(sync) {
				node.synced = true;
				node.snext = this.syncs;
				this.syncs = node;
			}
		}
	}
	,__remove: function(shape) {
		var node = shape.node;
		if(!node.first_sync) {
			if(node.dyn) this.dtree.removeLeaf(node); else this.stree.removeLeaf(node);
		}
		shape.node = null;
		if(node.synced) {
			var pre = null;
			var cur = this.syncs;
			while(cur != null) {
				if(cur == node) break;
				pre = cur;
				cur = cur.snext;
			}
			if(pre == null) this.syncs = cur.snext; else pre.snext = cur.snext;
			cur.snext = null;
			node.synced = false;
		}
		if(node.moved) {
			var pre = null;
			var cur = this.moves;
			while(cur != null) {
				if(cur == node) break;
				pre = cur;
				cur = cur.mnext;
			}
			if(pre == null) this.moves = cur.mnext; else pre.mnext = cur.mnext;
			cur.mnext = null;
			node.moved = false;
		}
		var pre = null;
		var cur = this.pairs;
		while(cur != null) {
			var nxt = cur.next;
			if(cur.n1 == node || cur.n2 == node) {
				if(pre == null) this.pairs = nxt; else pre.next = nxt;
				if(cur.arb != null) cur.arb.pair = null;
				cur.arb = null;
				cur.n1.shape.pairs.remove(cur);
				cur.n2.shape.pairs.remove(cur);
				var o = cur;
				o.n1 = o.n2 = null;
				o.sleeping = false;
				o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
				zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
				cur = nxt;
				continue;
			}
			pre = cur;
			cur = nxt;
		}
		while(!(shape.pairs.head == null)) {
			var cur1 = shape.pairs.pop_unsafe();
			if(cur1.n1 == node) cur1.n2.shape.pairs.remove(cur1); else cur1.n1.shape.pairs.remove(cur1);
			if(cur1.arb != null) cur1.arb.pair = null;
			cur1.arb = null;
			var o = cur1;
			o.n1 = o.n2 = null;
			o.sleeping = false;
			o.next = zpp_nape.space.ZPP_AABBPair.zpp_pool;
			zpp_nape.space.ZPP_AABBPair.zpp_pool = o;
		}
		var o = node;
		o.free();
		o.next = zpp_nape.space.ZPP_AABBNode.zpp_pool;
		zpp_nape.space.ZPP_AABBNode.zpp_pool = o;
	}
	,__insert: function(shape) {
		var node;
		if(zpp_nape.space.ZPP_AABBNode.zpp_pool == null) node = new zpp_nape.space.ZPP_AABBNode(); else {
			node = zpp_nape.space.ZPP_AABBNode.zpp_pool;
			zpp_nape.space.ZPP_AABBNode.zpp_pool = node.next;
			node.next = null;
		}
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) node.aabb = new zpp_nape.geom.ZPP_AABB(); else {
			node.aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = node.aabb.next;
			node.aabb.next = null;
		}
		null;
		node.moved = false;
		node.synced = false;
		node.first_sync = false;
		node.shape = shape;
		shape.node = node;
		node.synced = true;
		node.first_sync = true;
		node.snext = this.syncs;
		this.syncs = node;
	}
	,dyn: function(shape) {
		if(shape.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) return false; else return !shape.body.component.sleeping;
	}
	,__class__: zpp_nape.space.ZPP_DynAABBPhase
});
zpp_nape.space.ZPP_Island = function() {
	this.waket = 0;
	this.sleep = false;
	this.comps = null;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.comps = new zpp_nape.util.ZNPList_ZPP_Component();
};
zpp_nape.space.ZPP_Island.__name__ = ["zpp_nape","space","ZPP_Island"];
zpp_nape.space.ZPP_Island.prototype = {
	alloc: function() {
		this.waket = 0;
	}
	,free: function() {
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it:null;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.next == null;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
	}
	,clear: function() {
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.next;
	}
	,elem: function() {
		return this;
	}
	,__class__: zpp_nape.space.ZPP_Island
}
zpp_nape.space.ZPP_Component = function() {
	this.woken = false;
	this.waket = 0;
	this.sleeping = false;
	this.island = null;
	this.constraint = null;
	this.body = null;
	this.isBody = false;
	this.rank = 0;
	this.parent = null;
	this.next = null;
	this.sleeping = false;
	this.island = null;
	this.parent = this;
	this.rank = 0;
	this.woken = false;
};
zpp_nape.space.ZPP_Component.__name__ = ["zpp_nape","space","ZPP_Component"];
zpp_nape.space.ZPP_Component.prototype = {
	reset: function() {
		this.sleeping = false;
		this.island = null;
		this.parent = this;
		this.rank = 0;
	}
	,alloc: function() {
	}
	,free: function() {
		this.body = null;
		this.constraint = null;
	}
	,__class__: zpp_nape.space.ZPP_Component
}
zpp_nape.space.ZPP_CallbackSet = function() {
	this.lazydel = false;
	this.freed = false;
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this._inuse = false;
	this.next = null;
	this.int2 = null;
	this.int1 = null;
	this.di = 0;
	this.id = 0;
	this.arbiters = new zpp_nape.util.ZNPList_ZPP_Arbiter();
};
zpp_nape.space.ZPP_CallbackSet.__name__ = ["zpp_nape","space","ZPP_CallbackSet"];
zpp_nape.space.ZPP_CallbackSet.get = function(i1,i2) {
	var ret;
	if(zpp_nape.space.ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.space.ZPP_CallbackSet(); else {
		ret = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
		zpp_nape.space.ZPP_CallbackSet.zpp_pool = ret.next;
		ret.next = null;
	}
	ret.freed = false;
	ret.lazydel = false;
	ret.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.COLLISIONstamp = 0;
	ret.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.SENSORstamp = 0;
	ret.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
	ret.FLUIDstamp = 0;
	if(i1.id < i2.id) {
		ret.int1 = i1;
		ret.int2 = i2;
	} else {
		ret.int1 = i2;
		ret.int2 = i1;
	}
	ret.id = ret.int1.id;
	ret.di = ret.int2.id;
	return ret;
}
zpp_nape.space.ZPP_CallbackSet.prototype = {
	sleeping: function() {
		var ret;
		ret = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if(x.sleeping) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				ret = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,really_empty: function() {
		return this.arbiters.head == null;
	}
	,empty_arb: function(type) {
		var retvar;
		retvar = true;
		var cx_ite = this.arbiters.head;
		while(cx_ite != null) {
			var x = cx_ite.elt;
			if((x.type & type) == 0) {
				cx_ite = cx_ite.next;
				continue;
			} else {
				retvar = false;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return retvar;
	}
	,remove_arb: function(x) {
		this.arbiters.inlined_try_remove(x);
	}
	,try_remove_arb: function(x) {
		return this.arbiters.inlined_try_remove(x);
	}
	,add_arb: function(x) {
		if(!this.arbiters.inlined_has(x)) {
			this.arbiters.inlined_add(x);
			return true;
		} else return false;
	}
	,alloc: function() {
		this.freed = false;
		this.lazydel = false;
		this.COLLISIONstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.COLLISIONstamp = 0;
		this.SENSORstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.SENSORstamp = 0;
		this.FLUIDstate = zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT;
		this.FLUIDstamp = 0;
	}
	,free: function() {
		this.int1 = this.int2 = null;
		this.id = this.di = -1;
		this.freed = true;
	}
	,at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it:null;
	}
	,iterator_at: function(ind) {
		var ret = this.next;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.next;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret;
	}
	,front: function() {
		return this.next;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.next;
		while(cx_ite != null) {
			var npite = cx_ite;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.next == null;
	}
	,reverse: function() {
		var cur = this.next;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.next = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
	}
	,clear: function() {
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.next;
			ret = old.next;
			this.next = ret;
			if(this.next == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		old._inuse = false;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.next;
		var ret = false;
		while(cur != null) {
			if(cur == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.next;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.next;
		this.next = ret.next;
		ret._inuse = false;
		if(this.next == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.next;
			this.next = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.next;
		while(cx_ite != null) {
			var i = cx_ite;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			o._inuse = true;
			$r = o;
			return $r;
		}(this));
		temp.next = this.next;
		this.next = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.next = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.next;
	}
	,elem: function() {
		return this;
	}
	,__class__: zpp_nape.space.ZPP_CallbackSet
}
zpp_nape.space.ZPP_CbSetManager = function(space) {
	this.space = null;
	this.cbsets = null;
	if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) this.cbsets = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
		this.cbsets = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = this.cbsets.next;
		this.cbsets.next = null;
	}
	null;
	this.cbsets.lt = zpp_nape.callbacks.ZPP_CbSet.setlt;
	this.space = space;
};
zpp_nape.space.ZPP_CbSetManager.__name__ = ["zpp_nape","space","ZPP_CbSetManager"];
zpp_nape.space.ZPP_CbSetManager.prototype = {
	valid_listener: function(i) {
		return i.space == this.space;
	}
	,pair: function(a,b) {
		var ret = null;
		var pairs = a.cbpairs.length < b.cbpairs.length?a.cbpairs:b.cbpairs;
		var cx_ite = pairs.head;
		while(cx_ite != null) {
			var p = cx_ite.elt;
			if(p.a == a && p.b == b || p.a == b && p.b == a) {
				ret = p;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret == null) {
			ret = zpp_nape.callbacks.ZPP_CbSetPair.get(a,b);
			a.cbpairs.add(ret);
			if(b != a) b.cbpairs.add(ret);
		}
		if(ret.zip_listeners) {
			ret.zip_listeners = false;
			ret.__validate();
		}
		return ret;
	}
	,validate: function() {
		if(!this.cbsets.empty()) {
			var set_ite = this.cbsets.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var cb = set_ite.data;
				cb.validate();
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
	}
	,clear: function() {
	}
	,remove: function(set) {
		this.cbsets.remove(set);
		while(!(set.cbpairs.head == null)) {
			var pair = set.cbpairs.pop_unsafe();
			if(pair.a != pair.b) {
				if(set == pair.a) pair.b.cbpairs.remove(pair); else pair.a.cbpairs.remove(pair);
			}
			var o = pair;
			o.a = o.b = null;
			o.listeners.clear();
			o.next = zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSetPair.zpp_pool = o;
		}
		set.manager = null;
	}
	,get: function(cbTypes) {
		if(cbTypes.head == null) return null;
		var fake;
		if(zpp_nape.callbacks.ZPP_CbSet.zpp_pool == null) fake = new zpp_nape.callbacks.ZPP_CbSet(); else {
			fake = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
			zpp_nape.callbacks.ZPP_CbSet.zpp_pool = fake.next;
			fake.next = null;
		}
		null;
		var faketypes = fake.cbTypes;
		fake.cbTypes = cbTypes;
		var res = this.cbsets.find_weak(fake);
		var ret = res != null?res.data:(function($this) {
			var $r;
			var set = zpp_nape.callbacks.ZPP_CbSet.get(cbTypes);
			$this.cbsets.insert(set);
			set.manager = $this;
			$r = set;
			return $r;
		}(this));
		fake.cbTypes = faketypes;
		var o = fake;
		o.free();
		o.next = zpp_nape.callbacks.ZPP_CbSet.zpp_pool;
		zpp_nape.callbacks.ZPP_CbSet.zpp_pool = o;
		return ret;
	}
	,__class__: zpp_nape.space.ZPP_CbSetManager
}
zpp_nape.space.ZPP_Space = function(gravity,broadphase) {
	this.prelisteners = null;
	this.precb = null;
	this.continuous = false;
	this.toiEvents = null;
	this.pre_dt = 0.0;
	this.convexShapeList = null;
	this.cbsets = null;
	this.callbackset_list = null;
	this.callbacks = null;
	this.wrap_listeners = null;
	this.listeners = null;
	this.islands = null;
	this.staticsleep = null;
	this.wrap_livecon = null;
	this.live_constraints = null;
	this.wrap_live = null;
	this.live = null;
	this.wrap_arbiters = null;
	this.s_arbiters = null;
	this.f_arbiters = null;
	this.c_arbiters_false = null;
	this.c_arbiters_true = null;
	this.sortcontacts = false;
	this.time = 0.0;
	this.midstep = false;
	this.stamp = 0;
	this.global_ang_drag = 0.0;
	this.global_lin_drag = 0.0;
	this.__static = null;
	this.bphase = null;
	this.kinematics = null;
	this.wrap_constraints = null;
	this.constraints = null;
	this.wrap_compounds = null;
	this.compounds = null;
	this.wrap_bodies = null;
	this.bodies = null;
	this.wrap_gravity = null;
	this.gravityy = 0.0;
	this.gravityx = 0.0;
	this.userData = null;
	this.outer = null;
	this.toiEvents = new zpp_nape.util.ZNPList_ZPP_ToiEvent();
	this.global_lin_drag = 0.015;
	this.global_ang_drag = 0.015;
	zpp_nape.callbacks.ZPP_Callback.internal = true;
	this.precb = new nape.callbacks.PreCallback();
	this.precb.zpp_inner = new zpp_nape.callbacks.ZPP_Callback();
	zpp_nape.callbacks.ZPP_Callback.internal = false;
	this.sortcontacts = true;
	this.pre_dt = 0.0;
	if(broadphase == null || broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_DYNAMIC_AABB_TREE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_DynAABBPhase(this); else if(broadphase == (function($this) {
		var $r;
		if(zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE == null) {
			zpp_nape.util.ZPP_Flags.internal = true;
			zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE = new nape.space.Broadphase();
			zpp_nape.util.ZPP_Flags.internal = false;
		}
		$r = zpp_nape.util.ZPP_Flags.Broadphase_SWEEP_AND_PRUNE;
		return $r;
	}(this))) this.bphase = new zpp_nape.space.ZPP_SweepPhase(this);
	this.time = 0.0;
	var me = this;
	if(gravity != null) {
		this.gravityx = gravity.x;
		this.gravityy = gravity.y;
	} else {
		this.gravityx = 0;
		this.gravityy = 0;
	}
	this.bodies = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_bodies = zpp_nape.util.ZPP_BodyList.get(this.bodies);
	this.wrap_bodies.zpp_inner.adder = $bind(this,this.bodies_adder);
	this.wrap_bodies.zpp_inner.subber = $bind(this,this.bodies_subber);
	this.wrap_bodies.zpp_inner._modifiable = $bind(this,this.bodies_modifiable);
	this.compounds = new zpp_nape.util.ZNPList_ZPP_Compound();
	this.wrap_compounds = zpp_nape.util.ZPP_CompoundList.get(this.compounds);
	this.wrap_compounds.zpp_inner.adder = $bind(this,this.compounds_adder);
	this.wrap_compounds.zpp_inner.subber = $bind(this,this.compounds_subber);
	this.wrap_compounds.zpp_inner._modifiable = $bind(this,this.compounds_modifiable);
	this.kinematics = new zpp_nape.util.ZNPList_ZPP_Body();
	this.c_arbiters_true = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.c_arbiters_false = new zpp_nape.util.ZNPList_ZPP_ColArbiter();
	this.f_arbiters = new zpp_nape.util.ZNPList_ZPP_FluidArbiter();
	this.s_arbiters = new zpp_nape.util.ZNPList_ZPP_SensorArbiter();
	this.islands = new zpp_nape.space.ZPP_Island();
	this.live = new zpp_nape.util.ZNPList_ZPP_Body();
	this.wrap_live = zpp_nape.util.ZPP_BodyList.get(this.live,true);
	this.staticsleep = new zpp_nape.util.ZNPList_ZPP_Body();
	this.constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_constraints = zpp_nape.util.ZPP_ConstraintList.get(this.constraints);
	this.wrap_constraints.zpp_inner.adder = $bind(this,this.constraints_adder);
	this.wrap_constraints.zpp_inner.subber = $bind(this,this.constraints_subber);
	this.wrap_constraints.zpp_inner._modifiable = $bind(this,this.constraints_modifiable);
	this.live_constraints = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this.wrap_livecon = zpp_nape.util.ZPP_ConstraintList.get(this.live_constraints,true);
	this.__static = zpp_nape.phys.ZPP_Body.__static();
	this.__static.zpp_inner.space = this;
	this.callbacks = new zpp_nape.callbacks.ZPP_Callback();
	this.midstep = false;
	this.listeners = new zpp_nape.util.ZNPList_ZPP_Listener();
	this.wrap_listeners = zpp_nape.util.ZPP_ListenerList.get(this.listeners);
	this.wrap_listeners.zpp_inner.adder = $bind(this,this.listeners_adder);
	this.wrap_listeners.zpp_inner.subber = $bind(this,this.listeners_subber);
	this.wrap_listeners.zpp_inner._modifiable = $bind(this,this.listeners_modifiable);
	this.callbackset_list = new zpp_nape.space.ZPP_CallbackSet();
	this.mrca1 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.mrca2 = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this.prelisteners = new zpp_nape.util.ZNPList_ZPP_InteractionListener();
	this.cbsets = new zpp_nape.space.ZPP_CbSetManager(this);
};
zpp_nape.space.ZPP_Space.__name__ = ["zpp_nape","space","ZPP_Space"];
zpp_nape.space.ZPP_Space.prototype = {
	inlined_MRCA_chains: function(s1,s2) {
		this.mrca1.inlined_clear();
		this.mrca2.inlined_clear();
		if(s1.cbSet != null) this.mrca1.inlined_add(s1);
		if(s1.body.cbSet != null) this.mrca1.inlined_add(s1.body);
		if(s2.cbSet != null) this.mrca2.inlined_add(s2);
		if(s2.body.cbSet != null) this.mrca2.inlined_add(s2.body);
		var c1 = s1.body.compound;
		var c2 = s2.body.compound;
		while(c1 != c2) {
			var d1 = c1 == null?0:c1.depth;
			var d2 = c2 == null?0:c2.depth;
			if(d1 < d2) {
				if(c2.cbSet != null) this.mrca2.inlined_add(c2);
				c2 = c2.compound;
			} else {
				if(c1.cbSet != null) this.mrca1.inlined_add(c1);
				c1 = c1.compound;
			}
		}
	}
	,MRCA_chains: function(s1,s2) {
		this.inlined_MRCA_chains(s1,s2);
	}
	,narrowPhase: function(s1,s2,stat,in_arb,continuous) {
		var _g = this;
		var ret = null;
		var b1 = s1.body;
		var b2 = s2.body;
		var itype = this.interactionType(s1,s2,b1,b2);
		if(itype != -1) {
			var sa, sb;
			if(s1.type > s2.type) {
				sa = s2;
				sb = s1;
			} else if(s1.type == s2.type) {
				if(s1.id < s2.id) {
					sa = s1;
					sb = s2;
				} else {
					sb = s1;
					sa = s2;
				}
			} else {
				sa = s1;
				sb = s2;
			}
			var reverse = sa == s2;
			if(itype == 0) {
				var xarb = in_arb == null?(function($this) {
					var $r;
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length?b1:b2;
					{
						var cx_ite = b.arbiters.head;
						while(cx_ite != null) {
							var arb = cx_ite.elt;
							if(arb.id == sa.id && arb.di == sb.id) {
								ret1 = arb;
								break;
							}
							cx_ite = cx_ite.next;
						}
					}
					$r = ret1;
					return $r;
				}(this)):in_arb;
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						arb = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
				} else if(xarb.fluidarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool == null) arb = new zpp_nape.dynamics.ZPP_FluidArbiter(); else {
						arb = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
					arb.intchange = true;
					first = true;
					swapped = true;
				} else arb = xarb.fluidarb;
				ret = (function($this) {
					var $r;
					var inttype = zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID;
					$r = first || arb.stamp != $this.stamp || continuous?(function($this) {
						var $r;
						arb.stamp = $this.stamp;
						$r = zpp_nape.geom.ZPP_Collide.flowCollide(sa,sb,arb)?(function($this) {
							var $r;
							if(first) {
								arb.b1 = s1.body;
								arb.ws1 = s1;
								arb.b2 = s2.body;
								arb.ws2 = s2;
								arb.id = sa.id;
								arb.di = sb.id;
								arb.b1.arbiters.inlined_add(arb);
								arb.b2.arbiters.inlined_add(arb);
								arb.active = true;
								arb.present = 0;
								arb.cleared = false;
								arb.sleeping = false;
								arb.fresh = false;
								arb.presentable = false;
								arb.nx = 0;
								arb.ny = 1;
								arb.dampx = 0;
								arb.dampy = 0;
								arb.adamp = 0.0;
								$this.f_arbiters.inlined_add(arb);
								arb.fresh = !swapped;
							} else arb.fresh = arb.up_stamp < $this.stamp - 1 || arb.endGenerated == $this.stamp && continuous;
							arb.up_stamp = arb.stamp;
							if(arb.fresh || (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								arb.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
								var anyimpure = false;
								var arbs1 = arb.ws1.id > arb.ws2.id?arb.ws2:arb.ws1;
								var arbs2 = arb.ws1.id > arb.ws2.id?arb.ws1:arb.ws2;
								$this.inlined_MRCA_chains(arbs1,arbs2);
								var cx_ite = $this.mrca1.head;
								while(cx_ite != null) {
									var i1 = cx_ite.elt;
									var cx_ite1 = $this.mrca2.head;
									while(cx_ite1 != null) {
										var i2 = cx_ite1.elt;
										var cb1 = i1.cbSet;
										var cb2 = i2.cbSet;
										if(cb1.manager.pair(cb1,cb2).listeners.head == null) {
											cx_ite1 = cx_ite1.next;
											continue;
										}
										var callbackset = null;
										var ncallbackset = null;
										$this.prelisteners.inlined_clear();
										var lite = [null];
										cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite) {
											return function(listener) {
												if((listener.itype & inttype) != 0) {
													lite[0] = _g.prelisteners.inlined_insert(lite[0],listener);
													anyimpure = anyimpure || !listener.pure;
												}
											};
										})(lite));
										if($this.prelisteners.head == null) {
											cx_ite1 = cx_ite1.next;
											continue;
										}
										callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
										if(callbackset == null) {
											ncallbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
											$this.add_callbackset(ncallbackset);
										}
										if(callbackset == null || (callbackset.FLUIDstamp != $this.stamp || continuous) && (callbackset.FLUIDstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
											if(ncallbackset != null) callbackset = ncallbackset;
											if(callbackset != null) {
												var cx_ite2 = $this.prelisteners.head;
												while(cx_ite2 != null) {
													var listener = cx_ite2.elt;
													if(listener.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
														callbackset.COLLISIONstamp = $this.stamp;
														callbackset.SENSORstamp = $this.stamp;
														callbackset.FLUIDstamp = $this.stamp;
													} else callbackset.FLUIDstamp = $this.stamp;
													cx_ite2 = cx_ite2.next;
												}
											}
											arb.mutable = true;
											if(arb.wrap_position != null) arb.wrap_position.zpp_inner._immutable = false;
											var pact = arb.active;
											arb.active = true;
											var emptycontacts = false;
											$this.precb.zpp_inner.pre_arbiter = arb;
											$this.precb.zpp_inner.set = callbackset;
											var cx_ite2 = $this.prelisteners.head;
											while(cx_ite2 != null) {
												var listener = cx_ite2.elt;
												$this.precb.zpp_inner.listener = listener;
												zpp_nape.phys.ZPP_Interactor.int_callback(callbackset,listener,$this.precb.zpp_inner);
												$this.precb.zpp_inner.pre_swapped = i1 != $this.precb.zpp_inner.int1;
												var ret1 = listener.handlerp($this.precb);
												if(ret1 != null) arb.immState = ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS:ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS:zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
												cx_ite2 = cx_ite2.next;
											}
											arb.mutable = false;
											if(arb.wrap_position != null) arb.wrap_position.zpp_inner._immutable = true;
											arb.active = pact;
											if(callbackset != null) {
												var cx_ite2 = $this.prelisteners.head;
												while(cx_ite2 != null) {
													var listener = cx_ite2.elt;
													if(listener.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
														callbackset.COLLISIONstate = arb.immState;
														callbackset.SENSORstate = arb.immState;
														callbackset.FLUIDstate = arb.immState;
													} else callbackset.FLUIDstate = arb.immState;
													cx_ite2 = cx_ite2.next;
												}
											}
										} else if(callbackset == null) {
											if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
										} else arb.immState = callbackset.FLUIDstate;
										cx_ite1 = cx_ite1.next;
									}
									cx_ite = cx_ite.next;
								}
								if(anyimpure && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
									if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
										var o = arb.b1;
										if(!o.world) {
											o.component.waket = $this.stamp + ($this.midstep?0:1);
											if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
											if(o.component.sleeping) $this.really_wake(o,false);
										}
									}
									if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
										var o = arb.b2;
										if(!o.world) {
											o.component.waket = $this.stamp + ($this.midstep?0:1);
											if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
											if(o.component.sleeping) $this.really_wake(o,false);
										}
									}
								}
							}
							if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
								if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = $this.stamp + ($this.midstep?0:1);
										if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) $this.really_wake(o,false);
									}
								}
								if(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
									var o = arb.b2;
									if(!o.world) {
										o.component.waket = $this.stamp + ($this.midstep?0:1);
										if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) $this.really_wake(o,false);
									}
								}
							}
							if(arb.sleeping) {
								arb.sleeping = false;
								$this.f_arbiters.inlined_add(arb);
							}
							$r = arb;
							return $r;
						}($this)):first?(function($this) {
							var $r;
							{
								var o = arb;
								o.next = zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool;
								zpp_nape.dynamics.ZPP_FluidArbiter.zpp_pool = o;
							}
							$r = null;
							return $r;
						}($this)):arb;
						return $r;
					}($this)):arb;
					return $r;
				}(this));
			} else if(itype == 1) {
				var carbs = stat?this.c_arbiters_true:this.c_arbiters_false;
				var xarb = in_arb == null?(function($this) {
					var $r;
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length?b1:b2;
					{
						var cx_ite = b.arbiters.head;
						while(cx_ite != null) {
							var arb = cx_ite.elt;
							if(arb.id == sa.id && arb.di == sb.id) {
								ret1 = arb;
								break;
							}
							cx_ite = cx_ite.next;
						}
					}
					$r = ret1;
					return $r;
				}(this)):in_arb;
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
						arb = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
					arb.stat = stat;
				} else if(xarb.colarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool == null) arb = new zpp_nape.dynamics.ZPP_ColArbiter(); else {
						arb = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
					arb.intchange = true;
					arb.stat = stat;
					first = true;
					swapped = true;
				} else {
					arb = xarb.colarb;
					reverse = sa != arb.s1;
					if(arb.stat != stat) {
						arb.stat = stat;
						if(!arb.sleeping) {
							(stat?this.c_arbiters_false:this.c_arbiters_true).remove(arb);
							carbs.add(arb);
						}
					}
				}
				ret = (function($this) {
					var $r;
					var inttype1 = zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION;
					$r = first || arb.stamp != $this.stamp || continuous?(function($this) {
						var $r;
						arb.stamp = $this.stamp;
						$r = zpp_nape.geom.ZPP_Collide.contactCollide(sa,sb,arb,reverse)?(function($this) {
							var $r;
							if(first) {
								arb.b1 = s1.body;
								arb.ws1 = s1;
								arb.b2 = s2.body;
								arb.ws2 = s2;
								arb.id = sa.id;
								arb.di = sb.id;
								arb.b1.arbiters.inlined_add(arb);
								arb.b2.arbiters.inlined_add(arb);
								arb.active = true;
								arb.present = 0;
								arb.cleared = false;
								arb.sleeping = false;
								arb.fresh = false;
								arb.presentable = false;
								arb.s1 = s1;
								arb.s2 = s2;
								if(!arb.userdef_restitution) {
									if(arb.s1.material.elasticity <= Math.NEGATIVE_INFINITY || arb.s2.material.elasticity <= Math.NEGATIVE_INFINITY) arb.restitution = 0; else if(arb.s1.material.elasticity >= Math.POSITIVE_INFINITY || arb.s2.material.elasticity >= Math.POSITIVE_INFINITY) arb.restitution = 1; else arb.restitution = (arb.s1.material.elasticity + arb.s2.material.elasticity) / 2;
									if(arb.restitution < 0) arb.restitution = 0;
									if(arb.restitution > 1) arb.restitution = 1;
								}
								if(!arb.userdef_dyn_fric) arb.dyn_fric = Math.sqrt(arb.s1.material.dynamicFriction * arb.s2.material.dynamicFriction);
								if(!arb.userdef_stat_fric) arb.stat_fric = Math.sqrt(arb.s1.material.staticFriction * arb.s2.material.staticFriction);
								if(!arb.userdef_rfric) arb.rfric = Math.sqrt(arb.s1.material.rollingFriction * arb.s2.material.rollingFriction);
								carbs.inlined_add(arb);
								arb.fresh = !swapped;
							} else arb.fresh = arb.up_stamp < $this.stamp - 1 || arb.endGenerated == $this.stamp && continuous;
							arb.up_stamp = arb.stamp;
							if(arb.fresh || (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								arb.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
								var anyimpure1 = false;
								var arbs1 = arb.ws1.id > arb.ws2.id?arb.ws2:arb.ws1;
								var arbs2 = arb.ws1.id > arb.ws2.id?arb.ws1:arb.ws2;
								$this.inlined_MRCA_chains(arbs1,arbs2);
								var cx_ite = $this.mrca1.head;
								while(cx_ite != null) {
									var i1 = cx_ite.elt;
									var cx_ite1 = $this.mrca2.head;
									while(cx_ite1 != null) {
										var i2 = cx_ite1.elt;
										var cb1 = i1.cbSet;
										var cb2 = i2.cbSet;
										if(cb1.manager.pair(cb1,cb2).listeners.head == null) {
											cx_ite1 = cx_ite1.next;
											continue;
										}
										var callbackset = null;
										var ncallbackset = null;
										$this.prelisteners.inlined_clear();
										var lite1 = [null];
										cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite1) {
											return function(listener) {
												if((listener.itype & inttype1) != 0) {
													lite1[0] = _g.prelisteners.inlined_insert(lite1[0],listener);
													anyimpure1 = anyimpure1 || !listener.pure;
												}
											};
										})(lite1));
										if($this.prelisteners.head == null) {
											cx_ite1 = cx_ite1.next;
											continue;
										}
										callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
										if(callbackset == null) {
											ncallbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
											$this.add_callbackset(ncallbackset);
										}
										if(callbackset == null || (callbackset.COLLISIONstamp != $this.stamp || continuous) && (callbackset.COLLISIONstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
											if(ncallbackset != null) callbackset = ncallbackset;
											if(callbackset != null) {
												var cx_ite2 = $this.prelisteners.head;
												while(cx_ite2 != null) {
													var listener = cx_ite2.elt;
													if(listener.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
														callbackset.COLLISIONstamp = $this.stamp;
														callbackset.SENSORstamp = $this.stamp;
														callbackset.FLUIDstamp = $this.stamp;
													} else callbackset.COLLISIONstamp = $this.stamp;
													cx_ite2 = cx_ite2.next;
												}
											}
											arb.mutable = true;
											if(arb.wrap_normal != null) arb.wrap_normal.zpp_inner._immutable = false;
											if(arb.wrap_contacts != null) arb.wrap_contacts.zpp_inner.immutable = false;
											var pact = arb.active;
											arb.active = true;
											var emptycontacts = false;
											arb.cleanupContacts();
											$this.precb.zpp_inner.pre_arbiter = arb;
											$this.precb.zpp_inner.set = callbackset;
											var cx_ite2 = $this.prelisteners.head;
											while(cx_ite2 != null) {
												var listener = cx_ite2.elt;
												$this.precb.zpp_inner.listener = listener;
												zpp_nape.phys.ZPP_Interactor.int_callback(callbackset,listener,$this.precb.zpp_inner);
												$this.precb.zpp_inner.pre_swapped = i1 != $this.precb.zpp_inner.int1;
												var ret1 = listener.handlerp($this.precb);
												if(ret1 != null) arb.immState = ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS:ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS:zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
												cx_ite2 = cx_ite2.next;
											}
											arb.mutable = false;
											if(arb.wrap_normal != null) arb.wrap_normal.zpp_inner._immutable = true;
											if(arb.wrap_contacts != null) arb.wrap_contacts.zpp_inner.immutable = true;
											arb.active = pact;
											if(callbackset != null) {
												var cx_ite2 = $this.prelisteners.head;
												while(cx_ite2 != null) {
													var listener = cx_ite2.elt;
													if(listener.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
														callbackset.COLLISIONstate = arb.immState;
														callbackset.SENSORstate = arb.immState;
														callbackset.FLUIDstate = arb.immState;
													} else callbackset.COLLISIONstate = arb.immState;
													cx_ite2 = cx_ite2.next;
												}
											}
										} else if(callbackset == null) {
											if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
										} else arb.immState = callbackset.COLLISIONstate;
										cx_ite1 = cx_ite1.next;
									}
									cx_ite = cx_ite.next;
								}
								if(anyimpure1 && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
									if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
										var o = arb.b1;
										if(!o.world) {
											o.component.waket = $this.stamp + ($this.midstep?0:1);
											if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
											if(o.component.sleeping) $this.really_wake(o,false);
										}
									}
									if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
										var o = arb.b2;
										if(!o.world) {
											o.component.waket = $this.stamp + ($this.midstep?0:1);
											if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
											if(o.component.sleeping) $this.really_wake(o,false);
										}
									}
								}
							}
							if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
								if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
									var o = arb.b1;
									if(!o.world) {
										o.component.waket = $this.stamp + ($this.midstep?0:1);
										if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) $this.really_wake(o,false);
									}
								}
								if(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
									var o = arb.b2;
									if(!o.world) {
										o.component.waket = $this.stamp + ($this.midstep?0:1);
										if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
										if(o.component.sleeping) $this.really_wake(o,false);
									}
								}
							}
							if(arb.sleeping) {
								arb.sleeping = false;
								carbs.inlined_add(arb);
							}
							$r = arb;
							return $r;
						}($this)):first?(function($this) {
							var $r;
							{
								var o = arb;
								o.userdef_dyn_fric = false;
								o.userdef_stat_fric = false;
								o.userdef_restitution = false;
								o.userdef_rfric = false;
								o.__ref_edge1 = o.__ref_edge2 = null;
								o.next = zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool;
								zpp_nape.dynamics.ZPP_ColArbiter.zpp_pool = o;
							}
							$r = null;
							return $r;
						}($this)):arb;
						return $r;
					}($this)):arb;
					return $r;
				}(this));
			} else {
				var xarb = in_arb == null?(function($this) {
					var $r;
					var ret1 = null;
					var b = b1.arbiters.length < b2.arbiters.length?b1:b2;
					{
						var cx_ite = b.arbiters.head;
						while(cx_ite != null) {
							var arb = cx_ite.elt;
							if(arb.id == sa.id && arb.di == sb.id) {
								ret1 = arb;
								break;
							}
							cx_ite = cx_ite.next;
						}
					}
					$r = ret1;
					return $r;
				}(this)):in_arb;
				var first = xarb == null;
				var arb;
				var swapped = false;
				if(first) {
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						arb = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
				} else if(xarb.sensorarb == null) {
					xarb.cleared = true;
					xarb.b1.arbiters.inlined_try_remove(xarb);
					xarb.b2.arbiters.inlined_try_remove(xarb);
					if(xarb.pair != null) {
						xarb.pair.arb = null;
						xarb.pair = null;
					}
					xarb.active = false;
					this.f_arbiters.modified = true;
					if(zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool == null) arb = new zpp_nape.dynamics.ZPP_SensorArbiter(); else {
						arb = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
						zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = arb.next;
						arb.next = null;
					}
					null;
					arb.intchange = true;
					first = true;
					swapped = true;
				} else arb = xarb.sensorarb;
				ret = (function($this) {
					var $r;
					var inttype2 = zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR;
					$r = first || arb.stamp != $this.stamp || continuous?(function($this) {
						var $r;
						arb.stamp = $this.stamp;
						$r = zpp_nape.geom.ZPP_Collide.testCollide(sa,sb)?(function($this) {
							var $r;
							if(first) {
								arb.b1 = s1.body;
								arb.ws1 = s1;
								arb.b2 = s2.body;
								arb.ws2 = s2;
								arb.id = sa.id;
								arb.di = sb.id;
								arb.b1.arbiters.inlined_add(arb);
								arb.b2.arbiters.inlined_add(arb);
								arb.active = true;
								arb.present = 0;
								arb.cleared = false;
								arb.sleeping = false;
								arb.fresh = false;
								arb.presentable = false;
								$this.s_arbiters.inlined_add(arb);
								arb.fresh = !swapped;
							} else arb.fresh = arb.up_stamp < $this.stamp - 1 || arb.endGenerated == $this.stamp && continuous;
							arb.up_stamp = arb.stamp;
							if(arb.fresh || (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
								arb.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
								var anyimpure2 = false;
								var arbs1 = arb.ws1.id > arb.ws2.id?arb.ws2:arb.ws1;
								var arbs2 = arb.ws1.id > arb.ws2.id?arb.ws1:arb.ws2;
								$this.inlined_MRCA_chains(arbs1,arbs2);
								var cx_ite = $this.mrca1.head;
								while(cx_ite != null) {
									var i1 = cx_ite.elt;
									var cx_ite1 = $this.mrca2.head;
									while(cx_ite1 != null) {
										var i2 = cx_ite1.elt;
										var cb1 = i1.cbSet;
										var cb2 = i2.cbSet;
										if(cb1.manager.pair(cb1,cb2).listeners.head == null) {
											cx_ite1 = cx_ite1.next;
											continue;
										}
										var callbackset = null;
										var ncallbackset = null;
										$this.prelisteners.inlined_clear();
										var lite2 = [null];
										cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_PRE,(function(lite2) {
											return function(listener) {
												if((listener.itype & inttype2) != 0) {
													lite2[0] = _g.prelisteners.inlined_insert(lite2[0],listener);
													anyimpure2 = anyimpure2 || !listener.pure;
												}
											};
										})(lite2));
										if($this.prelisteners.head == null) {
											cx_ite1 = cx_ite1.next;
											continue;
										}
										callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
										if(callbackset == null) {
											ncallbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
											$this.add_callbackset(ncallbackset);
										}
										if(callbackset == null || (callbackset.SENSORstamp != $this.stamp || continuous) && (callbackset.SENSORstate & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
											if(ncallbackset != null) callbackset = ncallbackset;
											if(callbackset != null) {
												var cx_ite2 = $this.prelisteners.head;
												while(cx_ite2 != null) {
													var listener = cx_ite2.elt;
													if(listener.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
														callbackset.COLLISIONstamp = $this.stamp;
														callbackset.SENSORstamp = $this.stamp;
														callbackset.FLUIDstamp = $this.stamp;
													} else callbackset.SENSORstamp = $this.stamp;
													cx_ite2 = cx_ite2.next;
												}
											}
											var pact = arb.active;
											arb.active = true;
											var emptycontacts = false;
											$this.precb.zpp_inner.pre_arbiter = arb;
											$this.precb.zpp_inner.set = callbackset;
											var cx_ite2 = $this.prelisteners.head;
											while(cx_ite2 != null) {
												var listener = cx_ite2.elt;
												$this.precb.zpp_inner.listener = listener;
												zpp_nape.phys.ZPP_Interactor.int_callback(callbackset,listener,$this.precb.zpp_inner);
												$this.precb.zpp_inner.pre_swapped = i1 != $this.precb.zpp_inner.int1;
												var ret1 = listener.handlerp($this.precb);
												if(ret1 != null) arb.immState = ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS:ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_ACCEPT_ONCE;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT:ret1 == (function($this) {
													var $r;
													if(zpp_nape.util.ZPP_Flags.PreFlag_IGNORE == null) {
														zpp_nape.util.ZPP_Flags.internal = true;
														zpp_nape.util.ZPP_Flags.PreFlag_IGNORE = new nape.callbacks.PreFlag();
														zpp_nape.util.ZPP_Flags.internal = false;
													}
													$r = zpp_nape.util.ZPP_Flags.PreFlag_IGNORE;
													return $r;
												}($this))?zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE | zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS:zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE;
												cx_ite2 = cx_ite2.next;
											}
											arb.active = pact;
											if(callbackset != null) {
												var cx_ite2 = $this.prelisteners.head;
												while(cx_ite2 != null) {
													var listener = cx_ite2.elt;
													if(listener.itype == zpp_nape.util.ZPP_Flags.id_InteractionType_ANY) {
														callbackset.COLLISIONstate = arb.immState;
														callbackset.SENSORstate = arb.immState;
														callbackset.FLUIDstate = arb.immState;
													} else callbackset.SENSORstate = arb.immState;
													cx_ite2 = cx_ite2.next;
												}
											}
										} else if(callbackset == null) {
											if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) arb.immState = zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT;
										} else arb.immState = callbackset.SENSORstate;
										cx_ite1 = cx_ite1.next;
									}
									cx_ite = cx_ite.next;
								}
								if(anyimpure2 && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS) == 0) {
									if(!(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
										var o = arb.b1;
										if(!o.world) {
											o.component.waket = $this.stamp + ($this.midstep?0:1);
											if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
											if(o.component.sleeping) $this.really_wake(o,false);
										}
									}
									if(!(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
										var o = arb.b2;
										if(!o.world) {
											o.component.waket = $this.stamp + ($this.midstep?0:1);
											if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
											if(o.component.sleeping) $this.really_wake(o,false);
										}
									}
								}
							}
							if(arb.sleeping) {
								arb.sleeping = false;
								$this.s_arbiters.inlined_add(arb);
							}
							$r = arb;
							return $r;
						}($this)):first?(function($this) {
							var $r;
							{
								var o = arb;
								o.next = zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool;
								zpp_nape.dynamics.ZPP_SensorArbiter.zpp_pool = o;
							}
							$r = null;
							return $r;
						}($this)):arb;
						return $r;
					}($this)):arb;
					return $r;
				}(this));
			}
		}
		return ret;
	}
	,interactionType: function(s1,s2,b1,b2) {
		var con_ignore;
		con_ignore = false;
		var cx_ite = b1.constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.ignore && con.pair_exists(b1.id,b2.id)) {
				con_ignore = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(!con_ignore && !this.group_ignore(s1,s2)) {
			if((s1.sensorEnabled || s2.sensorEnabled) && s1.filter.shouldSense(s2.filter)) return 2; else if((s1.fluidEnabled || s2.fluidEnabled) && s1.filter.shouldFlow(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 0; else if(s1.filter.shouldCollide(s2.filter) && !(b1.imass == 0 && b2.imass == 0 && b1.iinertia == 0 && b2.iinertia == 0)) return 1; else return -1;
		} else return -1;
	}
	,group_ignore: function(s1,s2) {
		var g1 = s1.lookup_group();
		if(g1 == null) return false; else {
			var g2 = s2.lookup_group();
			if(g2 == null) return false; else {
				var ret = false;
				while(g1 != null && g2 != null) {
					if(g1 == g2) {
						ret = g1.ignore;
						break;
					}
					if(g1.depth < g2.depth) g2 = g2.group; else g1 = g1.group;
				}
				return ret;
			}
		}
	}
	,iteratePos: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(!con.__velocity && con.stiff) {
					if(con.applyImpulsePos()) {
						cx_ite = this.live_constraints.erase(pre);
						con.broken();
						this.constraintCbBreak(con);
						if(con.removeOnBreak) {
							con.component.sleeping = true;
							this.midstep = false;
							if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
							this.midstep = true;
						} else con.active = false;
						con.clearcache();
						continue;
					}
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulsePos();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,iterateVel: function(times) {
		var _g = 0;
		while(_g < times) {
			var i = _g++;
			var cx_ite = this.f_arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
				cx_ite = cx_ite.next;
			}
			var pre = null;
			var cx_ite = this.live_constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.applyImpulseVel()) {
					cx_ite = this.live_constraints.erase(pre);
					con.broken();
					this.constraintCbBreak(con);
					if(con.removeOnBreak) {
						con.component.sleeping = true;
						this.midstep = false;
						if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
						this.midstep = true;
					} else con.active = false;
					con.clearcache();
					continue;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			var arbi = this.c_arbiters_false.head;
			var fst = true;
			if(arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
			while(arbi != null) {
				var arb = arbi.elt;
				if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.applyImpulseVel();
				arbi = arbi.next;
				if(fst && arbi == null) {
					arbi = this.c_arbiters_true.head;
					fst = false;
				}
			}
		}
	}
	,warmStart: function() {
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
			cx_ite = cx_ite.next;
		}
		var arbi = this.c_arbiters_false.head;
		var fst = true;
		if(arbi == null) {
			arbi = this.c_arbiters_true.head;
			fst = false;
		}
		while(arbi != null) {
			var arb = arbi.elt;
			if(arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) arb.warmStart();
			arbi = arbi.next;
			if(fst && arbi == null) {
				arbi = this.c_arbiters_true.head;
				fst = false;
			}
		}
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			con.warmStart();
			cx_ite = cx_ite.next;
		}
	}
	,prestep: function(dt) {
		var pre = null;
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.preStep(dt)) {
				cx_ite = this.live_constraints.erase(pre);
				con.broken();
				this.constraintCbBreak(con);
				if(con.removeOnBreak) {
					con.component.sleeping = true;
					this.midstep = false;
					if(con.compound != null) con.compound.wrap_constraints.remove(con.outer); else this.wrap_constraints.remove(con.outer);
					this.midstep = true;
				} else con.active = false;
				con.clearcache();
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		var pre1 = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre1 = null;
			}
		}
		var pre1 = null;
		var arbs = this.f_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre1 = null;
			}
		}
		var pre1 = null;
		var arbs = this.s_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre1 = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(this.presteparb(arb,dt)) {
				arbite = arbs.inlined_erase(pre1);
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre1 = null;
				}
				continue;
			}
			pre1 = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre1 = null;
			}
		}
	}
	,presteparb: function(arb,dt,cont) {
		if(cont == null) cont = false;
		var _g = this;
		if(!arb.cleared && (arb.b1.component.sleeping && arb.b2.component.sleeping)) {
			arb.sleep_stamp = this.stamp;
			arb.sleeping = true;
			return true;
		}
		if(!arb.cleared || arb.present != 0 || arb.intchange) {
			var endcb = !cont && arb.up_stamp == this.stamp - 1 && !arb.cleared && !arb.intchange;
			var begcb = arb.fresh && !arb.cleared && !arb.intchange;
			if(endcb) arb.endGenerated = this.stamp;
			if(begcb || endcb || arb.cleared || arb.intchange) {
				this.inlined_MRCA_chains(arb.ws1,arb.ws2);
				var cx_ite = this.mrca1.head;
				while(cx_ite != null) {
					var i1 = cx_ite.elt;
					var cx_ite1 = this.mrca2.head;
					while(cx_ite1 != null) {
						var i2 = cx_ite1.elt;
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						if(cb1.manager.pair(cb1,cb2).listeners.head == null) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
						if(begcb || arb.intchange) {
							if(callbackset[0] == null) {
								callbackset[0] = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset[0]);
							}
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN,(function(callbackset) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset));
							if(!callbackset[0].arbiters.inlined_has(arb)?(function($this) {
								var $r;
								callbackset[0].arbiters.inlined_add(arb);
								$r = true;
								return $r;
							}(this)):false) arb.present++;
						} else {
							arb.present--;
							callbackset[0].remove_arb(arb);
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset) {
								return function(listener) {
									if((listener.itype & arb.type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
			arb.fresh = false;
			arb.intchange = false;
		}
		if(arb.cleared || arb.up_stamp + (arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL?nape.Config.arbiterExpirationDelay:0) < this.stamp) {
			if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.SENSOR) arb.sensorarb.retire(); else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) arb.fluidarb.retire(); else arb.colarb.retire();
			return true;
		}
		var pact = arb.active;
		arb.active = arb.presentable = arb.up_stamp == this.stamp;
		if((arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
			if(arb.active && arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR) {
				if(arb.colarb != null) {
					if(arb.colarb.preStep(dt)) arb.active = false;
				} else arb.fluidarb.preStep(this,dt);
			}
		} else if(arb.colarb != null) {
			if(arb.colarb.cleanupContacts()) arb.active = false;
		}
		if(pact != arb.active) {
			arb.b1.arbiters.modified = true;
			arb.b2.arbiters.modified = true;
			this.c_arbiters_true.modified = this.c_arbiters_false.modified = true;
			this.s_arbiters.modified = this.f_arbiters.modified = true;
		}
		return false;
	}
	,updatePos: function(dt) {
		var MAX_VEL = 2 * Math.PI / dt;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape.Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape.Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) angvel = -angvel;
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * (1 / 120) | 0;
						if(count > 8) count = 8;
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						var _g = 1;
						while(_g < count) {
							var i = _g++;
							cur.sweepIntegrate(anginc * i * iangvel);
							if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
							if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
							if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
							if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
							if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
						var linThreshold2 = nape.Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape.Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cur.sweepTime = 0;
			cur.sweep_angvel = cur.angvel % MAX_VEL;
			cur.sweepIntegrate(dt);
			if(!cur.disableCCD) {
				var linThreshold = nape.Config.staticCCDLinearThreshold * cur.sweepRadius;
				var angThreshold = nape.Config.staticCCDAngularThreshold;
				if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold * linThreshold || cur.angvel * cur.angvel * dt * dt > angThreshold * angThreshold || cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
					var angvel = cur.sweep_angvel;
					if(angvel < 0) angvel = -angvel;
					var iangvel = 1 / angvel;
					var cx_ite1 = cur.shapes.head;
					while(cx_ite1 != null) {
						var s = cx_ite1.elt;
						var aabb = s.aabb;
						var minx = aabb.minx;
						var miny = aabb.miny;
						var maxx = aabb.maxx;
						var maxy = aabb.maxy;
						var count = angvel * dt * s.sweepCoef * (1 / 120) | 0;
						if(count > 8) count = 8;
						var anginc = angvel * dt / count;
						cur.sweepIntegrate(dt);
						if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
						if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
						if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
						if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
						if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						var _g = 1;
						while(_g < count) {
							var i = _g++;
							cur.sweepIntegrate(anginc * i * iangvel);
							if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle._force_validate_aabb(); else s.polygon._force_validate_aabb();
							if(minx < aabb.minx) aabb.minx = minx; else minx = aabb.minx;
							if(miny < aabb.miny) aabb.miny = miny; else miny = aabb.miny;
							if(maxx > aabb.maxx) aabb.maxx = maxx; else maxx = aabb.maxx;
							if(maxy > aabb.maxy) aabb.maxy = maxy; else maxy = aabb.maxy;
						}
						this.bphase.sync(s);
						cx_ite1 = cx_ite1.next;
					}
					cur.sweepFrozen = false;
					if(cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.bulletEnabled) {
						var linThreshold2 = nape.Config.bulletCCDLinearThreshold * cur.sweepRadius;
						var angThreshold2 = nape.Config.bulletCCDAngularThreshold;
						if((cur.velx * cur.velx + cur.vely * cur.vely) * dt * dt > linThreshold2 * linThreshold2 || cur.angvel * cur.angvel * dt * dt > angThreshold2 * angThreshold2) cur.bullet = true;
					}
				} else {
					cur.sweepFrozen = true;
					cur.bullet = false;
				}
			} else {
				cur.sweepFrozen = true;
				cur.bullet = false;
			}
			cx_ite = cx_ite.next;
		}
	}
	,updateVel: function(dt) {
		var pre = null;
		var linDrag = 1 - dt * this.global_lin_drag;
		var angDrag = 1 - dt * this.global_ang_drag;
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(cur.smass != 0.0) {
				var time = dt * cur.imass;
				cur.velx = linDrag * cur.velx + (cur.forcex + this.gravityx * cur.gravMass) * time;
				cur.vely = linDrag * cur.vely + (cur.forcey + this.gravityy * cur.gravMass) * time;
			}
			if(cur.sinertia != 0.0) {
				var dpx = 0.0;
				var dpy = 0.0;
				dpx = cur.worldCOMx - cur.posx;
				dpy = cur.worldCOMy - cur.posy;
				var torque = cur.torque + (this.gravityy * dpx - this.gravityx * dpy) * cur.gravMass;
				cur.angvel = angDrag * cur.angvel + torque * dt * cur.iinertia;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
	}
	,validation: function() {
		this.cbsets.validate();
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
					s.polygon.splice_collinear();
					var res = s.polygon.valid();
					if(res != (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
						return $r;
					}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!(cur.shapes.head == null)) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
			if(!cur.nomove && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.mass == 0) throw "Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false";
			if(!cur.norotate && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.inertia == 0) throw "Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false";
			if(cur.component.woken && cur.cbSet != null) {
				var cx_ite1 = cur.cbSet.bodylisteners.head;
				while(cx_ite1 != null) {
					var i = cx_ite1.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite1 = cx_ite1.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.body = cur;
					cx_ite1 = cx_ite1.next;
				}
			}
			cur.component.woken = false;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var shape = cx_ite1.elt;
				this.bphase.sync(shape);
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepRadius = 0;
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var s = cx_ite1.elt;
				if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
					s.polygon.splice_collinear();
					var res = s.polygon.valid();
					if(res != (function($this) {
						var $r;
						if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
							zpp_nape.util.ZPP_Flags.internal = true;
							zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
							zpp_nape.util.ZPP_Flags.internal = false;
						}
						$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
						return $r;
					}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
					s.polygon.validate_gaxi();
				}
				s.validate_sweepRadius();
				if(s.sweepRadius > cur.sweepRadius) cur.sweepRadius = s.sweepRadius;
				cx_ite1 = cx_ite1.next;
			}
			cur.validate_mass();
			cur.validate_inertia();
			if(!(cur.shapes.head == null)) {
				cur.validate_aabb();
				cur.validate_worldCOM();
			}
			cur.validate_gravMass();
			if(cur.zip_axis) {
				cur.zip_axis = false;
				cur.axisx = Math.sin(cur.rot);
				cur.axisy = Math.cos(cur.rot);
				null;
			}
			if(!cur.nomove && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.mass == 0) throw "Error: Dynamic Body cannot be simulated with 0 mass unless allowMovement is false";
			if(!cur.norotate && cur.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && cur.inertia == 0) throw "Error: Dynamic Body cannot be simulated with 0 inertia unless allowRotation is false";
			var cx_ite1 = cur.shapes.head;
			while(cx_ite1 != null) {
				var shape = cx_ite1.elt;
				this.bphase.sync(shape);
				cx_ite1 = cx_ite1.next;
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			if(con.active) {
				con.validate();
				if(con.component.woken && con.cbSet != null) {
					var cx_ite1 = con.cbSet.conlisteners.head;
					while(cx_ite1 != null) {
						var i = cx_ite1.elt;
						if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var cb = this.push_callback(i);
						cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
						cb.constraint = con;
						cx_ite1 = cx_ite1.next;
					}
				}
				con.component.woken = false;
			}
			cx_ite = cx_ite.next;
		}
	}
	,static_validation: function(body) {
		if(!(body.shapes.head == null)) body.validate_aabb();
		body.validate_mass();
		body.validate_inertia();
		if(body.velx != 0 || body.vely != 0 || body.angvel != 0) throw "Error: Static body cannot have any real velocity, only kinematic or surface velocities";
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var s = cx_ite.elt;
			if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON) {
				s.polygon.splice_collinear();
				var res = s.polygon.valid();
				if(res != (function($this) {
					var $r;
					if(zpp_nape.util.ZPP_Flags.ValidationResult_VALID == null) {
						zpp_nape.util.ZPP_Flags.internal = true;
						zpp_nape.util.ZPP_Flags.ValidationResult_VALID = new nape.shape.ValidationResult();
						zpp_nape.util.ZPP_Flags.internal = false;
					}
					$r = zpp_nape.util.ZPP_Flags.ValidationResult_VALID;
					return $r;
				}(this))) throw "Error: Cannot simulate with an invalid Polygon : " + s.polygon.outer.toString() + " is invalid : " + res.toString();
				s.polygon.validate_gaxi();
			}
			cx_ite = cx_ite.next;
		}
		body.sweepFrozen = true;
	}
	,sleepArbiters: function() {
		var pre = null;
		var arbs = this.c_arbiters_true;
		var arbite = arbs.head;
		var fst = this.c_arbiters_false != null;
		if(fst && arbite == null) {
			fst = false;
			arbite = this.c_arbiters_false.head;
			arbs = this.c_arbiters_false;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = this.c_arbiters_false.head;
					arbs = this.c_arbiters_false;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = this.c_arbiters_false.head;
				arbs = this.c_arbiters_false;
				pre = null;
			}
		}
		var pre = null;
		var arbs = this.f_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre = null;
			}
		}
		var pre = null;
		var arbs = this.s_arbiters;
		var arbite = arbs.head;
		var fst = false;
		if(fst && arbite == null) {
			fst = false;
			arbite = null.begin();
			arbs = null;
			pre = null;
		}
		while(arbite != null) {
			var arb = arbite.elt;
			if(arb.b1.component.sleeping && arb.b2.component.sleeping) {
				arb.sleep_stamp = this.stamp;
				arb.sleeping = true;
				arbite = arbs.inlined_erase(pre);
				if(fst && arbite == null) {
					fst = false;
					arbite = null.begin();
					arbs = null;
					pre = null;
				}
				continue;
			}
			pre = arbite;
			arbite = arbite.next;
			if(fst && arbite == null) {
				fst = false;
				arbite = null.begin();
				arbs = null;
				pre = null;
			}
		}
	}
	,doForests: function(dt) {
		var cx_ite = this.c_arbiters_false.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var xr = arb.b1.component == arb.b1.component.parent?arb.b1.component:(function($this) {
						var $r;
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt = stack.parent;
							stack.parent = obj;
							stack = nxt;
						}
						$r = obj;
						return $r;
					}(this));
					var yr = arb.b2.component == arb.b2.component.parent?arb.b2.component:(function($this) {
						var $r;
						var obj = arb.b2.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt = stack.parent;
							stack.parent = obj;
							stack = nxt;
						}
						$r = obj;
						return $r;
					}(this));
					if(xr != yr) {
						if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.f_arbiters.head;
		while(cx_ite != null) {
			var arb = cx_ite.elt;
			if(!arb.cleared && arb.up_stamp == this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
				if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var xr = arb.b1.component == arb.b1.component.parent?arb.b1.component:(function($this) {
						var $r;
						var obj = arb.b1.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt = stack.parent;
							stack.parent = obj;
							stack = nxt;
						}
						$r = obj;
						return $r;
					}(this));
					var yr = arb.b2.component == arb.b2.component.parent?arb.b2.component:(function($this) {
						var $r;
						var obj = arb.b2.component;
						var stack = null;
						while(obj != obj.parent) {
							var nxt = obj.parent;
							obj.parent = stack;
							stack = obj;
							obj = nxt;
						}
						while(stack != null) {
							var nxt = stack.parent;
							stack.parent = obj;
							stack = nxt;
						}
						$r = obj;
						return $r;
					}(this));
					if(xr != yr) {
						if(xr.rank < yr.rank) xr.parent = yr; else if(xr.rank > yr.rank) yr.parent = xr; else {
							yr.parent = xr;
							xr.rank++;
						}
					}
				}
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live_constraints.head;
		while(cx_ite != null) {
			var con = cx_ite.elt;
			con.forest();
			cx_ite = cx_ite.next;
		}
		while(!(this.live.head == null)) {
			var o = this.live.inlined_pop_unsafe();
			var oc = o.component;
			var root = oc == oc.parent?oc:(function($this) {
				var $r;
				var obj = oc;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			if(root.island == null) {
				if(zpp_nape.space.ZPP_Island.zpp_pool == null) root.island = new zpp_nape.space.ZPP_Island(); else {
					root.island = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = root.island.next;
					root.island.next = null;
				}
				root.island.waket = 0;
				this.islands.inlined_add(root.island);
				root.island.sleep = true;
			}
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			var rest = o.atRest(dt);
			oc.island.sleep = oc.island.sleep && rest;
			if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
		}
		while(!(this.live_constraints.head == null)) {
			var o = this.live_constraints.inlined_pop_unsafe();
			var oc = o.component;
			var root = oc == oc.parent?oc:(function($this) {
				var $r;
				var obj = oc;
				var stack = null;
				while(obj != obj.parent) {
					var nxt = obj.parent;
					obj.parent = stack;
					stack = obj;
					obj = nxt;
				}
				while(stack != null) {
					var nxt = stack.parent;
					stack.parent = obj;
					stack = nxt;
				}
				$r = obj;
				return $r;
			}(this));
			oc.island = root.island;
			oc.island.comps.inlined_add(oc);
			if(oc.waket > oc.island.waket) oc.island.waket = oc.waket;
		}
		while(!(this.islands.next == null)) {
			var i = this.islands.inlined_pop_unsafe();
			if(i.sleep) {
				var cx_ite = i.comps.head;
				while(cx_ite != null) {
					var c = cx_ite.elt;
					if(c.isBody) {
						var b = c.body;
						b.velx = 0;
						b.vely = 0;
						b.angvel = 0;
						c.sleeping = true;
						var cx_ite1 = b.shapes.head;
						while(cx_ite1 != null) {
							var shape = cx_ite1.elt;
							this.bphase.sync(shape);
							cx_ite1 = cx_ite1.next;
						}
						this.bodyCbSleep(b);
					} else {
						var con = c.constraint;
						this.constraintCbSleep(con);
						c.sleeping = true;
					}
					cx_ite = cx_ite.next;
				}
			} else {
				while(!(i.comps.head == null)) {
					var c = i.comps.inlined_pop_unsafe();
					c.waket = i.waket;
					if(c.isBody) this.live.inlined_add(c.body); else this.live_constraints.inlined_add(c.constraint);
					c.sleeping = false;
					c.island = null;
					c.parent = c;
					c.rank = 0;
				}
				var o = i;
				o.next = zpp_nape.space.ZPP_Island.zpp_pool;
				zpp_nape.space.ZPP_Island.zpp_pool = o;
			}
		}
	}
	,wake_constraint: function(con,fst) {
		if(fst == null) fst = false;
		if(con.active) {
			con.component.waket = this.stamp + (this.midstep?0:1);
			if(con.component.sleeping) {
				if(con.component.island == null) {
					con.component.sleeping = false;
					this.live_constraints.inlined_add(con);
					con.wake_connected();
					if(!fst) this.constraintCbWake(con);
				} else this.wakeIsland(con.component.island);
				return true;
			} else return false;
		} else return false;
	}
	,really_wake: function(o,fst) {
		if(fst == null) fst = false;
		if(o.component.island == null) {
			o.component.sleeping = false;
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.inlined_add(o); else this.live.inlined_add(o);
			var cx_ite = o.constraints.head;
			while(cx_ite != null) {
				var con = cx_ite.elt;
				if(con.space == this) this.wake_constraint(con);
				cx_ite = cx_ite.next;
			}
			var cx_ite = o.arbiters.head;
			while(cx_ite != null) {
				var arb = cx_ite.elt;
				if(arb.sleeping) {
					arb.sleeping = false;
					arb.up_stamp += this.stamp + (this.midstep?0:1) - arb.sleep_stamp;
					if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
						var carb = arb.colarb;
						if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
					} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
				}
				if(arb.type != zpp_nape.dynamics.ZPP_Arbiter.SENSOR && !arb.cleared && arb.up_stamp >= this.stamp && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) {
					if(arb.b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b1.component.sleeping) {
						var o1 = arb.b1;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep?0:1);
							if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
							if(o1.component.sleeping) this.really_wake(o1,false);
						}
					}
					if(arb.b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && arb.b2.component.sleeping) {
						var o1 = arb.b2;
						if(!o1.world) {
							o1.component.waket = this.stamp + (this.midstep?0:1);
							if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
							if(o1.component.sleeping) this.really_wake(o1,false);
						}
					}
				}
				cx_ite = cx_ite.next;
			}
			if(!fst && o.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.bodyCbWake(o);
			if(!fst && !this.bphase.is_sweep && !(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
				var cx_ite = o.shapes.head;
				while(cx_ite != null) {
					var shape = cx_ite.elt;
					if(shape.node != null) this.bphase.sync(shape);
					cx_ite = cx_ite.next;
				}
			}
		} else this.wakeIsland(o.component.island);
	}
	,non_inlined_wake: function(o,fst) {
		if(fst == null) fst = false;
		var o1 = o;
		if(!o1.world) {
			o1.component.waket = this.stamp + (this.midstep?0:1);
			if(o1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o1.kinematicDelaySleep = true;
			if(o1.component.sleeping) this.really_wake(o1,fst);
		}
	}
	,wakeIsland: function(i) {
		while(!(i.comps.head == null)) {
			var c = i.comps.pop_unsafe();
			c.waket = this.stamp + (this.midstep?0:1);
			if(c.isBody) {
				var b = c.body;
				this.live.add(b);
				var cx_ite = b.arbiters.head;
				while(cx_ite != null) {
					var arb = cx_ite.elt;
					if(arb.sleeping) {
						arb.sleeping = false;
						arb.up_stamp += this.stamp - arb.sleep_stamp;
						if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
							var carb = arb.colarb;
							if(carb.stat) this.c_arbiters_true.inlined_add(carb); else this.c_arbiters_false.inlined_add(carb);
						} else if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.FLUID) this.f_arbiters.inlined_add(arb.fluidarb); else this.s_arbiters.inlined_add(arb.sensorarb);
					}
					cx_ite = cx_ite.next;
				}
				this.bodyCbWake(b);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
				if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC)) {
					var cx_ite = b.shapes.head;
					while(cx_ite != null) {
						var shape = cx_ite.elt;
						if(shape.node != null) this.bphase.sync(shape);
						cx_ite = cx_ite.next;
					}
				}
			} else {
				var con = c.constraint;
				this.live_constraints.inlined_add(con);
				this.constraintCbWake(con);
				c.sleeping = false;
				c.island = null;
				c.parent = c;
				c.rank = 0;
			}
		}
		var o = i;
		o.next = zpp_nape.space.ZPP_Island.zpp_pool;
		zpp_nape.space.ZPP_Island.zpp_pool = o;
	}
	,wakeCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var y = cx_ite.elt;
			var o = y;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.constraints.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.wake_constraint(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.wakeCompound(i);
			cx_ite = cx_ite.next;
		}
	}
	,freshInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.freshInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite = comp.compounds.head;
			while(cx_ite != null) {
				var comp1 = cx_ite.elt;
				this.freshInteractorType(comp1,me);
				cx_ite = cx_ite.next;
			}
		} else {
			var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
			var xshp = intx.ishape != null?intx.ishape:null;
			var cx_ite = xbody.arbiters.head;
			while(cx_ite != null) {
				var xarb = cx_ite.elt;
				if(!xarb.presentable) {
					cx_ite = cx_ite.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite = cx_ite.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite1 = this.mrca1.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					var cx_ite2 = this.mrca2.head;
					while(cx_ite2 != null) {
						var i2 = cx_ite2.elt;
						if(i1 != me && i2 != me) {
							cx_ite2 = cx_ite2.next;
							continue;
						}
						var cb1 = i1.cbSet;
						var cb2 = i2.cbSet;
						cb1.validate();
						cb2.validate();
						if(!(cb1.manager.pair(cb1,cb2).listeners.head == null)) {
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
						}
						cx_ite2 = cx_ite2.next;
					}
					cx_ite1 = cx_ite1.next;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,freshListenerType: function(cb1,cb2) {
		var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite = cb2.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				stack.add(i);
				cx_ite = cx_ite.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite = comp.bodies.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					stack.add(i);
					cx_ite = cx_ite.next;
				}
				var cx_ite = comp.compounds.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					stack.add(i);
					cx_ite = cx_ite.next;
				}
			} else {
				var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
				var xshp = intx.ishape != null?intx.ishape:null;
				var cx_ite = xbody.arbiters.head;
				while(cx_ite != null) {
					var xarb = cx_ite.elt;
					if(!xarb.presentable) {
						cx_ite = cx_ite.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite = cx_ite.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						if(i1.cbSet != cb1 && i1.cbSet != cb2) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							if(i1.cbSet == cb1 && i2.cbSet != cb2 || i1.cbSet == cb2 && i2.cbSet != cb1) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
							if(callbackset == null) {
								callbackset = zpp_nape.space.ZPP_CallbackSet.get(i1,i2);
								this.add_callbackset(callbackset);
							}
							if(!callbackset.arbiters.inlined_has(xarb)?(function($this) {
								var $r;
								callbackset.arbiters.inlined_add(xarb);
								$r = true;
								return $r;
							}(this)):false) xarb.present++;
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,nullInteractorType: function(intx,me) {
		if(me == null) me = intx;
		if(intx.icompound != null) {
			var comp = intx.icompound;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var body = cx_ite.elt;
				this.nullInteractorType(body,me);
				cx_ite = cx_ite.next;
			}
			var cx_ite = comp.compounds.head;
			while(cx_ite != null) {
				var comp1 = cx_ite.elt;
				this.nullInteractorType(comp1,me);
				cx_ite = cx_ite.next;
			}
		} else {
			var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
			var xshp = intx.ishape != null?intx.ishape:null;
			var cx_ite = xbody.arbiters.head;
			while(cx_ite != null) {
				var xarb = cx_ite.elt;
				if(xarb.present == 0) {
					cx_ite = cx_ite.next;
					continue;
				}
				if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
					cx_ite = cx_ite.next;
					continue;
				}
				this.MRCA_chains(xarb.ws1,xarb.ws2);
				var cx_ite1 = this.mrca1.head;
				while(cx_ite1 != null) {
					var i1 = cx_ite1.elt;
					var cx_ite2 = this.mrca2.head;
					while(cx_ite2 != null) {
						var i2 = cx_ite2.elt;
						if(i1 != me && i2 != me) {
							cx_ite2 = cx_ite2.next;
							continue;
						}
						var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
						if(callbackset != null) {
							xarb.present--;
							callbackset.remove_arb(xarb);
							if(callbackset.arbiters.head == null) this.remove_callbackset(callbackset);
						}
						cx_ite2 = cx_ite2.next;
					}
					cx_ite1 = cx_ite1.next;
				}
				cx_ite = cx_ite.next;
			}
		}
	}
	,nullListenerType: function(cb1,cb2) {
		var stack = new zpp_nape.util.ZNPList_ZPP_Interactor();
		var cx_ite = cb1.interactors.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		if(cb1 != cb2) {
			var cx_ite = cb2.interactors.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				stack.add(i);
				cx_ite = cx_ite.next;
			}
		}
		while(!(stack.head == null)) {
			var intx = stack.pop_unsafe();
			if(intx.icompound != null) {
				var comp = intx.icompound;
				var cx_ite = comp.bodies.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					stack.add(i);
					cx_ite = cx_ite.next;
				}
				var cx_ite = comp.compounds.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					stack.add(i);
					cx_ite = cx_ite.next;
				}
			} else {
				var xbody = intx.ibody != null?intx.ibody:intx.ishape.body;
				var xshp = intx.ishape != null?intx.ishape:null;
				var cx_ite = xbody.arbiters.head;
				while(cx_ite != null) {
					var xarb = cx_ite.elt;
					if(xarb.present == 0) {
						cx_ite = cx_ite.next;
						continue;
					}
					if(xshp != null && !(xarb.ws1 == xshp || xarb.ws2 == xshp)) {
						cx_ite = cx_ite.next;
						continue;
					}
					this.MRCA_chains(xarb.ws1,xarb.ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						if(i1.cbSet != cb1 && i1.cbSet != cb2) {
							cx_ite1 = cx_ite1.next;
							continue;
						}
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							if(i1.cbSet == cb1 && i2.cbSet != cb2 || i1.cbSet == cb2 && i2.cbSet != cb1) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = zpp_nape.phys.ZPP_Interactor.get(i1,i2);
							if(callbackset != null) {
								while(!(callbackset.arbiters.head == null)) {
									var arb = callbackset.arbiters.pop_unsafe();
									arb.present--;
								}
								this.remove_callbackset(callbackset);
							}
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
					cx_ite = cx_ite.next;
				}
			}
		}
	}
	,constraintCbBreak: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbSleep: function(con) {
		if(con.cbSet != null) {
			var cx_ite = con.cbSet.conlisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
				cb.constraint = con;
				cx_ite = cx_ite.next;
			}
		}
	}
	,constraintCbWake: function(con) {
		if(con.cbSet != null) {
			if(this.midstep) {
				var cx_ite = con.cbSet.conlisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.constraint = con;
					cx_ite = cx_ite.next;
				}
			} else con.component.woken = true;
		}
	}
	,bodyCbSleep: function(b) {
		if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			var cx_ite = b.cbSet.bodylisteners.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP) {
					cx_ite = cx_ite.next;
					continue;
				}
				var cb = this.push_callback(i);
				cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP;
				cb.body = b;
				cx_ite = cx_ite.next;
			}
		}
	}
	,bodyCbWake: function(b) {
		if(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC && b.cbSet != null) {
			if(this.midstep) {
				var cx_ite = b.cbSet.bodylisteners.head;
				while(cx_ite != null) {
					var i = cx_ite.elt;
					if(i.event != zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE) {
						cx_ite = cx_ite.next;
						continue;
					}
					var cb = this.push_callback(i);
					cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE;
					cb.body = b;
					cx_ite = cx_ite.next;
				}
			} else b.component.woken = true;
		}
	}
	,continuousEvent: function(s1,s2,stat,in_arb,_) {
		if(s1.body.sweepFrozen && s2.body.sweepFrozen) return in_arb;
		if(s1.body.disableCCD || s2.body.disableCCD) return in_arb;
		if(in_arb != null && in_arb.colarb == null || this.interactionType(s1,s2,s1.body,s2.body) <= 0) return in_arb;
		var b1 = s1.body;
		var b2 = s2.body;
		if(stat || b1.bullet || b2.bullet) {
			var toi;
			if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
				toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
				zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
				toi.next = null;
			}
			toi.failed = false;
			toi.s1 = toi.s2 = null;
			toi.arbiter = null;
			var kin = b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC || b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC;
			if(stat && !kin) {
				if(!(s1.body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC)) {
					toi.s2 = s1;
					toi.s1 = s2;
				} else {
					toi.s1 = s1;
					toi.s2 = s2;
				}
				toi.kinematic = false;
				zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			} else {
				toi.s1 = s1;
				toi.s2 = s2;
				toi.kinematic = kin;
				if(toi.s1.body.sweepFrozen || toi.s2.body.sweepFrozen) {
					if(toi.s1.body.sweepFrozen) {
						var tmp = toi.s1;
						toi.s1 = toi.s2;
						toi.s2 = tmp;
						toi.frozen1 = false;
						toi.frozen2 = true;
					}
					zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
				} else zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,this.pre_dt,0,nape.Config.collisionSlopCCD);
			}
			if(stat && toi.toi < 0 || toi.failed) {
				var o = toi;
				o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
				zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
			} else {
				this.toiEvents.add(toi);
				toi.frozen1 = toi.s1.body.sweepFrozen;
				toi.frozen2 = toi.s2.body.sweepFrozen;
				toi.arbiter = in_arb != null?in_arb.colarb:null;
			}
		}
		return in_arb;
	}
	,continuousCollisions: function(deltaTime) {
		var MAX_VEL = 2 * Math.PI / deltaTime;
		this.bphase.broadphase(this,false);
		var curTimeAlpha = 0.0;
		while(curTimeAlpha < 1 && !(this.toiEvents.head == null)) {
			var minTOI = null;
			var minTime = 2.0;
			var minKinematic = false;
			var preMin = null;
			var pre = null;
			var cx_ite = this.toiEvents.head;
			while(cx_ite != null) {
				var toi = cx_ite.elt;
				var b1 = toi.s1.body;
				var b2 = toi.s2.body;
				if(b1.sweepFrozen && b2.sweepFrozen) {
					if(toi.toi != 0 && zpp_nape.geom.ZPP_Collide.testCollide_safe(toi.s1,toi.s2)) toi.toi = 0; else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.frozen1 != b1.sweepFrozen || toi.frozen2 != b2.sweepFrozen) {
					if(!toi.kinematic) {
						toi.frozen1 = b1.sweepFrozen;
						toi.frozen2 = b2.sweepFrozen;
						if(toi.frozen1) {
							var tmp = toi.s1;
							toi.s1 = toi.s2;
							toi.s2 = tmp;
							toi.frozen1 = false;
							toi.frozen2 = true;
						}
						zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,nape.Config.collisionSlopCCD);
						if(toi.toi < 0) {
							cx_ite = this.toiEvents.erase(pre);
							var o = toi;
							o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
							zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
							continue;
						}
					} else {
						cx_ite = this.toiEvents.erase(pre);
						var o = toi;
						o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
						zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
						continue;
					}
				}
				if(toi.toi >= 0 && (toi.toi < minTime || !minKinematic && toi.kinematic)) {
					minTOI = toi;
					minTime = toi.toi;
					minKinematic = toi.kinematic;
					preMin = pre;
				}
				pre = cx_ite;
				cx_ite = cx_ite.next;
			}
			if(minTOI == null) break;
			this.toiEvents.erase(preMin);
			curTimeAlpha = minTOI.toi;
			var b1 = minTOI.s1.body;
			var b2 = minTOI.s2.body;
			if(!b1.sweepFrozen) {
				b1.sweepIntegrate(curTimeAlpha * deltaTime);
				b1.sweepValidate(minTOI.s1);
			}
			if(!b2.sweepFrozen) {
				b2.sweepIntegrate(curTimeAlpha * deltaTime);
				b2.sweepValidate(minTOI.s2);
			}
			var wasnull = minTOI.arbiter == null;
			var arb = this.narrowPhase(minTOI.s1,minTOI.s2,true,minTOI.arbiter,true);
			if(arb == null) {
				if(minTOI.arbiter != null && minTOI.arbiter.pair != null) {
					minTOI.arbiter.pair.arb = null;
					minTOI.arbiter.pair = null;
				}
			} else if(!this.presteparb(arb,deltaTime,true)) {
				if(arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0)) {
					arb.colarb.warmStart();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					arb.colarb.applyImpulseVel();
					b1.sweep_angvel = b1.angvel % MAX_VEL;
					b2.sweep_angvel = b2.angvel % MAX_VEL;
				}
			}
			if(arb != null && (arb.active && (arb.immState & zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT) != 0) && arb.type == zpp_nape.dynamics.ZPP_Arbiter.COL) {
				if(!b1.sweepFrozen && !(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
					b1.sweepFrozen = true;
					if(minTOI.failed) b1.angvel = b1.sweep_angvel = 0; else if(minTOI.slipped) b1.angvel = b1.sweep_angvel *= nape.Config.angularCCDSlipScale; else b1.angvel = b1.sweep_angvel;
				}
				if(!b2.sweepFrozen && !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC)) {
					b2.sweepFrozen = true;
					if(minTOI.failed) b2.angvel = b2.sweep_angvel = 0; else if(minTOI.slipped) b2.angvel = b2.sweep_angvel *= nape.Config.angularCCDSlipScale; else b2.angvel = b2.sweep_angvel;
				}
			}
		}
		while(!(this.toiEvents.head == null)) {
			var toi = this.toiEvents.pop_unsafe();
			var o = toi;
			o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
		}
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			if(!cur.sweepFrozen) cur.sweepIntegrate(deltaTime);
			cur.sweepTime = 0;
			cx_ite = cx_ite.next;
		}
	}
	,step: function(deltaTime,velocityIterations,positionIterations) {
		var _g = this;
		if(this.midstep) throw "Error: ... REALLY?? you're going to call space.step() inside of space.step()? COME ON!!";
		this.time += deltaTime;
		this.pre_dt = deltaTime;
		this.midstep = true;
		this.stamp++;
		this.validation();
		this.bphase.broadphase(this,true);
		this.prestep(deltaTime);
		if(this.sortcontacts) {
			var xxlist = this.c_arbiters_false;
			if(!(xxlist.head == null) && xxlist.head.next != null) {
				var head = xxlist.head;
				var tail = null;
				var left = null;
				var right = null;
				var nxt = null;
				var listSize = 1;
				var numMerges, leftSize, rightSize;
				do {
					numMerges = 0;
					left = head;
					tail = head = null;
					while(left != null) {
						numMerges++;
						right = left;
						leftSize = 0;
						rightSize = listSize;
						while(right != null && leftSize < listSize) {
							leftSize++;
							right = right.next;
						}
						while(leftSize > 0 || rightSize > 0 && right != null) {
							if(leftSize == 0) {
								nxt = right;
								right = right.next;
								rightSize--;
							} else if(rightSize == 0 || right == null) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else if(left.elt.active && right.elt.active?left.elt.oc1.dist < right.elt.oc1.dist:true) {
								nxt = left;
								left = left.next;
								leftSize--;
							} else {
								nxt = right;
								right = right.next;
								rightSize--;
							}
							if(tail != null) tail.next = nxt; else head = nxt;
							tail = nxt;
						}
						left = right;
					}
					tail.next = null;
					listSize <<= 1;
				} while(numMerges > 1);
				xxlist.head = head;
				xxlist.modified = true;
				xxlist.pushmod = true;
			}
		}
		this.updateVel(deltaTime);
		this.warmStart();
		this.iterateVel(velocityIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			cur.pre_posx = cur.posx;
			cur.pre_posy = cur.posy;
			cur.pre_rot = cur.rot;
			cx_ite = cx_ite.next;
		}
		this.updatePos(deltaTime);
		this.continuous = true;
		this.continuousCollisions(deltaTime);
		this.continuous = false;
		this.iteratePos(positionIterations);
		var cx_ite = this.kinematics.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			var upos = !(cur.posx == cur.pre_posx && cur.posy == cur.pre_posy);
			var urot = cur.pre_rot != cur.rot;
			if(upos) cur.invalidate_pos();
			if(urot) cur.invalidate_rot();
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.live.head;
		while(cx_ite != null) {
			var cur = cx_ite.elt;
			var upos = !(cur.posx == cur.pre_posx && cur.posy == cur.pre_posy);
			var urot = cur.pre_rot != cur.rot;
			if(upos) cur.invalidate_pos();
			if(urot) cur.invalidate_rot();
			cx_ite = cx_ite.next;
		}
		var pre = null;
		var cx_ite = this.staticsleep.head;
		while(cx_ite != null) {
			var b = cx_ite.elt;
			if(!(b.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) || b.velx == 0 && b.vely == 0 && b.angvel == 0) {
				if(b.kinematicDelaySleep) {
					b.kinematicDelaySleep = false;
					cx_ite = cx_ite.next;
					continue;
				}
				b.component.sleeping = true;
				cx_ite = this.staticsleep.inlined_erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.doForests(deltaTime);
		this.sleepArbiters();
		this.midstep = false;
		var pre1 = null;
		var cx_ite = this.callbackset_list.next;
		while(cx_ite != null) {
			var set = [cx_ite];
			if(set[0].arbiters.head == null) {
				cx_ite = this.callbackset_list.inlined_erase(pre1);
				var inf = set[0].int1.id + " " + set[0].int2.id;
				var o = set[0];
				o.int1 = o.int2 = null;
				o.id = o.di = -1;
				o.freed = true;
				null;
				o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
				zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
				continue;
			}
			var sleeping = [set[0].sleeping()];
			zpp_nape.callbacks.ZPP_CbSet.find_all(set[0].int1.cbSet,set[0].int2.cbSet,zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING,(function(sleeping,set) {
				return function(x) {
					if((!sleeping[0] || x.allowSleepingCallbacks) && !set[0].empty_arb(x.itype)) {
						var cb = _g.push_callback(x);
						cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING;
						zpp_nape.phys.ZPP_Interactor.int_callback(set[0],x,cb);
						cb.set = set[0];
					}
				};
			})(sleeping,set));
			pre1 = cx_ite;
			cx_ite = cx_ite.next;
		}
		while(!this.callbacks.empty()) {
			var cb = this.callbacks.pop();
			if(cb.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_BODY) {
				var o = cb.listener.body;
				o.handler(cb.wrapper_body());
			} else if(cb.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT) {
				var o = cb.listener.constraint;
				o.handler(cb.wrapper_con());
			} else if(cb.listener.type == zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION) {
				var o = cb.listener.interaction;
				o.handleri(cb.wrapper_int());
			}
			var o = cb;
			o.int1 = o.int2 = null;
			o.body = null;
			o.constraint = null;
			o.listener = null;
			if(o.wrap_arbiters != null) o.wrap_arbiters.zpp_inner.inner = null;
			o.set = null;
			o.next = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = o;
		}
	}
	,push_callback: function(i) {
		var cb;
		if(zpp_nape.callbacks.ZPP_Callback.zpp_pool == null) cb = new zpp_nape.callbacks.ZPP_Callback(); else {
			cb = zpp_nape.callbacks.ZPP_Callback.zpp_pool;
			zpp_nape.callbacks.ZPP_Callback.zpp_pool = cb.next;
			cb.next = null;
		}
		null;
		this.callbacks.push(cb);
		cb.listener = i;
		return cb;
	}
	,convexMultiCast: function(shape,deltaTime,filter,dynamics,output) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
			aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x > y?x:y;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x = prey;
			var y = posty;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x = prey;
			var y = posty;
			$r = x > y?x:y;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		var ret = output == null?new nape.geom.ConvexResultList():output;
		var $it0 = (function($this) {
			var $r;
			list.zpp_inner.valmod();
			$r = nape.shape.ShapeIterator.get(list);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var s = $it0.next();
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0) {
					var res = zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-toi.axis.x,-toi.axis.y,null),nape.geom.Vec2.get(toi.c2.x,toi.c2.y,null),toi.toi,s);
					var pre = null;
					var cx_ite = ret.zpp_inner.inner.head;
					while(cx_ite != null) {
						var j = cx_ite.elt;
						if((function($this) {
							var $r;
							if(res.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							$r = res.zpp_inner.toiDistance;
							return $r;
						}(this)) < (function($this) {
							var $r;
							if(j.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
							$r = j.zpp_inner.toiDistance;
							return $r;
						}(this))) break;
						pre = cx_ite;
						cx_ite = cx_ite.next;
					}
					ret.zpp_inner.inner.inlined_insert(pre,res);
				}
			}
		}
		list.clear();
		var o = toi;
		o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		return ret;
	}
	,prepareCast: function(s) {
		if(s.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) s.circle.validate_worldCOM(); else s.polygon.validate_gaxi();
	}
	,convexCast: function(shape,deltaTime,filter,dynamics) {
		var toi;
		if(zpp_nape.geom.ZPP_ToiEvent.zpp_pool == null) toi = new zpp_nape.geom.ZPP_ToiEvent(); else {
			toi = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
			zpp_nape.geom.ZPP_ToiEvent.zpp_pool = toi.next;
			toi.next = null;
		}
		toi.failed = false;
		toi.s1 = toi.s2 = null;
		toi.arbiter = null;
		if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.validate_worldCOM(); else shape.polygon.validate_gaxi();
		var body = shape.body;
		var prex = body.posx;
		var prey = body.posy;
		body.sweepTime = 0;
		body.sweep_angvel = body.angvel;
		body.sweepIntegrate(deltaTime);
		var postx = body.posx;
		var posty = body.posy;
		shape.validate_sweepRadius();
		var rad = shape.sweepRadius;
		var aabb;
		if(zpp_nape.geom.ZPP_AABB.zpp_pool == null) aabb = new zpp_nape.geom.ZPP_AABB(); else {
			aabb = zpp_nape.geom.ZPP_AABB.zpp_pool;
			zpp_nape.geom.ZPP_AABB.zpp_pool = aabb.next;
			aabb.next = null;
		}
		null;
		aabb.minx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxx = (function($this) {
			var $r;
			var x = prex;
			var y = postx;
			$r = x > y?x:y;
			return $r;
		}(this)) + rad;
		aabb.miny = (function($this) {
			var $r;
			var x = prey;
			var y = posty;
			$r = x < y?x:y;
			return $r;
		}(this)) - rad;
		aabb.maxy = (function($this) {
			var $r;
			var x = prey;
			var y = posty;
			$r = x > y?x:y;
			return $r;
		}(this)) + rad;
		var list = this.convexShapeList = this.bphase.shapesInAABB(aabb,false,false,filter == null?null:filter.zpp_inner,this.convexShapeList);
		var o = aabb;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		var minAxisx = 0.0;
		var minAxisy = 0.0;
		minAxisx = 0;
		minAxisy = 0;
		var minPosx = 0.0;
		var minPosy = 0.0;
		minPosx = 0;
		minPosy = 0;
		var mins = null;
		var mint = deltaTime + 1;
		var $it0 = (function($this) {
			var $r;
			list.zpp_inner.valmod();
			$r = nape.shape.ShapeIterator.get(list);
			return $r;
		}(this));
		while( $it0.hasNext() ) {
			var s = $it0.next();
			if(s != shape.outer && (s.zpp_inner.body != null?s.zpp_inner.body.outer:null) != body.outer) {
				toi.s1 = shape;
				toi.s2 = s.zpp_inner;
				if(dynamics) {
					s.zpp_inner.validate_sweepRadius();
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweep_angvel = (s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.angvel;
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepTime = 0;
					zpp_nape.geom.ZPP_SweepDistance.dynamicSweep(toi,deltaTime,0,0,true);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepIntegrate(0);
					(s.zpp_inner.body != null?s.zpp_inner.body.outer:null).zpp_inner.sweepValidate(s.zpp_inner);
				} else zpp_nape.geom.ZPP_SweepDistance.staticSweep(toi,deltaTime,0,0);
				toi.toi *= deltaTime;
				if(toi.toi > 0 && toi.toi < mint) {
					mint = toi.toi;
					minAxisx = toi.axis.x;
					minAxisy = toi.axis.y;
					minPosx = toi.c2.x;
					minPosy = toi.c2.y;
					mins = s;
				}
			}
		}
		list.clear();
		var o = toi;
		o.next = zpp_nape.geom.ZPP_ToiEvent.zpp_pool;
		zpp_nape.geom.ZPP_ToiEvent.zpp_pool = o;
		body.sweepIntegrate(0);
		body.sweepValidate(shape);
		if(mint <= deltaTime) return zpp_nape.geom.ZPP_ConvexRayResult.getConvex(nape.geom.Vec2.get(-minAxisx,-minAxisy,null),nape.geom.Vec2.get(minPosx,minPosy,null),mint,mins); else return null;
	}
	,rayMultiCast: function(ray,inner,filter,output) {
		return this.bphase.rayMultiCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner,output);
	}
	,rayCast: function(ray,inner,filter) {
		return this.bphase.rayCast(ray.zpp_inner,inner,filter == null?null:filter.zpp_inner);
	}
	,bodiesInShape: function(shape,cont,filter,output) {
		return this.bphase.bodiesInShape(shape,cont,filter,output);
	}
	,shapesInShape: function(shape,cont,filter,output) {
		return this.bphase.shapesInShape(shape,cont,filter,output);
	}
	,bodiesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.bodiesInCircle((function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,shapesInCircle: function(pos,rad,cont,filter,output) {
		return this.bphase.shapesInCircle((function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.x;
			return $r;
		}(this)),(function($this) {
			var $r;
			if(pos != null && pos.zpp_disp) throw "Error: " + "Vec2" + " has been disposed and cannot be used!";
			pos.zpp_inner.validate();
			$r = pos.zpp_inner.y;
			return $r;
		}(this)),rad,cont,filter,output);
	}
	,bodiesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.bodiesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,shapesInAABB: function(aabb,strict,cont,filter,output) {
		return this.bphase.shapesInAABB(aabb.zpp_inner,strict,cont,filter,output);
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		return this.bphase.bodiesUnderPoint(x,y,filter,output);
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		return this.bphase.shapesUnderPoint(x,y,filter,output);
	}
	,remBody: function(body,flag) {
		if(flag == null) flag = -1;
		if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.staticsleep.remove(body);
		} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.live.remove(body);
		} else {
			if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.remove(body);
			var o = body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,true);
			}
			this.staticsleep.remove(body);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.removed_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		body.removedFromSpace();
		body.space = null;
	}
	,addBody: function(body,flag) {
		if(flag == null) flag = -1;
		body.space = this;
		body.addedToSpace();
		body.component.sleeping = true;
		var o = body;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
		var cx_ite = body.shapes.head;
		while(cx_ite != null) {
			var shape = cx_ite.elt;
			this.added_shape(shape,true);
			cx_ite = cx_ite.next;
		}
		if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
			this.static_validation(body);
		} else if(body.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
		} else {
			if(flag != zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(body);
		}
	}
	,remCompound: function(x) {
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.constraints.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remConstraint(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.remCompound(i);
			cx_ite = cx_ite.next;
		}
		x.removedFromSpace();
		x.space = null;
	}
	,addCompound: function(x) {
		x.space = this;
		x.addedToSpace();
		var cx_ite = x.bodies.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addBody(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.constraints.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addConstraint(i);
			cx_ite = cx_ite.next;
		}
		var cx_ite = x.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.addCompound(i);
			cx_ite = cx_ite.next;
		}
	}
	,remConstraint: function(con) {
		if(con.active) {
			this.wake_constraint(con,true);
			this.live_constraints.remove(con);
		}
		con.removedFromSpace();
		con.space = null;
	}
	,addConstraint: function(con) {
		con.space = this;
		con.addedToSpace();
		if(con.active) {
			con.component.sleeping = true;
			this.wake_constraint(con,true);
		}
	}
	,removed_shape: function(s,deleting) {
		if(deleting == null) deleting = false;
		var _g = this;
		var body = s.body;
		if(!deleting) body.wake();
		var pre = null;
		var cx_ite = body.arbiters.head;
		while(cx_ite != null) {
			var xarb = [cx_ite.elt];
			var rem = xarb[0].ws1 == s || xarb[0].ws2 == s;
			if(rem) {
				if(xarb[0].present != 0) {
					this.MRCA_chains(xarb[0].ws1,xarb[0].ws2);
					var cx_ite1 = this.mrca1.head;
					while(cx_ite1 != null) {
						var i1 = cx_ite1.elt;
						var cx_ite2 = this.mrca2.head;
						while(cx_ite2 != null) {
							var i2 = cx_ite2.elt;
							var cb1 = i1.cbSet;
							var cb2 = i2.cbSet;
							cb1.validate();
							cb2.validate();
							if(cb1.manager.pair(cb1,cb2).listeners.head == null) {
								cx_ite2 = cx_ite2.next;
								continue;
							}
							var callbackset = [zpp_nape.phys.ZPP_Interactor.get(i1,i2)];
							callbackset[0].remove_arb(xarb[0]);
							xarb[0].present--;
							cb1.manager.pair(cb1,cb2).forall(zpp_nape.util.ZPP_Flags.id_CbEvent_END,(function(callbackset,xarb) {
								return function(listener) {
									if((listener.itype & xarb[0].type) != 0 && callbackset[0].empty_arb(listener.itype)) {
										var cb = _g.push_callback(listener);
										cb.event = zpp_nape.util.ZPP_Flags.id_CbEvent_END;
										zpp_nape.phys.ZPP_Interactor.int_callback(callbackset[0],listener,cb);
										cb.set = callbackset[0];
									}
								};
							})(callbackset,xarb));
							if(callbackset[0].arbiters.head == null) this.remove_callbackset(callbackset[0]);
							cx_ite2 = cx_ite2.next;
						}
						cx_ite1 = cx_ite1.next;
					}
				}
				if(xarb[0].b1 != body && xarb[0].b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var o = xarb[0].b1;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep?0:1);
						if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
						if(o.component.sleeping) this.really_wake(o,false);
					}
				}
				if(xarb[0].b2 != body && xarb[0].b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) {
					var o = xarb[0].b2;
					if(!o.world) {
						o.component.waket = this.stamp + (this.midstep?0:1);
						if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
						if(o.component.sleeping) this.really_wake(o,false);
					}
				}
				xarb[0].cleared = true;
				if(body == null || xarb[0].b2 == body) xarb[0].b1.arbiters.inlined_try_remove(xarb[0]);
				if(body == null || xarb[0].b1 == body) xarb[0].b2.arbiters.inlined_try_remove(xarb[0]);
				if(xarb[0].pair != null) {
					xarb[0].pair.arb = null;
					xarb[0].pair = null;
				}
				xarb[0].active = false;
				this.f_arbiters.modified = true;
				cx_ite = body.arbiters.erase(pre);
				continue;
			}
			pre = cx_ite;
			cx_ite = cx_ite.next;
		}
		this.bphase.remove(s);
		s.removedFromSpace();
	}
	,added_shape: function(s,dontwake) {
		if(dontwake == null) dontwake = false;
		if(!dontwake) {
			var o = s.body;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
		}
		this.bphase.insert(s);
		s.addedToSpace();
	}
	,transmitType: function(p,new_type) {
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,false);
		}
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) this.live.remove(p); else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) {
			this.kinematics.remove(p);
			this.staticsleep.remove(p);
		} else if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.staticsleep.remove(p);
		p.type = new_type;
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) this.kinematics.add(p);
		if(p.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) this.static_validation(p);
		p.component.sleeping = true;
		var o = p;
		if(!o.world) {
			o.component.waket = this.stamp + (this.midstep?0:1);
			if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
			if(o.component.sleeping) this.really_wake(o,true);
		}
	}
	,remove_callbackset: function(cb) {
		cb.lazydel = true;
		cb.int1.cbsets.inlined_try_remove(cb);
		cb.int2.cbsets.inlined_try_remove(cb);
	}
	,add_callbackset: function(cb) {
		cb.int1.cbsets.inlined_add(cb);
		cb.int2.cbsets.inlined_add(cb);
		this.callbackset_list.inlined_add(cb);
	}
	,remListener: function(x) {
		if(x.interaction != null) null;
		x.removedFromSpace();
		x.space = null;
	}
	,addListener: function(x) {
		x.space = this;
		x.addedToSpace();
		if(x.interaction != null) null;
	}
	,unrevoke_listener: function(x) {
	}
	,revoke_listener: function(x) {
	}
	,listeners_modifiable: function() {
		if(this.midstep) throw "Error: Space::listeners cannot be set during space step()";
	}
	,listeners_subber: function(x) {
		this.remListener(x.zpp_inner);
	}
	,listeners_adder: function(x) {
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_listeners.remove(x);
			this.addListener(x.zpp_inner);
			return true;
		} else return false;
	}
	,constraints_modifiable: function() {
		if(this.midstep) throw "Error: Space::constraints cannot be set during space step()";
	}
	,constraints_subber: function(x) {
		this.remConstraint(x.zpp_inner);
	}
	,constraints_adder: function(x) {
		if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of a Constraint belonging to a Compound, only the root Compound space can be set";
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_constraints.remove(x);
			this.addConstraint(x.zpp_inner);
			return true;
		} else return false;
	}
	,compounds_modifiable: function() {
		if(this.midstep) throw "Error: Space::compounds cannot be set during space step()";
	}
	,compounds_subber: function(x) {
		this.remCompound(x.zpp_inner);
	}
	,compounds_adder: function(x) {
		if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of an inner Compound, only the root Compound space can be set";
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.wrap_compounds.remove(x);
			this.addCompound(x.zpp_inner);
			return true;
		} else return false;
	}
	,bodies_modifiable: function() {
		if(this.midstep) throw "Error: Space::bodies cannot be set during space step()";
	}
	,bodies_subber: function(x) {
		this.remBody(x.zpp_inner);
	}
	,bodies_adder: function(x) {
		if(x.zpp_inner.compound != null) throw "Error: Cannot set the space of a Body belonging to a Compound, only the root Compound space can be set";
		if(x.zpp_inner.space != this) {
			if(x.zpp_inner.space != null) x.zpp_inner.space.outer.zpp_inner.wrap_bodies.remove(x);
			this.addBody(x.zpp_inner);
			return true;
		} else return false;
	}
	,clear: function() {
		while(!(this.listeners.head == null)) {
			var c = this.listeners.pop_unsafe();
			this.remListener(c);
		}
		while(!(this.callbackset_list.next == null)) {
			var c = this.callbackset_list.pop_unsafe();
			c.arbiters.clear();
			var o = c;
			o.int1 = o.int2 = null;
			o.id = o.di = -1;
			o.freed = true;
			null;
			o.next = zpp_nape.space.ZPP_CallbackSet.zpp_pool;
			zpp_nape.space.ZPP_CallbackSet.zpp_pool = o;
		}
		while(!(this.c_arbiters_true.head == null)) {
			var arb = this.c_arbiters_true.pop_unsafe();
			arb.retire();
		}
		while(!(this.c_arbiters_false.head == null)) {
			var arb = this.c_arbiters_false.pop_unsafe();
			arb.retire();
		}
		while(!(this.s_arbiters.head == null)) {
			var arb = this.s_arbiters.pop_unsafe();
			arb.retire();
		}
		while(!(this.f_arbiters.head == null)) {
			var arb = this.f_arbiters.pop_unsafe();
			arb.retire();
		}
		this.bphase.clear();
		while(!(this.bodies.head == null)) {
			var b = this.bodies.pop_unsafe();
			if(b.component != null) {
				var i = b.component.island;
				if(i != null) {
					while(!(i.comps.head == null)) {
						var c = i.comps.pop_unsafe();
						c.sleeping = false;
						c.island = null;
						c.parent = c;
						c.rank = 0;
					}
					var o = i;
					o.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o;
				}
			}
			b.removedFromSpace();
			b.space = null;
		}
		while(!(this.constraints.head == null)) {
			var c = this.constraints.pop_unsafe();
			if(c.component != null) {
				var i = c.component.island;
				if(i != null) {
					while(!(i.comps.head == null)) {
						var c1 = i.comps.pop_unsafe();
						c1.sleeping = false;
						c1.island = null;
						c1.parent = c1;
						c1.rank = 0;
					}
					var o = i;
					o.next = zpp_nape.space.ZPP_Island.zpp_pool;
					zpp_nape.space.ZPP_Island.zpp_pool = o;
				}
			}
			c.removedFromSpace();
			c.space = null;
		}
		this.kinematics.clear();
		var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
		while(!(this.compounds.head == null)) {
			var c = this.compounds.pop_unsafe();
			stack.add(c);
		}
		while(!(stack.head == null)) {
			var comp = stack.pop_unsafe();
			comp.removedFromSpace();
			comp.space = null;
			var cx_ite = comp.bodies.head;
			while(cx_ite != null) {
				var b = cx_ite.elt;
				if(b.component != null) {
					var i = b.component.island;
					if(i != null) {
						while(!(i.comps.head == null)) {
							var c = i.comps.pop_unsafe();
							c.sleeping = false;
							c.island = null;
							c.parent = c;
							c.rank = 0;
						}
						var o = i;
						o.next = zpp_nape.space.ZPP_Island.zpp_pool;
						zpp_nape.space.ZPP_Island.zpp_pool = o;
					}
				}
				b.removedFromSpace();
				b.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite = comp.constraints.head;
			while(cx_ite != null) {
				var c = cx_ite.elt;
				if(c.component != null) {
					var i = c.component.island;
					if(i != null) {
						while(!(i.comps.head == null)) {
							var c1 = i.comps.pop_unsafe();
							c1.sleeping = false;
							c1.island = null;
							c1.parent = c1;
							c1.rank = 0;
						}
						var o = i;
						o.next = zpp_nape.space.ZPP_Island.zpp_pool;
						zpp_nape.space.ZPP_Island.zpp_pool = o;
					}
				}
				c.removedFromSpace();
				c.space = null;
				cx_ite = cx_ite.next;
			}
			var cx_ite = comp.compounds.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				stack.add(i);
				cx_ite = cx_ite.next;
			}
		}
		this.staticsleep.clear();
		this.live.clear();
		this.live_constraints.clear();
		this.stamp = 0;
		this.time = 0.0;
		this.mrca1.clear();
		this.mrca2.clear();
		this.prelisteners.clear();
		this.cbsets.clear();
	}
	,gravity_validate: function() {
		this.wrap_gravity.zpp_inner.x = this.gravityx;
		this.wrap_gravity.zpp_inner.y = this.gravityy;
	}
	,gravity_invalidate: function(x) {
		if(this.midstep) throw "Error: Space::gravity cannot be set during space step";
		this.gravityx = x.x;
		this.gravityy = x.y;
		var stack = new zpp_nape.util.ZNPList_ZPP_Compound();
		var cx_ite = this.bodies.head;
		while(cx_ite != null) {
			var x1 = cx_ite.elt;
			var o = x1;
			if(!o.world) {
				o.component.waket = this.stamp + (this.midstep?0:1);
				if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
				if(o.component.sleeping) this.really_wake(o,false);
			}
			cx_ite = cx_ite.next;
		}
		var cx_ite = this.compounds.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			stack.add(i);
			cx_ite = cx_ite.next;
		}
		while(!(stack.head == null)) {
			var s = stack.pop_unsafe();
			var cx_ite = s.bodies.head;
			while(cx_ite != null) {
				var x1 = cx_ite.elt;
				var o = x1;
				if(!o.world) {
					o.component.waket = this.stamp + (this.midstep?0:1);
					if(o.type == zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC) o.kinematicDelaySleep = true;
					if(o.component.sleeping) this.really_wake(o,false);
				}
				cx_ite = cx_ite.next;
			}
			var cx_ite = s.compounds.head;
			while(cx_ite != null) {
				var i = cx_ite.elt;
				stack.add(i);
				cx_ite = cx_ite.next;
			}
		}
	}
	,getgravity: function() {
		this.wrap_gravity = nape.geom.Vec2.get(this.gravityx,this.gravityy,null);
		this.wrap_gravity.zpp_inner._inuse = true;
		this.wrap_gravity.zpp_inner._invalidate = $bind(this,this.gravity_invalidate);
		this.wrap_gravity.zpp_inner._validate = $bind(this,this.gravity_validate);
	}
	,__class__: zpp_nape.space.ZPP_Space
}
zpp_nape.space.ZPP_SweepData = function() {
	this.aabb = null;
	this.shape = null;
	this.prev = null;
	this.next = null;
};
zpp_nape.space.ZPP_SweepData.__name__ = ["zpp_nape","space","ZPP_SweepData"];
zpp_nape.space.ZPP_SweepData.prototype = {
	gt: function(x) {
		return this.aabb.minx > x.aabb.minx;
	}
	,alloc: function() {
	}
	,free: function() {
		this.prev = null;
		this.shape = null;
		this.aabb = null;
	}
	,__class__: zpp_nape.space.ZPP_SweepData
}
zpp_nape.space.ZPP_SweepPhase = function(space) {
	this.failed = null;
	this.list = null;
	this.space = space;
	this.is_sweep = true;
	this.sweep = this;
};
zpp_nape.space.ZPP_SweepPhase.__name__ = ["zpp_nape","space","ZPP_SweepPhase"];
zpp_nape.space.ZPP_SweepPhase.__super__ = zpp_nape.space.ZPP_Broadphase;
zpp_nape.space.ZPP_SweepPhase.prototype = $extend(zpp_nape.space.ZPP_Broadphase.prototype,{
	rayMultiCast: function(ray,inner,filter,output) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var ret = output == null?new nape.geom.RayResultList():output;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a = this.list;
			var b = null;
			while(a != null && a.aabb.minx <= rayab.maxx) {
				b = a;
				a = a.next;
			}
			a = b;
			while(a != null) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.prev;
			}
		} else {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.maxx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0) {
						if(a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) ray.circlesect2(a.shape.circle,inner,ret); else ray.polysect2(a.shape.polygon,inner,ret);
					}
				}
				a = a.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		return ret;
	}
	,rayCast: function(ray,inner,filter) {
		this.sync_broadphase();
		ray.validate_dir();
		var rayab = ray.rayAABB();
		var mint = ray.maxdist;
		var minres = null;
		if(ray.dirx == 0) {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.minx) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result = a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							mint = (function($this) {
								var $r;
								if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								$r = result.zpp_inner.toiDistance;
								return $r;
							}(this));
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								minres.zpp_inner.free();
							}
							minres = result;
						}
					}
				}
				a = a.next;
			}
		} else if(ray.dirx < 0) {
			var a = this.list;
			var b = null;
			while(a != null && a.aabb.minx <= rayab.maxx) {
				b = a;
				a = a.next;
			}
			a = b;
			while(a != null) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result = a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							mint = (function($this) {
								var $r;
								if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								$r = result.zpp_inner.toiDistance;
								return $r;
							}(this));
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								minres.zpp_inner.free();
							}
							minres = result;
						}
					}
				}
				a = a.prev;
			}
		} else {
			var a = this.list;
			while(a != null && a.aabb.minx <= rayab.maxx && a.aabb.minx < ray.originx + ray.dirx * mint) {
				if(a.aabb.intersect(rayab) && (filter == null || a.shape.filter.shouldCollide(filter))) {
					var t = ray.aabbsect(a.aabb);
					if(t >= 0 && t < mint) {
						var result = a.shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE?ray.circlesect(a.shape.circle,inner,mint):ray.polysect(a.shape.polygon,inner,mint);
						if(result != null) {
							mint = (function($this) {
								var $r;
								if(result.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								$r = result.zpp_inner.toiDistance;
								return $r;
							}(this));
							if(minres != null) {
								if(minres.zpp_inner.next != null) throw "Error: This object has been disposed of and cannot be used";
								minres.zpp_inner.free();
							}
							minres = result;
						}
					}
				}
				a = a.next;
			}
		}
		var o = rayab;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o.wrap_min = o.wrap_max = null;
		o._invalidate = null;
		o._validate = null;
		o.next = zpp_nape.geom.ZPP_AABB.zpp_pool;
		zpp_nape.geom.ZPP_AABB.zpp_pool = o;
		return minres;
	}
	,bodiesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				var body = shape2.body.outer;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(shape,shape2);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,shape2)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInShape: function(shape,containment,filter,output) {
		this.sync_broadphase();
		this.validateShape(shape);
		var ab = shape.aabb;
		var ret = output == null?new nape.shape.ShapeList():output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape2 = a.shape;
				if(filter == null || shape2.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(shape,shape2)) ret.push(shape2.outer);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape2,shape)) ret.push(shape2.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(!this.failed.has(body)) {
							var col = zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInCircle: function(x,y,r,containment,filter,output) {
		this.sync_broadphase();
		this.updateCircShape(x,y,r);
		var ab = this.circShape.zpp_inner.aabb;
		var ret = output == null?new nape.shape.ShapeList():output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			if(a.aabb.intersect(ab)) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.circShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.circShape.zpp_inner)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret = output == null?new nape.phys.BodyList():output;
		if(this.failed == null) this.failed = new nape.phys.BodyList();
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			var body = shape.body.outer;
			if(a.aabb.intersect(ab)) {
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(strict) {
						if(containment) {
							if(!this.failed.has(body)) {
								var col = zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape);
								if(!ret.has(body) && col) ret.push(body); else if(!col) {
									ret.remove(body);
									this.failed.push(body);
								}
							}
						} else if(!ret.has(body) && zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(body);
					} else if(containment) {
						if(!this.failed.has(body)) {
							var col = ab.contains(shape.aabb);
							if(!ret.has(body) && col) ret.push(body); else if(!col) {
								ret.remove(body);
								this.failed.push(body);
							}
						}
					} else if(!ret.has(body) && ab.contains(shape.aabb)) ret.push(body);
				}
			}
			a = a.next;
		}
		this.failed.clear();
		return ret;
	}
	,shapesInAABB: function(aabb,strict,containment,filter,output) {
		this.sync_broadphase();
		this.updateAABBShape(aabb);
		var ab = this.aabbShape.zpp_inner.aabb;
		var ret = output == null?new nape.shape.ShapeList():output;
		var a = this.list;
		while(a != null && a.aabb.maxx < ab.minx) a = a.next;
		while(a != null && a.aabb.minx <= ab.maxx) {
			var shape = a.shape;
			if(filter == null || shape.filter.shouldCollide(filter)) {
				if(strict) {
					if(containment) {
						if(zpp_nape.geom.ZPP_Collide.containTest(this.aabbShape.zpp_inner,shape)) ret.push(shape.outer);
					} else if(ab.contains(a.aabb)) ret.push(shape.outer); else if(a.aabb.intersect(ab)) {
						if(zpp_nape.geom.ZPP_Collide.testCollide_safe(shape,this.aabbShape.zpp_inner)) ret.push(shape.outer);
					}
				} else if(containment?ab.contains(a.aabb):a.aabb.intersect(ab)) ret.push(shape.outer);
			}
			a = a.next;
		}
		return ret;
	}
	,bodiesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret = output == null?new nape.phys.BodyList():output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				var body = shape.body.outer;
				if(!ret.has(body)) {
					if(filter == null || shape.filter.shouldCollide(filter)) {
						if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
							if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(body);
						} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(body);
					}
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,shapesUnderPoint: function(x,y,filter,output) {
		this.sync_broadphase();
		var v = zpp_nape.geom.ZPP_Vec2.get(x,y,null);
		var ret = output == null?new nape.shape.ShapeList():output;
		var a = this.list;
		while(a != null && a.aabb.minx > x) a = a.next;
		while(a != null && a.aabb.minx <= x) {
			if(a.aabb.maxx >= x && a.aabb.miny <= y && a.aabb.maxy >= y) {
				var shape = a.shape;
				if(filter == null || shape.filter.shouldCollide(filter)) {
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) {
						if(zpp_nape.geom.ZPP_Collide.circleContains(shape.circle,v)) ret.push(shape.outer);
					} else if(zpp_nape.geom.ZPP_Collide.polyContains(shape.polygon,v)) ret.push(shape.outer);
				}
			}
			a = a.next;
		}
		var o = v;
		if(o.outer != null) {
			o.outer.zpp_inner = null;
			o.outer = null;
		}
		o._isimmutable = null;
		o._validate = null;
		o._invalidate = null;
		o.next = zpp_nape.geom.ZPP_Vec2.zpp_pool;
		zpp_nape.geom.ZPP_Vec2.zpp_pool = o;
		return ret;
	}
	,clear: function() {
		while(this.list != null) {
			this.list.shape.removedFromSpace();
			this.__remove(this.list.shape);
		}
	}
	,broadphase: function(space,discrete) {
		if(this.list != null) {
			this.sync_broadphase_fast();
			var d1 = this.list;
			while(d1 != null) {
				var d2 = d1.next;
				var s1 = d1.shape;
				var b1 = s1.body;
				var bottom = d1.aabb.maxx;
				while(d2 != null) {
					if(d2.aabb.minx > bottom) break;
					var s2 = d2.shape;
					var b2 = s2.body;
					if(b2 == b1) {
						d2 = d2.next;
						continue;
					}
					if(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC && b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_STATIC) {
						d2 = d2.next;
						continue;
					}
					if(b1.component.sleeping && b2.component.sleeping) {
						d2 = d2.next;
						continue;
					}
					if(s1.aabb.intersectY(s2.aabb)) {
						if(discrete) space.narrowPhase(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false); else space.continuousEvent(s1,s2,!(b1.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC) || !(b2.type == zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC),null,false);
					}
					d2 = d2.next;
				}
				d1 = d1.next;
			}
		}
	}
	,sync_broadphase_fast: function() {
		var a = this.list.next;
		while(a != null) {
			var n = a.next;
			var b = a.prev;
			if(a.aabb.minx > b.aabb.minx) {
				a = n;
				continue;
			}
			while(b.prev != null && b.prev.aabb.minx > a.aabb.minx) b = b.prev;
			var prev = a.prev;
			prev.next = a.next;
			if(a.next != null) a.next.prev = prev;
			if(b.prev == null) {
				a.prev = null;
				this.list = a;
				a.next = b;
				b.prev = a;
			} else {
				a.prev = b.prev;
				b.prev = a;
				a.prev.next = a;
				a.next = b;
			}
			a = n;
		}
	}
	,sync_broadphase: function() {
		this.space.validation();
		if(this.list != null) this.sync_broadphase_fast();
	}
	,__sync: function(shape) {
		if(!this.space.continuous) {
			if(shape.zip_aabb) {
				if(shape.body != null) {
					shape.zip_aabb = false;
					if(shape.type == zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE) shape.circle.__validate_aabb(); else shape.polygon.__validate_aabb();
				}
			}
		}
	}
	,__remove: function(shape) {
		var dat = shape.sweep;
		if(dat.prev == null) this.list = dat.next; else dat.prev.next = dat.next;
		if(dat.next != null) dat.next.prev = dat.prev;
		shape.sweep = null;
		var o = dat;
		o.prev = null;
		o.shape = null;
		o.aabb = null;
		o.next = zpp_nape.space.ZPP_SweepData.zpp_pool;
		zpp_nape.space.ZPP_SweepData.zpp_pool = o;
	}
	,__insert: function(shape) {
		var dat;
		if(zpp_nape.space.ZPP_SweepData.zpp_pool == null) dat = new zpp_nape.space.ZPP_SweepData(); else {
			dat = zpp_nape.space.ZPP_SweepData.zpp_pool;
			zpp_nape.space.ZPP_SweepData.zpp_pool = dat.next;
			dat.next = null;
		}
		null;
		shape.sweep = dat;
		dat.shape = shape;
		dat.aabb = shape.aabb;
		dat.next = this.list;
		if(this.list != null) this.list.prev = dat;
		this.list = dat;
	}
	,__class__: zpp_nape.space.ZPP_SweepPhase
});
zpp_nape.util.ZNPArray2_Float = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_Float.__name__ = ["zpp_nape","util","ZNPArray2_Float"];
zpp_nape.util.ZNPArray2_Float.prototype = {
	set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0, _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,__class__: zpp_nape.util.ZNPArray2_Float
}
zpp_nape.util.ZNPArray2_ZPP_GeomVert = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_GeomVert"];
zpp_nape.util.ZNPArray2_ZPP_GeomVert.prototype = {
	set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0, _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,__class__: zpp_nape.util.ZNPArray2_ZPP_GeomVert
}
zpp_nape.util.ZNPArray2_ZPP_MarchPair = function(width,height) {
	this.width = 0;
	this.list = null;
	this.width = width;
	this.list = new Array();
};
zpp_nape.util.ZNPArray2_ZPP_MarchPair.__name__ = ["zpp_nape","util","ZNPArray2_ZPP_MarchPair"];
zpp_nape.util.ZNPArray2_ZPP_MarchPair.prototype = {
	set: function(x,y,obj) {
		return this.list[y * this.width + x] = obj;
	}
	,get: function(x,y) {
		return this.list[y * this.width + x];
	}
	,resize: function(width,height,def) {
		this.width = width;
		var _g1 = 0, _g = width * height;
		while(_g1 < _g) {
			var i = _g1++;
			this.list[i] = def;
		}
	}
	,__class__: zpp_nape.util.ZNPArray2_ZPP_MarchPair
}
zpp_nape.util.Hashable2_Boolfalse = function() {
	this.di = 0;
	this.id = 0;
	this.hnext = null;
	this.next = null;
	this.value = false;
};
zpp_nape.util.Hashable2_Boolfalse.__name__ = ["zpp_nape","util","Hashable2_Boolfalse"];
zpp_nape.util.Hashable2_Boolfalse.get = function(id,di,val) {
	var ret = zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di);
	ret.value = val;
	return ret;
}
zpp_nape.util.Hashable2_Boolfalse.getpersist = function(id,di) {
	var ret;
	if(zpp_nape.util.Hashable2_Boolfalse.zpp_pool == null) ret = new zpp_nape.util.Hashable2_Boolfalse(); else {
		ret = zpp_nape.util.Hashable2_Boolfalse.zpp_pool;
		zpp_nape.util.Hashable2_Boolfalse.zpp_pool = ret.next;
		ret.next = null;
	}
	null;
	ret.id = id;
	ret.di = di;
	return ret;
}
zpp_nape.util.Hashable2_Boolfalse.ordered_get = function(id,di,val) {
	return id <= di?zpp_nape.util.Hashable2_Boolfalse.get(id,di,val):zpp_nape.util.Hashable2_Boolfalse.get(di,id,val);
}
zpp_nape.util.Hashable2_Boolfalse.ordered_get_persist = function(id,di) {
	return id <= di?zpp_nape.util.Hashable2_Boolfalse.getpersist(id,di):zpp_nape.util.Hashable2_Boolfalse.getpersist(di,id);
}
zpp_nape.util.Hashable2_Boolfalse.prototype = {
	alloc: function() {
	}
	,free: function() {
	}
	,__class__: zpp_nape.util.Hashable2_Boolfalse
}
zpp_nape.util.FastHash2_Hashable2_Boolfalse = function() {
	this.cnt = 0;
	this.table = null;
	this.cnt = 0;
	this.table = new Array();
	var _g1 = 0, _g = 1048576;
	while(_g1 < _g) {
		var i = _g1++;
		this.table.push(null);
	}
};
zpp_nape.util.FastHash2_Hashable2_Boolfalse.__name__ = ["zpp_nape","util","FastHash2_Hashable2_Boolfalse"];
zpp_nape.util.FastHash2_Hashable2_Boolfalse.prototype = {
	hash: function(id,di) {
		return id * 106039 + di & 1048575;
	}
	,remove: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == arb) this.table[h] = n.hnext; else if(n != null) {
			var pre;
			do {
				pre = n;
				n = n.hnext;
			} while(n != null && n != arb);
			pre.hnext = n.hnext;
		}
		arb.hnext = null;
		this.cnt--;
	}
	,add: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		this.cnt++;
	}
	,maybeAdd: function(arb) {
		var h = arb.id * 106039 + arb.di & 1048575;
		var n = this.table[h];
		var cont = true;
		if(n == null) {
			this.table[h] = arb;
			arb.hnext = null;
		} else if(cont) {
			arb.hnext = n.hnext;
			n.hnext = arb;
		}
		if(cont) this.cnt++;
	}
	,has: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return false; else if(n.id == id && n.di == di) return true; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n != null;
		}
	}
	,ordered_get: function(id,di) {
		if(id > di) {
			var t = id;
			id = di;
			di = t;
		}
		return this.get(id,di);
	}
	,get: function(id,di) {
		var n = this.table[id * 106039 + di & 1048575];
		if(n == null) return null; else if(n.id == id && n.di == di) return n; else {
			do n = n.hnext; while(n != null && (n.id != id || n.di != di));
			return n;
		}
	}
	,clear: function() {
		var _g1 = 0, _g = this.table.length;
		while(_g1 < _g) {
			var i = _g1++;
			var n = this.table[i];
			if(n == null) continue;
			while(n != null) {
				var t = n.hnext;
				n.hnext = null;
				n;
				n = t;
			}
			this.table[i] = null;
		}
	}
	,empty: function() {
		return this.cnt == 0;
	}
	,__class__: zpp_nape.util.FastHash2_Hashable2_Boolfalse
}
zpp_nape.util.ZNPList_ZPP_CallbackSet = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPList_ZPP_CallbackSet"];
zpp_nape.util.ZNPList_ZPP_CallbackSet.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CallbackSet(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CallbackSet.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CallbackSet
}
zpp_nape.util.ZNPList_ZPP_Shape = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPList_ZPP_Shape"];
zpp_nape.util.ZNPList_ZPP_Shape.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Shape(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Shape.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Shape
}
zpp_nape.util.ZNPList_ZPP_Body = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Body.__name__ = ["zpp_nape","util","ZNPList_ZPP_Body"];
zpp_nape.util.ZNPList_ZPP_Body.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Body(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Body.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Body
}
zpp_nape.util.ZNPList_ZPP_Compound = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPList_ZPP_Compound"];
zpp_nape.util.ZNPList_ZPP_Compound.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Compound(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Compound.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Compound
}
zpp_nape.util.ZNPList_ZPP_Arbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_Arbiter"];
zpp_nape.util.ZNPList_ZPP_Arbiter.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Arbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Arbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Arbiter
}
zpp_nape.util.ZNPList_ZPP_CbSetPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_CbSetPair"];
zpp_nape.util.ZNPList_ZPP_CbSetPair.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CbSetPair(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CbSetPair.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CbSetPair
}
zpp_nape.util.ZNPList_ZPP_CutInt = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutInt"];
zpp_nape.util.ZNPList_ZPP_CutInt.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutInt(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CutInt.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CutInt
}
zpp_nape.util.ZNPList_ZPP_CutVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_CutVert"];
zpp_nape.util.ZNPList_ZPP_CutVert.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_CutVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_CutVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_CutVert
}
zpp_nape.util.ZNPList_ZPP_PartitionVertex = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionVertex"];
zpp_nape.util.ZNPList_ZPP_PartitionVertex.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionVertex(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_PartitionVertex.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_PartitionVertex
}
zpp_nape.util.ZNPList_ZPP_PartitionedPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPList_ZPP_PartitionedPoly.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_PartitionedPoly(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_PartitionedPoly
}
zpp_nape.util.ZNPList_ZPP_SimplifyP = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimplifyP"];
zpp_nape.util.ZNPList_ZPP_SimplifyP.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimplifyP(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimplifyP.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimplifyP
}
zpp_nape.util.ZNPList_ZPP_GeomVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomVert"];
zpp_nape.util.ZNPList_ZPP_GeomVert.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_GeomVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_GeomVert
}
zpp_nape.util.ZNPList_ZPP_SimpleVert = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleVert"];
zpp_nape.util.ZNPList_ZPP_SimpleVert.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleVert(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimpleVert.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimpleVert
}
zpp_nape.util.ZNPList_ZPP_SimpleEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_SimpleEvent"];
zpp_nape.util.ZNPList_ZPP_SimpleEvent.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SimpleEvent(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SimpleEvent.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SimpleEvent
}
zpp_nape.util.ZNPList_ZPP_AABBPair = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBPair"];
zpp_nape.util.ZNPList_ZPP_AABBPair.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBPair(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_AABBPair.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_AABBPair
}
zpp_nape.util.ZNPList_ZPP_Edge = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPList_ZPP_Edge"];
zpp_nape.util.ZNPList_ZPP_Edge.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Edge(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Edge.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Edge
}
zpp_nape.util.ZNPList_ZPP_AABBNode = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPList_ZPP_AABBNode"];
zpp_nape.util.ZNPList_ZPP_AABBNode.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_AABBNode(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_AABBNode.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_AABBNode
}
zpp_nape.util.ZNPList_ZPP_Component = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Component.__name__ = ["zpp_nape","util","ZNPList_ZPP_Component"];
zpp_nape.util.ZNPList_ZPP_Component.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Component(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Component.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Component
}
zpp_nape.util.ZNPList_ZPP_InteractionGroup = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPList_ZPP_InteractionGroup"];
zpp_nape.util.ZNPList_ZPP_InteractionGroup.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_InteractionGroup(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_InteractionGroup.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_InteractionGroup
}
zpp_nape.util.ZNPList_ZPP_ColArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_ColArbiter"];
zpp_nape.util.ZNPList_ZPP_ColArbiter.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ColArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ColArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ColArbiter
}
zpp_nape.util.ZNPList_ZPP_FluidArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_FluidArbiter"];
zpp_nape.util.ZNPList_ZPP_FluidArbiter.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_FluidArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_FluidArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_FluidArbiter
}
zpp_nape.util.ZNPList_ZPP_SensorArbiter = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPList_ZPP_SensorArbiter"];
zpp_nape.util.ZNPList_ZPP_SensorArbiter.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_SensorArbiter(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_SensorArbiter.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_SensorArbiter
}
zpp_nape.util.ZNPList_ZPP_Listener = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPList_ZPP_Listener"];
zpp_nape.util.ZNPList_ZPP_Listener.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_Listener(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_Listener.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_Listener
}
zpp_nape.util.ZNPList_ZPP_ToiEvent = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPList_ZPP_ToiEvent"];
zpp_nape.util.ZNPList_ZPP_ToiEvent.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_ToiEvent(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_ToiEvent.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_ToiEvent
}
zpp_nape.util.ZNPList_ConvexResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ConvexResult.__name__ = ["zpp_nape","util","ZNPList_ConvexResult"];
zpp_nape.util.ZNPList_ConvexResult.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
		zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
					ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
					zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ConvexResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ConvexResult(); else {
					ret = zpp_nape.util.ZNPNode_ConvexResult.zpp_pool;
					zpp_nape.util.ZNPNode_ConvexResult.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ConvexResult
}
zpp_nape.util.ZNPList_ZPP_GeomPoly = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPList_ZPP_GeomPoly"];
zpp_nape.util.ZNPList_ZPP_GeomPoly.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
		zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_ZPP_GeomPoly(); else {
					ret = zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool;
					zpp_nape.util.ZNPNode_ZPP_GeomPoly.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_ZPP_GeomPoly
}
zpp_nape.util.ZNPList_RayResult = function() {
	this.length = 0;
	this.pushmod = false;
	this.modified = false;
	this.head = null;
};
zpp_nape.util.ZNPList_RayResult.__name__ = ["zpp_nape","util","ZNPList_RayResult"];
zpp_nape.util.ZNPList_RayResult.prototype = {
	at: function(ind) {
		var it = this.iterator_at(ind);
		return it != null?it.elt:null;
	}
	,iterator_at: function(ind) {
		var ret = this.head;
		while(ind-- > 0 && ret != null) ret = ret.next;
		return ret;
	}
	,back: function() {
		var ret = this.head;
		var cur = ret;
		while(cur != null) {
			ret = cur;
			cur = cur.next;
		}
		return ret.elt;
	}
	,front: function() {
		return this.head.elt;
	}
	,inlined_has: function(obj) {
		var ret;
		ret = false;
		var cx_ite = this.head;
		while(cx_ite != null) {
			var npite = cx_ite.elt;
			if(npite == obj) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		return ret;
	}
	,has: function(obj) {
		return this.inlined_has(obj);
	}
	,size: function() {
		return this.length;
	}
	,empty: function() {
		return this.head == null;
	}
	,reverse: function() {
		var cur = this.head;
		var pre = null;
		while(cur != null) {
			var nx = cur.next;
			cur.next = pre;
			this.head = cur;
			pre = cur;
			cur = nx;
		}
		this.modified = true;
		this.pushmod = true;
	}
	,inlined_clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,clear: function() {
		while(!(this.head == null)) this.inlined_pop();
		this.pushmod = true;
	}
	,splice: function(pre,n) {
		while(n-- > 0 && pre.next != null) this.erase(pre);
		return pre.next;
	}
	,inlined_erase: function(pre) {
		var old;
		var ret;
		if(pre == null) {
			old = this.head;
			ret = old.next;
			this.head = ret;
			if(this.head == null) this.pushmod = true;
		} else {
			old = pre.next;
			ret = old.next;
			pre.next = ret;
			if(ret == null) this.pushmod = true;
		}
		var o = old;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		this.modified = true;
		this.length--;
		this.pushmod = true;
		return ret;
	}
	,erase: function(pre) {
		return this.inlined_erase(pre);
	}
	,inlined_try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.inlined_erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,inlined_remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,try_remove: function(obj) {
		var pre = null;
		var cur = this.head;
		var ret = false;
		while(cur != null) {
			if(cur.elt == obj) {
				this.erase(pre);
				ret = true;
				break;
			}
			pre = cur;
			cur = cur.next;
		}
		return ret;
	}
	,remove: function(obj) {
		this.inlined_try_remove(obj);
	}
	,inlined_pop_unsafe: function() {
		var ret = this.head.elt;
		this.pop();
		return ret;
	}
	,pop_unsafe: function() {
		return this.inlined_pop_unsafe();
	}
	,inlined_pop: function() {
		var ret = this.head;
		this.head = ret.next;
		var o = ret;
		o.elt = null;
		o.next = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
		zpp_nape.util.ZNPNode_RayResult.zpp_pool = o;
		if(this.head == null) this.pushmod = true;
		this.modified = true;
		this.length--;
	}
	,pop: function() {
		this.inlined_pop();
	}
	,inlined_insert: function(cur,o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
					ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
					zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		if(cur == null) {
			temp.next = this.head;
			this.head = temp;
		} else {
			temp.next = cur.next;
			cur.next = temp;
		}
		this.pushmod = this.modified = true;
		this.length++;
		return temp;
	}
	,insert: function(cur,o) {
		return this.inlined_insert(cur,o);
	}
	,addAll: function(x) {
		var cx_ite = x.head;
		while(cx_ite != null) {
			var i = cx_ite.elt;
			this.add(i);
			cx_ite = cx_ite.next;
		}
	}
	,inlined_add: function(o) {
		var temp = (function($this) {
			var $r;
			var ret;
			{
				if(zpp_nape.util.ZNPNode_RayResult.zpp_pool == null) ret = new zpp_nape.util.ZNPNode_RayResult(); else {
					ret = zpp_nape.util.ZNPNode_RayResult.zpp_pool;
					zpp_nape.util.ZNPNode_RayResult.zpp_pool = ret.next;
					ret.next = null;
				}
				null;
			}
			ret.elt = o;
			$r = ret;
			return $r;
		}(this));
		temp.next = this.head;
		this.head = temp;
		this.modified = true;
		this.length++;
		return o;
	}
	,add: function(o) {
		return this.inlined_add(o);
	}
	,setbegin: function(i) {
		this.head = i;
		this.modified = true;
		this.pushmod = true;
	}
	,begin: function() {
		return this.head;
	}
	,__class__: zpp_nape.util.ZNPList_RayResult
}
zpp_nape.util.ZNPNode_ZPP_CbType = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbType.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbType"];
zpp_nape.util.ZNPNode_ZPP_CbType.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbType
}
zpp_nape.util.ZNPNode_ZPP_CallbackSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CallbackSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CallbackSet"];
zpp_nape.util.ZNPNode_ZPP_CallbackSet.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CallbackSet
}
zpp_nape.util.ZNPNode_ZPP_Shape = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Shape.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Shape"];
zpp_nape.util.ZNPNode_ZPP_Shape.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Shape
}
zpp_nape.util.ZNPNode_ZPP_Body = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Body.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Body"];
zpp_nape.util.ZNPNode_ZPP_Body.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Body
}
zpp_nape.util.ZNPNode_ZPP_Constraint = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Constraint.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Constraint"];
zpp_nape.util.ZNPNode_ZPP_Constraint.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Constraint
}
zpp_nape.util.ZNPNode_ZPP_Compound = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Compound.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Compound"];
zpp_nape.util.ZNPNode_ZPP_Compound.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Compound
}
zpp_nape.util.ZNPNode_ZPP_Arbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Arbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Arbiter"];
zpp_nape.util.ZNPNode_ZPP_Arbiter.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Arbiter
}
zpp_nape.util.ZNPNode_ZPP_InteractionListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionListener"];
zpp_nape.util.ZNPNode_ZPP_InteractionListener.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_InteractionListener
}
zpp_nape.util.ZNPNode_ZPP_CbSet = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSet.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSet"];
zpp_nape.util.ZNPNode_ZPP_CbSet.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbSet
}
zpp_nape.util.ZNPNode_ZPP_Interactor = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Interactor.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Interactor"];
zpp_nape.util.ZNPNode_ZPP_Interactor.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Interactor
}
zpp_nape.util.ZNPNode_ZPP_BodyListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_BodyListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_BodyListener"];
zpp_nape.util.ZNPNode_ZPP_BodyListener.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_BodyListener
}
zpp_nape.util.ZNPNode_ZPP_CbSetPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CbSetPair"];
zpp_nape.util.ZNPNode_ZPP_CbSetPair.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CbSetPair
}
zpp_nape.util.ZNPNode_ZPP_ConstraintListener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ConstraintListener"];
zpp_nape.util.ZNPNode_ZPP_ConstraintListener.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ConstraintListener
}
zpp_nape.util.ZNPNode_ZPP_CutInt = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CutInt.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutInt"];
zpp_nape.util.ZNPNode_ZPP_CutInt.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CutInt
}
zpp_nape.util.ZNPNode_ZPP_CutVert = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_CutVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_CutVert"];
zpp_nape.util.ZNPNode_ZPP_CutVert.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_CutVert
}
zpp_nape.util.ZNPNode_ZPP_PartitionVertex = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionVertex"];
zpp_nape.util.ZNPNode_ZPP_PartitionVertex.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_PartitionVertex
}
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_PartitionedPoly"];
zpp_nape.util.ZNPNode_ZPP_PartitionedPoly.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_PartitionedPoly
}
zpp_nape.util.ZNPNode_ZPP_SimplifyP = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimplifyP.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimplifyP"];
zpp_nape.util.ZNPNode_ZPP_SimplifyP.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimplifyP
}
zpp_nape.util.ZNPNode_ZPP_GeomVert = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomVert"];
zpp_nape.util.ZNPNode_ZPP_GeomVert.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_GeomVert
}
zpp_nape.util.ZNPNode_ZPP_SimpleVert = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleVert"];
zpp_nape.util.ZNPNode_ZPP_SimpleVert.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimpleVert
}
zpp_nape.util.ZNPNode_ZPP_SimpleEvent = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SimpleEvent"];
zpp_nape.util.ZNPNode_ZPP_SimpleEvent.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SimpleEvent
}
zpp_nape.util.ZNPNode_ZPP_AABBPair = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBPair.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBPair"];
zpp_nape.util.ZNPNode_ZPP_AABBPair.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_AABBPair
}
zpp_nape.util.ZNPNode_ZPP_Vec2 = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Vec2.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Vec2"];
zpp_nape.util.ZNPNode_ZPP_Vec2.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Vec2
}
zpp_nape.util.ZNPNode_ZPP_Edge = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Edge.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Edge"];
zpp_nape.util.ZNPNode_ZPP_Edge.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Edge
}
zpp_nape.util.ZNPNode_ZPP_AABBNode = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_AABBNode.__name__ = ["zpp_nape","util","ZNPNode_ZPP_AABBNode"];
zpp_nape.util.ZNPNode_ZPP_AABBNode.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_AABBNode
}
zpp_nape.util.ZNPNode_ZPP_Component = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Component.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Component"];
zpp_nape.util.ZNPNode_ZPP_Component.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Component
}
zpp_nape.util.ZNPNode_ZPP_InteractionGroup = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.__name__ = ["zpp_nape","util","ZNPNode_ZPP_InteractionGroup"];
zpp_nape.util.ZNPNode_ZPP_InteractionGroup.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_InteractionGroup
}
zpp_nape.util.ZNPNode_ZPP_ColArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ColArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ColArbiter"];
zpp_nape.util.ZNPNode_ZPP_ColArbiter.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ColArbiter
}
zpp_nape.util.ZNPNode_ZPP_FluidArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_FluidArbiter"];
zpp_nape.util.ZNPNode_ZPP_FluidArbiter.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_FluidArbiter
}
zpp_nape.util.ZNPNode_ZPP_SensorArbiter = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.__name__ = ["zpp_nape","util","ZNPNode_ZPP_SensorArbiter"];
zpp_nape.util.ZNPNode_ZPP_SensorArbiter.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_SensorArbiter
}
zpp_nape.util.ZNPNode_ZPP_Listener = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_Listener.__name__ = ["zpp_nape","util","ZNPNode_ZPP_Listener"];
zpp_nape.util.ZNPNode_ZPP_Listener.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_Listener
}
zpp_nape.util.ZNPNode_ZPP_ToiEvent = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_ToiEvent.__name__ = ["zpp_nape","util","ZNPNode_ZPP_ToiEvent"];
zpp_nape.util.ZNPNode_ZPP_ToiEvent.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_ToiEvent
}
zpp_nape.util.ZNPNode_ConvexResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ConvexResult.__name__ = ["zpp_nape","util","ZNPNode_ConvexResult"];
zpp_nape.util.ZNPNode_ConvexResult.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ConvexResult
}
zpp_nape.util.ZNPNode_ZPP_GeomPoly = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_ZPP_GeomPoly.__name__ = ["zpp_nape","util","ZNPNode_ZPP_GeomPoly"];
zpp_nape.util.ZNPNode_ZPP_GeomPoly.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_ZPP_GeomPoly
}
zpp_nape.util.ZNPNode_RayResult = function() {
	this.elt = null;
	this.next = null;
};
zpp_nape.util.ZNPNode_RayResult.__name__ = ["zpp_nape","util","ZNPNode_RayResult"];
zpp_nape.util.ZNPNode_RayResult.prototype = {
	elem: function() {
		return this.elt;
	}
	,free: function() {
		this.elt = null;
	}
	,alloc: function() {
	}
	,__class__: zpp_nape.util.ZNPNode_RayResult
}
zpp_nape.util.ZPP_MixVec2List = function() {
	this.at_index = 0;
	this.at_ite = null;
	this.zip_length = false;
	this._length = 0;
	this.inner = null;
	nape.geom.Vec2List.call(this);
	this.at_ite = null;
	this.at_index = 0;
	this.zip_length = true;
	this._length = 0;
};
zpp_nape.util.ZPP_MixVec2List.__name__ = ["zpp_nape","util","ZPP_MixVec2List"];
zpp_nape.util.ZPP_MixVec2List.get = function(list,immutable) {
	if(immutable == null) immutable = false;
	var ret = new zpp_nape.util.ZPP_MixVec2List();
	ret.inner = list;
	ret.zpp_inner.immutable = immutable;
	return ret;
}
zpp_nape.util.ZPP_MixVec2List.__super__ = nape.geom.Vec2List;
zpp_nape.util.ZPP_MixVec2List.prototype = $extend(nape.geom.Vec2List.prototype,{
	clear: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		if(this.zpp_inner.reverse_flag) while(!this.empty()) this.pop(); else while(!this.empty()) this.shift();
	}
	,remove: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		var ret;
		ret = false;
		var cx_ite = this.inner.next;
		while(cx_ite != null) {
			var x = cx_ite;
			if(obj.zpp_inner == x) {
				ret = true;
				break;
			}
			cx_ite = cx_ite.next;
		}
		if(ret) {
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(obj);
			if(!this.zpp_inner.dontremove) this.inner.remove(obj.zpp_inner);
			this.zpp_inner.invalidate();
		}
		return ret;
	}
	,shift: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite = this.zpp_gl() == 1?null:this.inner.iterator_at(this.zpp_gl() - 2);
			ret = ite == null?this.inner.next:ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		} else {
			ret = this.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,pop: function() {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		if(this.empty()) throw "Error: Cannot remove from empty list";
		this.zpp_vm();
		var ret = null;
		if(this.zpp_inner.reverse_flag) {
			ret = this.inner.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.pop();
		} else {
			if(this.at_ite != null && this.at_ite.next == null) this.at_ite = null;
			var ite = this.zpp_gl() == 1?null:this.inner.iterator_at(this.zpp_gl() - 2);
			ret = ite == null?this.inner.next:ite.next;
			var retx = ret.wrapper();
			if(this.zpp_inner.subber != null) this.zpp_inner.subber(retx);
			if(!this.zpp_inner.dontremove) this.inner.erase(ite);
		}
		this.zpp_inner.invalidate();
		var retx = ret.wrapper();
		return retx;
	}
	,unshift: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) throw "Error: " + "Vec2" + " is already in use";
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			} else this.inner.add(obj.zpp_inner);
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,push: function(obj) {
		if(this.zpp_inner.immutable) throw "Error: " + "Vec2" + "List is immutable";
		this.zpp_inner.modify_test();
		this.zpp_vm();
		if(obj.zpp_inner._inuse) throw "Error: " + "Vec2" + " is already in use";
		var cont = this.zpp_inner.adder != null?this.zpp_inner.adder(obj):true;
		if(cont) {
			if(this.zpp_inner.reverse_flag) this.inner.add(obj.zpp_inner); else {
				var ite = this.inner.iterator_at(this.zpp_gl() - 1);
				this.inner.insert(ite,obj.zpp_inner);
			}
			this.zpp_inner.invalidate();
			if(this.zpp_inner.post_adder != null) this.zpp_inner.post_adder(obj);
		}
		return cont;
	}
	,at: function(index) {
		this.zpp_vm();
		if(index < 0 || index >= this.zpp_gl()) throw "Error: Index out of bounds";
		if(this.zpp_inner.reverse_flag) index = this.zpp_gl() - 1 - index;
		if(index < this.at_index || this.at_ite == null) {
			this.at_index = 0;
			this.at_ite = this.inner.next;
			while(true) {
				var x = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		while(this.at_index != index) {
			this.at_index++;
			this.at_ite = this.at_ite.next;
			while(true) {
				var x = this.at_ite;
				break;
				this.at_ite = this.at_ite.next;
			}
		}
		return this.at_ite.wrapper();
	}
	,zpp_vm: function() {
		this.zpp_inner.validate();
		if(this.inner.modified) {
			this.zip_length = true;
			this._length = 0;
			this.at_ite = null;
		}
	}
	,zpp_gl: function() {
		this.zpp_vm();
		if(this.zip_length) {
			this._length = 0;
			var cx_ite = this.inner.next;
			while(cx_ite != null) {
				var i = cx_ite;
				this._length++;
				cx_ite = cx_ite.next;
			}
			this.zip_length = false;
		}
		return this._length;
	}
	,__class__: zpp_nape.util.ZPP_MixVec2List
});
zpp_nape.util.ZPP_ConstraintList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Constraint();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ConstraintList.__name__ = ["zpp_nape","util","ZPP_ConstraintList"];
zpp_nape.util.ZPP_ConstraintList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.constraint.ConstraintList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ConstraintList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_ConstraintList
}
zpp_nape.util.ZPP_BodyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Body();
	this._invalidated = true;
};
zpp_nape.util.ZPP_BodyList.__name__ = ["zpp_nape","util","ZPP_BodyList"];
zpp_nape.util.ZPP_BodyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.BodyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_BodyList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_BodyList
}
zpp_nape.util.ZPP_InteractorList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Interactor();
	this._invalidated = true;
};
zpp_nape.util.ZPP_InteractorList.__name__ = ["zpp_nape","util","ZPP_InteractorList"];
zpp_nape.util.ZPP_InteractorList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.InteractorList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_InteractorList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_InteractorList
}
zpp_nape.util.ZPP_CompoundList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Compound();
	this._invalidated = true;
};
zpp_nape.util.ZPP_CompoundList.__name__ = ["zpp_nape","util","ZPP_CompoundList"];
zpp_nape.util.ZPP_CompoundList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.phys.CompoundList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_CompoundList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_CompoundList
}
zpp_nape.util.ZPP_ListenerList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Listener();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ListenerList.__name__ = ["zpp_nape","util","ZPP_ListenerList"];
zpp_nape.util.ZPP_ListenerList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.ListenerList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ListenerList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_ListenerList
}
zpp_nape.util.ZPP_CbTypeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_CbType();
	this._invalidated = true;
};
zpp_nape.util.ZPP_CbTypeList.__name__ = ["zpp_nape","util","ZPP_CbTypeList"];
zpp_nape.util.ZPP_CbTypeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.callbacks.CbTypeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_CbTypeList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_CbTypeList
}
zpp_nape.util.ZPP_Vec2List = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Vec2();
	this._invalidated = true;
};
zpp_nape.util.ZPP_Vec2List.__name__ = ["zpp_nape","util","ZPP_Vec2List"];
zpp_nape.util.ZPP_Vec2List.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.Vec2List();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_Vec2List.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_Vec2List
}
zpp_nape.util.ZPP_GeomPolyList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_GeomPoly();
	this._invalidated = true;
};
zpp_nape.util.ZPP_GeomPolyList.__name__ = ["zpp_nape","util","ZPP_GeomPolyList"];
zpp_nape.util.ZPP_GeomPolyList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.GeomPolyList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_GeomPolyList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_GeomPolyList
}
zpp_nape.util.ZPP_RayResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_RayResult();
	this._invalidated = true;
};
zpp_nape.util.ZPP_RayResultList.__name__ = ["zpp_nape","util","ZPP_RayResultList"];
zpp_nape.util.ZPP_RayResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.RayResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_RayResultList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_RayResultList
}
zpp_nape.util.ZPP_ConvexResultList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ConvexResult();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ConvexResultList.__name__ = ["zpp_nape","util","ZPP_ConvexResultList"];
zpp_nape.util.ZPP_ConvexResultList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.geom.ConvexResultList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ConvexResultList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_ConvexResultList
}
zpp_nape.util.ZPP_EdgeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Edge();
	this._invalidated = true;
};
zpp_nape.util.ZPP_EdgeList.__name__ = ["zpp_nape","util","ZPP_EdgeList"];
zpp_nape.util.ZPP_EdgeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.EdgeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_EdgeList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_EdgeList
}
zpp_nape.util.ZPP_ShapeList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Shape();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ShapeList.__name__ = ["zpp_nape","util","ZPP_ShapeList"];
zpp_nape.util.ZPP_ShapeList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.shape.ShapeList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ShapeList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_ShapeList
}
zpp_nape.util.ZPP_InteractionGroupList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_InteractionGroup();
	this._invalidated = true;
};
zpp_nape.util.ZPP_InteractionGroupList.__name__ = ["zpp_nape","util","ZPP_InteractionGroupList"];
zpp_nape.util.ZPP_InteractionGroupList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.InteractionGroupList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_InteractionGroupList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_InteractionGroupList
}
zpp_nape.util.ZPP_ArbiterList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.util.ZNPList_ZPP_Arbiter();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ArbiterList.__name__ = ["zpp_nape","util","ZPP_ArbiterList"];
zpp_nape.util.ZPP_ArbiterList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ArbiterList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ArbiterList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_ArbiterList
}
zpp_nape.util.ZPP_ContactList = function() {
	this.user_length = 0;
	this.zip_length = false;
	this.push_ite = null;
	this.at_ite = null;
	this.at_index = 0;
	this.reverse_flag = false;
	this.dontremove = false;
	this.subber = null;
	this.post_adder = null;
	this.adder = null;
	this._modifiable = null;
	this._validate = null;
	this._invalidate = null;
	this._invalidated = false;
	this.immutable = false;
	this.inner = null;
	this.outer = null;
	this.inner = new zpp_nape.dynamics.ZPP_Contact();
	this._invalidated = true;
};
zpp_nape.util.ZPP_ContactList.__name__ = ["zpp_nape","util","ZPP_ContactList"];
zpp_nape.util.ZPP_ContactList.get = function(list,imm) {
	if(imm == null) imm = false;
	var ret = new nape.dynamics.ContactList();
	ret.zpp_inner.inner = list;
	if(imm) ret.zpp_inner.immutable = true;
	ret.zpp_inner.zip_length = true;
	return ret;
}
zpp_nape.util.ZPP_ContactList.prototype = {
	invalidate: function() {
		this._invalidated = true;
		if(this._invalidate != null) this._invalidate(this);
	}
	,validate: function() {
		if(this._invalidated) {
			this._invalidated = false;
			if(this._validate != null) this._validate();
		}
	}
	,modify_test: function() {
		if(this._modifiable != null) this._modifiable();
	}
	,modified: function() {
		this.zip_length = true;
		this.at_ite = null;
		this.push_ite = null;
	}
	,valmod: function() {
		this.validate();
		if(this.inner.modified) {
			if(this.inner.pushmod) this.push_ite = null;
			this.at_ite = null;
			this.inner.modified = false;
			this.inner.pushmod = false;
			this.zip_length = true;
		}
	}
	,__class__: zpp_nape.util.ZPP_ContactList
}
zpp_nape.util.ZPP_Math = function() { }
zpp_nape.util.ZPP_Math.__name__ = ["zpp_nape","util","ZPP_Math"];
zpp_nape.util.ZPP_Math.sqrt = function(x) {
	return Math.sqrt(x);
}
zpp_nape.util.ZPP_Math.invsqrt = function(x) {
	return 1.0 / Math.sqrt(x);
}
zpp_nape.util.ZPP_Math.sqr = function(x) {
	return x * x;
}
zpp_nape.util.ZPP_Math.clamp2 = function(x,a) {
	return zpp_nape.util.ZPP_Math.clamp(x,-a,a);
}
zpp_nape.util.ZPP_Math.clamp = function(x,a,b) {
	return x < a?a:x > b?b:x;
}
zpp_nape.util.ZPP_PubPool = function() { }
zpp_nape.util.ZPP_PubPool.__name__ = ["zpp_nape","util","ZPP_PubPool"];
zpp_nape.util.ZPP_Set_ZPP_Body = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_Body.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_Body"];
zpp_nape.util.ZPP_Set_ZPP_Body.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_Body(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_Body.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_Body
}
zpp_nape.util.ZPP_Set_ZPP_CbSetPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSetPair"];
zpp_nape.util.ZPP_Set_ZPP_CbSetPair.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSetPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSetPair.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_CbSetPair
}
zpp_nape.util.ZPP_Set_ZPP_PartitionPair = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionPair"];
zpp_nape.util.ZPP_Set_ZPP_PartitionPair.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionPair(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionPair.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_PartitionPair
}
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_PartitionVertex"];
zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_PartitionVertex(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_PartitionVertex.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_PartitionVertex
}
zpp_nape.util.ZPP_Set_ZPP_SimpleVert = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleVert"];
zpp_nape.util.ZPP_Set_ZPP_SimpleVert.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleVert(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleVert.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleVert
}
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleSeg"];
zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleSeg(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleSeg.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleSeg
}
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_SimpleEvent"];
zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_SimpleEvent(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_SimpleEvent.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_SimpleEvent
}
zpp_nape.util.ZPP_Set_ZPP_CbSet = function() {
	this.colour = 0;
	this.parent = null;
	this.next = null;
	this.prev = null;
	this.data = null;
	this.swapped = null;
	this.lt = null;
};
zpp_nape.util.ZPP_Set_ZPP_CbSet.__name__ = ["zpp_nape","util","ZPP_Set_ZPP_CbSet"];
zpp_nape.util.ZPP_Set_ZPP_CbSet.prototype = {
	insert: function(obj) {
		var x;
		if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
			x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
			zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
			x.next = null;
		}
		null;
		x.data = obj;
		if(this.parent == null) this.parent = x; else {
			var cur = this.parent;
			while(true) if(this.lt(x.data,cur.data)) {
				if(cur.prev == null) {
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(cur.next == null) {
				cur.next = x;
				x.parent = cur;
				break;
			} else cur = cur.next;
		}
		if(x.parent == null) x.colour = 1; else {
			x.colour = 0;
			if(x.parent.colour == 0) this.__fix_dbl_red(x);
		}
		return x;
	}
	,try_insert: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return cur; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return x;
		}
	}
	,try_insert_bool: function(obj) {
		var x = null;
		var cur = null;
		if(this.parent == null) {
			if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
				x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
				zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
				x.next = null;
			}
			null;
			x.data = obj;
			this.parent = x;
		} else {
			cur = this.parent;
			while(true) if(this.lt(obj,cur.data)) {
				if(cur.prev == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.prev = x;
					x.parent = cur;
					break;
				} else cur = cur.prev;
			} else if(this.lt(cur.data,obj)) {
				if(cur.next == null) {
					if(zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool == null) x = new zpp_nape.util.ZPP_Set_ZPP_CbSet(); else {
						x = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
						zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = x.next;
						x.next = null;
					}
					null;
					x.data = obj;
					cur.next = x;
					x.parent = cur;
					break;
				} else cur = cur.next;
			} else break;
		}
		if(x == null) return false; else {
			if(x.parent == null) x.colour = 1; else {
				x.colour = 0;
				if(x.parent.colour == 0) this.__fix_dbl_red(x);
			}
			return true;
		}
	}
	,__fix_dbl_red: function(x) {
		while(true) {
			var par = x.parent;
			var g = par.parent;
			if(g == null) {
				par.colour = 1;
				break;
			}
			var n1, n2, n3, t1, t2, t3, t4;
			if(par == g.prev) {
				n3 = g;
				t4 = g.next;
				if(x == par.prev) {
					n1 = x;
					n2 = par;
					t1 = x.prev;
					t2 = x.next;
					t3 = par.next;
				} else {
					n1 = par;
					n2 = x;
					t1 = par.prev;
					t2 = x.prev;
					t3 = x.next;
				}
			} else {
				n1 = g;
				t1 = g.prev;
				if(x == par.prev) {
					n2 = x;
					n3 = par;
					t2 = x.prev;
					t3 = x.next;
					t4 = par.next;
				} else {
					n2 = par;
					n3 = x;
					t2 = par.prev;
					t3 = x.prev;
					t4 = x.next;
				}
			}
			var par1 = g.parent;
			if(par1 == null) this.parent = n2; else if(par1.prev == g) par1.prev = n2; else par1.next = n2;
			if(n2 != null) n2.parent = par1;
			n1.prev = t1;
			if(t1 != null) t1.parent = n1;
			n1.next = t2;
			if(t2 != null) t2.parent = n1;
			n2.prev = n1;
			if(n1 != null) n1.parent = n2;
			n2.next = n3;
			if(n3 != null) n3.parent = n2;
			n3.prev = t3;
			if(t3 != null) t3.parent = n3;
			n3.next = t4;
			if(t4 != null) t4.parent = n3;
			n2.colour = g.colour - 1;
			n1.colour = 1;
			n3.colour = 1;
			if(n2 == this.parent) this.parent.colour = 1; else if(n2.colour == 0 && n2.parent.colour == 0) {
				x = n2;
				continue;
			}
			break;
		}
	}
	,__fix_neg_red: function(negred) {
		var parent = negred.parent;
		var child = parent.prev == negred?(function($this) {
			var $r;
			var nl = negred.prev;
			var nr = negred.next;
			var trl = nr.prev;
			var trr = nr.next;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.next = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.prev = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.next = parent.next;
				if(parent.next != null) parent.next.parent = nr;
			}
			{
				parent.next = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this)):(function($this) {
			var $r;
			var nl = negred.next;
			var nr = negred.prev;
			var trl = nr.next;
			var trr = nr.prev;
			nl.colour = 0;
			negred.colour = parent.colour = 1;
			{
				negred.prev = trl;
				if(trl != null) trl.parent = negred;
			}
			{
				var t = parent.data;
				parent.data = nr.data;
				nr.data = t;
			}
			if($this.swapped != null) $this.swapped(parent.data,nr.data);
			{
				nr.next = trr;
				if(trr != null) trr.parent = nr;
			}
			{
				nr.prev = parent.prev;
				if(parent.prev != null) parent.prev.parent = nr;
			}
			{
				parent.prev = nr;
				if(nr != null) nr.parent = parent;
			}
			$r = nl;
			return $r;
		}(this));
		if(child.prev != null && child.prev.colour == 0) this.__fix_dbl_red(child.prev); else if(child.next != null && child.next.colour == 0) this.__fix_dbl_red(child.next);
	}
	,clear_node: function(node,lambda) {
		lambda(node.data);
		var ret = node.parent;
		if(ret != null) {
			if(node == ret.prev) ret.prev = null; else ret.next = null;
			node.parent = null;
		}
		var o = node;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
		return ret;
	}
	,clear_with: function(lambda) {
		if(this.parent == null) return; else {
			var cur = this.parent;
			while(cur != null) cur = cur.prev != null?cur.prev:cur.next != null?cur.next:this.clear_node(cur,lambda);
			this.parent = null;
		}
	}
	,clear: function() {
		this.clear_with(function(_) {
		});
	}
	,remove_node: function(cur) {
		if(cur.next != null && cur.prev != null) {
			var sm = cur.next;
			while(sm.prev != null) sm = sm.prev;
			var t = cur.data;
			cur.data = sm.data;
			sm.data = t;
			if(this.swapped != null) this.swapped(cur.data,sm.data);
			cur = sm;
		}
		var child = cur.prev == null?cur.next:cur.prev;
		if(cur.colour == 1) {
			if(cur.prev != null || cur.next != null) child.colour = 1; else if(cur.parent != null) {
				var parent = cur.parent;
				while(true) {
					parent.colour++;
					parent.prev.colour--;
					parent.next.colour--;
					var child1 = parent.prev;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					var child1 = parent.next;
					if(child1.colour == -1) {
						this.__fix_neg_red(child1);
						break;
					} else if(child1.colour == 0) {
						if(child1.prev != null && child1.prev.colour == 0) {
							this.__fix_dbl_red(child1.prev);
							break;
						}
						if(child1.next != null && child1.next.colour == 0) {
							this.__fix_dbl_red(child1.next);
							break;
						}
					}
					if(parent.colour == 2) {
						if(parent.parent == null) parent.colour = 1; else {
							parent = parent.parent;
							continue;
						}
					}
					break;
				}
			}
		}
		var par = cur.parent;
		if(par == null) this.parent = child; else if(par.prev == cur) par.prev = child; else par.next = child;
		if(child != null) child.parent = par;
		cur.parent = cur.prev = cur.next = null;
		var o = cur;
		o.data = null;
		o.lt = null;
		o.swapped = null;
		o.next = zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool;
		zpp_nape.util.ZPP_Set_ZPP_CbSet.zpp_pool = o;
	}
	,predecessor: function(obj) {
		var node = this.predecessor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,successor: function(obj) {
		var node = this.successor_node(this.find(obj));
		return node == null?null:node.data;
	}
	,predecessor_node: function(cur) {
		if(cur.prev != null) {
			cur = cur.prev;
			while(cur.next != null) cur = cur.next;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.next != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,successor_node: function(cur) {
		if(cur.next != null) {
			cur = cur.next;
			while(cur.prev != null) cur = cur.prev;
		} else {
			var pre = cur;
			cur = cur.parent;
			while(cur != null && cur.prev != pre) {
				pre = cur;
				cur = cur.parent;
			}
		}
		return cur;
	}
	,remove: function(obj) {
		var node = this.find(obj);
		this.remove_node(node);
	}
	,pop_front: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		var ret = cur.data;
		this.remove_node(cur);
		return ret;
	}
	,first: function() {
		var cur = this.parent;
		while(cur.prev != null) cur = cur.prev;
		return cur.data;
	}
	,lower_bound: function(obj) {
		return (function($this) {
			var $r;
			var ret = null;
			if(!$this.empty()) {
				var set_ite = $this.parent;
				while(set_ite.prev != null) set_ite = set_ite.prev;
				while(set_ite != null) {
					var elt = set_ite.data;
					if(!$this.lt(elt,obj)) {
						ret = elt;
						break;
					}
					if(set_ite.next != null) {
						set_ite = set_ite.next;
						while(set_ite.prev != null) set_ite = set_ite.prev;
					} else {
						while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
						set_ite = set_ite.parent;
					}
				}
			}
			$r = ret;
			return $r;
		}(this));
	}
	,find_weak: function(obj) {
		var cur = this.parent;
		while(cur != null) if(this.lt(obj,cur.data)) cur = cur.prev; else if(this.lt(cur.data,obj)) cur = cur.next; else break;
		return cur;
	}
	,has_weak: function(obj) {
		return this.find_weak(obj) != null;
	}
	,find: function(obj) {
		var cur = this.parent;
		while(cur != null && cur.data != obj) if(this.lt(obj,cur.data)) cur = cur.prev; else cur = cur.next;
		return cur;
	}
	,has: function(obj) {
		return this.find(obj) != null;
	}
	,size: function() {
		var ret = 0;
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				ret++;
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return ret;
	}
	,singular: function() {
		return this.parent != null && this.parent.prev == null && this.parent.next == null;
	}
	,empty: function() {
		return this.parent == null;
	}
	,verify: function() {
		if(!this.empty()) {
			var set_ite = this.parent;
			while(set_ite.prev != null) set_ite = set_ite.prev;
			while(set_ite != null) {
				var i = set_ite.data;
				var prei = true;
				if(!this.empty()) {
					var set_ite1 = this.parent;
					while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
					while(set_ite1 != null) {
						var j = set_ite1.data;
						if(!prei) {
							if(!this.lt(i,j) && this.lt(j,i)) return false;
						} else if(i == j) prei = false; else if(!this.lt(j,i) && this.lt(i,j)) return false;
						if(set_ite1.next != null) {
							set_ite1 = set_ite1.next;
							while(set_ite1.prev != null) set_ite1 = set_ite1.prev;
						} else {
							while(set_ite1.parent != null && set_ite1 == set_ite1.parent.next) set_ite1 = set_ite1.parent;
							set_ite1 = set_ite1.parent;
						}
					}
				}
				if(set_ite.next != null) {
					set_ite = set_ite.next;
					while(set_ite.prev != null) set_ite = set_ite.prev;
				} else {
					while(set_ite.parent != null && set_ite == set_ite.parent.next) set_ite = set_ite.parent;
					set_ite = set_ite.parent;
				}
			}
		}
		return true;
	}
	,alloc: function() {
	}
	,free: function() {
		this.data = null;
		this.lt = null;
		this.swapped = null;
	}
	,__class__: zpp_nape.util.ZPP_Set_ZPP_CbSet
}
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; };
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; };
if(Array.prototype.indexOf) HxOverrides.remove = function(a,o) {
	var i = a.indexOf(o);
	if(i == -1) return false;
	a.splice(i,1);
	return true;
};
Math.__name__ = ["Math"];
Math.NaN = Number.NaN;
Math.NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
Math.POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
Math.isFinite = function(i) {
	return isFinite(i);
};
Math.isNaN = function(i) {
	return isNaN(i);
};
String.prototype.__class__ = String;
String.__name__ = ["String"];
Array.prototype.__class__ = Array;
Array.__name__ = ["Array"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
Globals.SCREEN_HEIGHT = 1280;
Globals.SCREEN_WIDTH = 720;
Globals.HALF_SCREEN_HEIGHT = Globals.SCREEN_HEIGHT * 0.5;
Globals.HALF_SCREEN_WIDTH = Globals.SCREEN_WIDTH * 0.5;
hsl.haxe.PropagationStatus.IMMEDIATELY_STOPPED = 1;
hsl.haxe.PropagationStatus.STOPPED = 2;
hsl.haxe.PropagationStatus.UNDISTURBED = 3;
js.Browser.window = typeof window != "undefined" ? window : null;
js.Browser.document = typeof window != "undefined" ? window.document : null;
milkshake.input.KeyboardCode.A = HxOverrides.cca("A",0);
milkshake.input.KeyboardCode.B = HxOverrides.cca("B",0);
milkshake.input.KeyboardCode.C = HxOverrides.cca("C",0);
milkshake.input.KeyboardCode.D = HxOverrides.cca("D",0);
milkshake.input.KeyboardCode.E = HxOverrides.cca("E",0);
milkshake.input.KeyboardCode.F = HxOverrides.cca("F",0);
milkshake.input.KeyboardCode.G = HxOverrides.cca("G",0);
milkshake.input.KeyboardCode.H = HxOverrides.cca("H",0);
milkshake.input.KeyboardCode.I = HxOverrides.cca("I",0);
milkshake.input.KeyboardCode.J = HxOverrides.cca("J",0);
milkshake.input.KeyboardCode.K = HxOverrides.cca("K",0);
milkshake.input.KeyboardCode.L = HxOverrides.cca("L",0);
milkshake.input.KeyboardCode.M = HxOverrides.cca("M",0);
milkshake.input.KeyboardCode.N = HxOverrides.cca("N",0);
milkshake.input.KeyboardCode.O = HxOverrides.cca("O",0);
milkshake.input.KeyboardCode.P = HxOverrides.cca("P",0);
milkshake.input.KeyboardCode.Q = HxOverrides.cca("Q",0);
milkshake.input.KeyboardCode.R = HxOverrides.cca("R",0);
milkshake.input.KeyboardCode.S = HxOverrides.cca("S",0);
milkshake.input.KeyboardCode.T = HxOverrides.cca("T",0);
milkshake.input.KeyboardCode.U = HxOverrides.cca("U",0);
milkshake.input.KeyboardCode.V = HxOverrides.cca("V",0);
milkshake.input.KeyboardCode.W = HxOverrides.cca("W",0);
milkshake.input.KeyboardCode.X = HxOverrides.cca("X",0);
milkshake.input.KeyboardCode.Y = HxOverrides.cca("Y",0);
milkshake.input.KeyboardCode.Z = HxOverrides.cca("Z",0);
milkshake.input.KeyboardCode.ZERO = HxOverrides.cca("0",0);
milkshake.input.KeyboardCode.ONE = HxOverrides.cca("1",0);
milkshake.input.KeyboardCode.TWO = HxOverrides.cca("2",0);
milkshake.input.KeyboardCode.THREE = HxOverrides.cca("3",0);
milkshake.input.KeyboardCode.FOUR = HxOverrides.cca("4",0);
milkshake.input.KeyboardCode.FIVE = HxOverrides.cca("5",0);
milkshake.input.KeyboardCode.SIX = HxOverrides.cca("6",0);
milkshake.input.KeyboardCode.SEVEN = HxOverrides.cca("7",0);
milkshake.input.KeyboardCode.EIGHT = HxOverrides.cca("8",0);
milkshake.input.KeyboardCode.NINE = HxOverrides.cca("9",0);
milkshake.input.KeyboardCode.NUMPAD_0 = 96;
milkshake.input.KeyboardCode.NUMPAD_1 = 97;
milkshake.input.KeyboardCode.NUMPAD_2 = 98;
milkshake.input.KeyboardCode.NUMPAD_3 = 99;
milkshake.input.KeyboardCode.NUMPAD_4 = 100;
milkshake.input.KeyboardCode.NUMPAD_5 = 101;
milkshake.input.KeyboardCode.NUMPAD_6 = 102;
milkshake.input.KeyboardCode.NUMPAD_7 = 103;
milkshake.input.KeyboardCode.NUMPAD_8 = 104;
milkshake.input.KeyboardCode.NUMPAD_9 = 105;
milkshake.input.KeyboardCode.NUMPAD_MULTIPLY = 106;
milkshake.input.KeyboardCode.NUMPAD_ADD = 107;
milkshake.input.KeyboardCode.NUMPAD_ENTER = 108;
milkshake.input.KeyboardCode.NUMPAD_SUBTRACT = 109;
milkshake.input.KeyboardCode.NUMPAD_DECIMAL = 110;
milkshake.input.KeyboardCode.NUMPAD_DIVIDE = 111;
milkshake.input.KeyboardCode.F1 = 112;
milkshake.input.KeyboardCode.F2 = 113;
milkshake.input.KeyboardCode.F3 = 114;
milkshake.input.KeyboardCode.F4 = 115;
milkshake.input.KeyboardCode.F5 = 116;
milkshake.input.KeyboardCode.F6 = 117;
milkshake.input.KeyboardCode.F7 = 118;
milkshake.input.KeyboardCode.F8 = 119;
milkshake.input.KeyboardCode.F9 = 120;
milkshake.input.KeyboardCode.F10 = 121;
milkshake.input.KeyboardCode.F11 = 122;
milkshake.input.KeyboardCode.F12 = 123;
milkshake.input.KeyboardCode.F13 = 124;
milkshake.input.KeyboardCode.F14 = 125;
milkshake.input.KeyboardCode.F15 = 126;
milkshake.input.KeyboardCode.COLON = 186;
milkshake.input.KeyboardCode.EQUALS = 187;
milkshake.input.KeyboardCode.UNDERSCORE = 189;
milkshake.input.KeyboardCode.QUESTION_MARK = 191;
milkshake.input.KeyboardCode.TILDE = 192;
milkshake.input.KeyboardCode.OPEN_BRACKET = 219;
milkshake.input.KeyboardCode.BACKWARD_SLASH = 220;
milkshake.input.KeyboardCode.CLOSED_BRACKET = 221;
milkshake.input.KeyboardCode.QUOTES = 222;
milkshake.input.KeyboardCode.BACKSPACE = 8;
milkshake.input.KeyboardCode.TAB = 9;
milkshake.input.KeyboardCode.CLEAR = 12;
milkshake.input.KeyboardCode.ENTER = 13;
milkshake.input.KeyboardCode.SHIFT = 16;
milkshake.input.KeyboardCode.CONTROL = 17;
milkshake.input.KeyboardCode.ALT = 18;
milkshake.input.KeyboardCode.CAPS_LOCK = 20;
milkshake.input.KeyboardCode.ESC = 27;
milkshake.input.KeyboardCode.SPACEBAR = 32;
milkshake.input.KeyboardCode.PAGE_UP = 33;
milkshake.input.KeyboardCode.PAGE_DOWN = 34;
milkshake.input.KeyboardCode.END = 35;
milkshake.input.KeyboardCode.HOME = 36;
milkshake.input.KeyboardCode.LEFT = 37;
milkshake.input.KeyboardCode.UP = 38;
milkshake.input.KeyboardCode.RIGHT = 39;
milkshake.input.KeyboardCode.DOWN = 40;
milkshake.input.KeyboardCode.INSERT = 45;
milkshake.input.KeyboardCode.DELETE = 46;
milkshake.input.KeyboardCode.HELP = 47;
milkshake.input.KeyboardCode.NUM_LOCK = 144;
nape.Config.epsilon = 1e-8;
nape.Config.fluidAngularDragFriction = 2.5;
nape.Config.fluidAngularDrag = 100;
nape.Config.fluidVacuumDrag = 0.5;
nape.Config.fluidLinearDrag = 0.5;
nape.Config.collisionSlop = 0.2;
nape.Config.collisionSlopCCD = 0.5;
nape.Config.distanceThresholdCCD = 0.05;
nape.Config.staticCCDLinearThreshold = 0.05;
nape.Config.staticCCDAngularThreshold = 0.005;
nape.Config.bulletCCDLinearThreshold = 0.125;
nape.Config.bulletCCDAngularThreshold = 0.0125;
nape.Config.dynamicSweepLinearThreshold = 17;
nape.Config.dynamicSweepAngularThreshold = 0.6;
nape.Config.angularCCDSlipScale = 0.75;
nape.Config.arbiterExpirationDelay = 6;
nape.Config.staticFrictionThreshold = 2;
nape.Config.elasticThreshold = 20;
nape.Config.sleepDelay = 60;
nape.Config.linearSleepThreshold = 0.2;
nape.Config.angularSleepThreshold = 0.4;
nape.Config.contactBiasCoef = 0.3;
nape.Config.contactStaticBiasCoef = 0.6;
nape.Config.contactContinuousBiasCoef = 0.4;
nape.Config.contactContinuousStaticBiasCoef = 0.5;
nape.Config.constraintLinearSlop = 0.1;
nape.Config.constraintAngularSlop = 1e-3;
nape.Config.illConditionedThreshold = 2e+8;
zpp_nape.ZPP_Const.FMAX = 1e100;
zpp_nape.ZPP_ID._Constraint = 0;
zpp_nape.ZPP_ID._Interactor = 0;
zpp_nape.ZPP_ID._CbType = 0;
zpp_nape.ZPP_ID._CbSet = 0;
zpp_nape.ZPP_ID._Listener = 0;
zpp_nape.ZPP_ID._ZPP_SimpleVert = 0;
zpp_nape.ZPP_ID._ZPP_SimpleSeg = 0;
zpp_nape.ZPP_ID._InteractionGroup = 0;
zpp_nape.ZPP_ID._Space = 0;
zpp_nape.callbacks.ZPP_Callback.internal = false;
zpp_nape.callbacks.ZPP_CbType.ANY_SHAPE = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_BODY = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_COMPOUND = new nape.callbacks.CbType();
zpp_nape.callbacks.ZPP_CbType.ANY_CONSTRAINT = new nape.callbacks.CbType();
zpp_nape.util.ZPP_Flags.internal = false;
zpp_nape.util.ZPP_Flags.id_ImmState_ACCEPT = 1;
zpp_nape.util.ZPP_Flags.id_ImmState_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ImmState_ALWAYS = 4;
zpp_nape.util.ZPP_Flags.id_GravMassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_GravMassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_GravMassMode_SCALED = 2;
zpp_nape.util.ZPP_Flags.id_InertiaMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_InertiaMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_MassMode_DEFAULT = 0;
zpp_nape.util.ZPP_Flags.id_MassMode_FIXED = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_STATIC = 1;
zpp_nape.util.ZPP_Flags.id_BodyType_DYNAMIC = 2;
zpp_nape.util.ZPP_Flags.id_BodyType_KINEMATIC = 3;
zpp_nape.util.ZPP_Flags.id_ListenerType_BODY = 0;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT = 1;
zpp_nape.util.ZPP_Flags.id_ListenerType_CONSTRAINT = 1;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE = 2;
zpp_nape.util.ZPP_Flags.id_ListenerType_INTERACTION = 2;
zpp_nape.util.ZPP_Flags.id_PreFlag_ACCEPT_ONCE = 3;
zpp_nape.util.ZPP_Flags.id_ListenerType_PRE = 3;
zpp_nape.util.ZPP_Flags.id_PreFlag_IGNORE_ONCE = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_BEGIN = 0;
zpp_nape.util.ZPP_Flags.id_InteractionType_COLLISION = 1;
zpp_nape.util.ZPP_Flags.id_CbEvent_ONGOING = 6;
zpp_nape.util.ZPP_Flags.id_InteractionType_SENSOR = 2;
zpp_nape.util.ZPP_Flags.id_CbEvent_END = 1;
zpp_nape.util.ZPP_Flags.id_InteractionType_FLUID = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_WAKE = 2;
zpp_nape.util.ZPP_Flags.id_InteractionType_ANY = 7;
zpp_nape.util.ZPP_Flags.id_CbEvent_SLEEP = 3;
zpp_nape.util.ZPP_Flags.id_CbEvent_BREAK = 4;
zpp_nape.util.ZPP_Flags.id_CbEvent_PRE = 5;
zpp_nape.util.ZPP_Flags.id_Winding_UNDEFINED = 0;
zpp_nape.util.ZPP_Flags.id_Winding_CLOCKWISE = 1;
zpp_nape.util.ZPP_Flags.id_Winding_ANTICLOCKWISE = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_VALID = 0;
zpp_nape.util.ZPP_Flags.id_ValidationResult_DEGENERATE = 1;
zpp_nape.util.ZPP_Flags.id_ValidationResult_CONCAVE = 2;
zpp_nape.util.ZPP_Flags.id_ValidationResult_SELF_INTERSECTING = 3;
zpp_nape.util.ZPP_Flags.id_ShapeType_CIRCLE = 0;
zpp_nape.util.ZPP_Flags.id_ShapeType_POLYGON = 1;
zpp_nape.util.ZPP_Flags.id_Broadphase_DYNAMIC_AABB_TREE = 0;
zpp_nape.util.ZPP_Flags.id_Broadphase_SWEEP_AND_PRUNE = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_COLLISION = 1;
zpp_nape.util.ZPP_Flags.id_ArbiterType_SENSOR = 2;
zpp_nape.util.ZPP_Flags.id_ArbiterType_FLUID = 4;
zpp_nape.callbacks.ZPP_Listener.internal = false;
zpp_nape.callbacks.ZPP_Listener.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_BODY == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_BODY = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_BODY;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_CONSTRAINT;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_INTERACTION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ListenerType_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ListenerType_PRE = new nape.callbacks.ListenerType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ListenerType_PRE;
	return $r;
}(this))];
zpp_nape.callbacks.ZPP_Listener.events = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BEGIN == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BEGIN = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BEGIN;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_END == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_END = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_END;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_WAKE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_WAKE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_WAKE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_SLEEP == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_SLEEP = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_SLEEP;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_BREAK == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_BREAK = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_BREAK;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_PRE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_PRE = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_PRE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.CbEvent_ONGOING == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.CbEvent_ONGOING = new nape.callbacks.CbEvent();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.CbEvent_ONGOING;
	return $r;
}(this))];
zpp_nape.callbacks.ZPP_InteractionListener.UCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.VCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.WCbSet = new zpp_nape.util.ZNPList_ZPP_CbSet();
zpp_nape.callbacks.ZPP_InteractionListener.UCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.callbacks.ZPP_InteractionListener.VCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.callbacks.ZPP_InteractionListener.WCbType = new zpp_nape.util.ZNPList_ZPP_CbType();
zpp_nape.dynamics.ZPP_Arbiter.internal = false;
zpp_nape.dynamics.ZPP_Arbiter.COL = 1;
zpp_nape.dynamics.ZPP_Arbiter.FLUID = 4;
zpp_nape.dynamics.ZPP_Arbiter.SENSOR = 2;
zpp_nape.dynamics.ZPP_Arbiter.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_COLLISION;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_SENSOR;
	return $r;
}(this)),null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ArbiterType_FLUID == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ArbiterType_FLUID = new nape.dynamics.ArbiterType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ArbiterType_FLUID;
	return $r;
}(this))];
zpp_nape.dynamics.ZPP_ColArbiter.FACE1 = 0;
zpp_nape.dynamics.ZPP_ColArbiter.FACE2 = 1;
zpp_nape.dynamics.ZPP_ColArbiter.CIRCLE = 2;
zpp_nape.dynamics.ZPP_Contact.internal = false;
zpp_nape.dynamics.ZPP_InteractionGroup.SHAPE = 1;
zpp_nape.dynamics.ZPP_InteractionGroup.BODY = 2;
zpp_nape.geom.ZPP_Collide.flowpoly = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_Collide.flowsegs = new zpp_nape.util.ZNPList_ZPP_Vec2();
zpp_nape.geom.ZPP_ConvexRayResult.internal = false;
zpp_nape.geom.ZPP_GeomVertexIterator.internal = false;
zpp_nape.geom.ZPP_MarchingSquares.me = new zpp_nape.geom.ZPP_MarchingSquares();
zpp_nape.geom.ZPP_MarchingSquares.look_march = [-1,224,56,216,14,-1,54,214,131,99,-1,91,141,109,181,85];
zpp_nape.geom.ZPP_PartitionVertex.nextId = 0;
zpp_nape.geom.ZPP_Ray.internal = false;
zpp_nape.phys.ZPP_Body.types = [null,(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_STATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_STATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_STATIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_DYNAMIC;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC = new nape.phys.BodyType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.BodyType_KINEMATIC;
	return $r;
}(this))];
zpp_nape.phys.ZPP_Body.cur_graph_depth = 0;
zpp_nape.phys.ZPP_Material.WAKE = 1;
zpp_nape.phys.ZPP_Material.PROPS = 2;
zpp_nape.phys.ZPP_Material.ANGDRAG = 4;
zpp_nape.phys.ZPP_Material.ARBITERS = 8;
zpp_nape.shape.ZPP_Shape.types = [(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_CIRCLE;
	return $r;
}(this)),(function($this) {
	var $r;
	if(zpp_nape.util.ZPP_Flags.ShapeType_POLYGON == null) {
		zpp_nape.util.ZPP_Flags.internal = true;
		zpp_nape.util.ZPP_Flags.ShapeType_POLYGON = new nape.shape.ShapeType();
		zpp_nape.util.ZPP_Flags.internal = false;
	}
	$r = zpp_nape.util.ZPP_Flags.ShapeType_POLYGON;
	return $r;
}(this))];
zpp_nape.shape.ZPP_Edge.internal = false;
zpp_nape.space.ZPP_AABBTree.tmpaabb = new zpp_nape.geom.ZPP_AABB();
zpp_nape.space.ZPP_DynAABBPhase.FATTEN = 3.0;
zpp_nape.space.ZPP_DynAABBPhase.VEL_STEPS = 2.0;
zpp_nape.util.ZPP_ConstraintList.internal = false;
zpp_nape.util.ZPP_BodyList.internal = false;
zpp_nape.util.ZPP_InteractorList.internal = false;
zpp_nape.util.ZPP_CompoundList.internal = false;
zpp_nape.util.ZPP_ListenerList.internal = false;
zpp_nape.util.ZPP_CbTypeList.internal = false;
zpp_nape.util.ZPP_Vec2List.internal = false;
zpp_nape.util.ZPP_GeomPolyList.internal = false;
zpp_nape.util.ZPP_RayResultList.internal = false;
zpp_nape.util.ZPP_ConvexResultList.internal = false;
zpp_nape.util.ZPP_EdgeList.internal = false;
zpp_nape.util.ZPP_ShapeList.internal = false;
zpp_nape.util.ZPP_InteractionGroupList.internal = false;
zpp_nape.util.ZPP_ArbiterList.internal = false;
zpp_nape.util.ZPP_ContactList.internal = false;
SpaceGame.main();
})();
